.push nop
# vim: set expandtab ts=8 nowrap:
.pop nop




.push plain

<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<title>nfsu2-re</title>
<style>
body {
	font-family: Arial,Tahoma,sans-serif;
	background: #888;
}
table {
        border-collapse: collapse;
}
td,th {
	padding: .1em .4em;
	border: 1px solid #000;
}
th {
        background: #f5f5f5;
}
div, h1 {
	padding: 1em;
	border: 1px solid #efefef;
	outline: 1px solid #d0d0d0;
	max-width: 50em;
}
h1 {
	background:#C7C7C7;
}
h1,h2,h3,h4,h5,h6 {
        margin-top: 0.2em;
}
h2 a,h3 a,h4 a,h5 a,h6 a{
	color: #A0A0A0;
}
body > div {
	margin-bottom: 1em;
	background: #fff;
}
.center {
	text-align: center;
}
code {
	display: inline-block;
	background: #dfdfdf;
	padding: 2px .2em;
	margin: 0 .2em;
	border-radius: 2px;
}
pre {
	border:2px solid #CDCDCD;
	padding: 0.5em;
	white-space: pre-wrap;
	background: #f7f7f7;
}
pre.ida {
	color:#000080;
	font-weight: bold;
}
pre.ida span.text {
	color:#000;
}
pre.ida span.comment {
	color:#808080;
}
pre.ida span.ident {
	color:#0000FF;
}
pre.ida span.num,pre.ida span.str {
	color:#008000;
}
pre.ida span.hi {
	background:#FFFF00;
}
span.unresolved,a.funcref,a.fieldref {
        padding: 0 4px;
        border-radius: 3px;
        font-family: monospace;
}
span.unresolved {
        background: #ff5454;
}
a.funcref {
        background: #fdf;
}
a.funcref:hover {
        background: #f6f;
}
a.fieldref {
        background: #dfd;
}
a.fieldref:hover {
        background: #6f6;
}
span.func,span.field {
        display: block;
        padding: 2px 3px;
        font-family: monospace;
        font-weight: bold;
        margin: .5em 0;
}
span.func {
        background: #fdf;
        border: 1px solid #f6f;
}
span.field {
        background: #dfd;
        border: 1px solid #6f6;
}
details {
        padding: .2em .4em 0 .4em;
        margin: .5em 0;
        border: 1px solid #ccc;
        background: #eee;
}
summary {
        user-select: none;
        cursor: pointer;
}
</style>
</head>
<body>

.pop plain





{nfsu2-re} |||h





.push section

{Prologue}      |||h id=prologue

This is just me documenting while I have fun attempting to reverse-engineer the game
Need For Speed Underground 2, otherwise knows as nfsu2.

This normally belongs to {https://github.com/yugecin/nfsu2-re}.                                 |||a href=https://github.com/yugecin/nfsu2-re

Other pages: {(fpu) cheatsheet}                                                                 |||a href=cheatsheet.html

.pop section
.push section

{Index}         |||h id=index

{}              |||index

.pop section
.push section

{Injected code}         |||h id=injectedcode

The code for all injected things I did can be found in {nfsu2-re-hooks/*.c}.                    |||code
It's configured as a VC2005 project in a VC2005 solution.
The project emits a compiled file to {..\NeedForSpeed U2\scripts\nfsu2-re-hooks.asi}.           |||code
I'm using the {Ultimate ASI Loader by ThirteenAG},                                              |||a href=https://github.com/ThirteenAG/Ultimate-ASI-Loader/releases
which loads the library nicely for me (download the ZIP and place the dll in the game folder,
name it {dinput8.dll}).                                                                         |||code

.pop section
.push section

{Display settings}  ||| h id=displaysettings

Display settings get saved in the windows registry. See {registry}.                             ||| href

TODO. I was writing this when I got distracted by the language stuff.

.push symbols
- {5BE190 void StoreOptLightGlowSetToZero()}                                                    ||| func
  .push pre
  {8709D4} = {870CE4};                                                                          ||| refplain,refplain
  {870CE4} = 0;                                                                                 ||| refplain
  .pop pre
  TODO why

- {5BE1B0 void RestoreOptLightGlow()}                                                           ||| func
  .push pre
  {870CE4} = {8709D4};                                                                          ||| refplain,refplain
  .pop pre
  TODO why

- {5BE1C0 int GetWorldDetailClampBetween0And2()}                                                ||| func
  .push pre
  return clamp({870CF4}, 0, 2);                                                                 ||| refplain
  .pop pre

- {5BE560 int GetRealFilteringLevelForCurrentSetting()}                                         ||| func
  Returns {{870D18}+1} ({0-2 -> 1-3}), but maxed to {2} if the device doesn't have              ||| code,refplain,code,code
  {D3DDEVCAPS_RTPATCHES} support.                                                               ||| code

- {5BE200 void DetermineMaxDisplaySettingValuesForDevice()}                                     ||| func
  Sets maximum values of various options based on the adapter info in {86C120}.                 ||| ref
  See all {_optMax*} fields.                                                                    ||| code
  Also seems to do stuff with shaders maybe? TODO
  Called twice. TODO: where and why

- {5BE5A0 void DetermineSupportedResolutions()}                                                 ||| func
  Based on the device, for every resolution index,
  put {1} in {86E880} at that index if available.                                               ||| code,ref

- {5BE690 void EnsureDisplayOptionsDontExceedMaxSettings()}                                     ||| func
  For each option that has a maximum value field,
  set it to the maximum value if it was exceeded.

- {5BE870 void SetPresetDisplayLevelFromLevelOfDetail()}                                        ||| func

- {5BE9F0 void SetPresetDisplayLevelFromLevelOfDetaulAndLimit()}                                ||| func
  Calls {5BE870},                                                                               ||| ref
  sets {870D08} to 0 for some specific windows version or if the device is from vendor          ||| ref
  {Advanced Micro Devices, Inc}, then calls {5BE690}                                            ||| em,ref

- {800538 int _resolutionWidths[6]}                                                             ||| field
  Values {640, 800, 1024, 1280, 1280, 1600}                                                     ||| code

- {800550 int _resolutionHeights[6]}                                                            ||| field
  Values {480, 600, 768, 960, 1024, 1200}                                                       ||| code

- {86E880 int isSupportedResolutionIdx[6]}                                                      ||| field

- {87099C int _optLevelOfDetail}                                                                ||| field

- {8709D4 tempStoredOptLightGlow}                                                               ||| field
  Used as temporary store for {5BE190} and {5BE1B0}                                             ||| ref,ref

- {870CB8 int _optCarReflectionUpdateRate}                                                      ||| field

- {870CBC int _optCarReflectionDetail}                                                          ||| field

- {870CC0 int _optCarShadowNeon}                                                                ||| field

- {870CC4 int _optCarHeadlight}                                                                 ||| field

- {870CC8 int _optCarLightingEnableUNUSED}                                                      ||| field
  Seemingly unused.

- {870CCC int _optCarDamageEnableUNUSED}                                                        ||| field
  Seemingly unused.

- {870CD0 int _optCrowds}                                                                       ||| field

- {870CD4 int _optWorldReflectionDetail}                                                        ||| field

- {870CD8 int _optFog}                                                                          ||| field

- {870CDC int _optMotionBlur}                                                                   ||| field

- {870CE0 int _optLightTrails}                                                                  ||| field

- {870CE4 int _optLightGlow}                                                                    ||| field

- {870CE8 int _optAnimatedTextureEnable}                                                        ||| field
  Doesn't seem to be in the display menu, or it's hidden due to my system config.

- {870CEC int _optParticleSystem}                                                               ||| field

- {870CF0 int _optDepthOfField}                                                                 ||| field

- {870CF4 int _optWorldDetail}                                                                  ||| field

- {870CF8 int _optCarGeometryDetail}                                                            ||| field

- {870CFC int _optOverBright}                                                                   ||| field

- {870D00 int _optEnchancedContrast}                                                            ||| field

- {870D04 int _optTinting}                                                                      ||| field

- {870D08 int _optFSAALevel}                                                                    ||| field

- {870D0C int _optHorizonFog}                                                                   ||| field

- {870D10 int _optRainSplatter}                                                                 ||| field

- {870D18 int _optTextureFiltering}                                                             ||| field

- {870D1C int _optRacingResolutionIdx}                                                          ||| field
  To be used for arrays {800538},{800550} and {86E880}.                                         ||| ref,ref,ref

- {870D24 int _optVsync}                                                                        ||| field

- {8764D0 int _optMaxSettingCarReflectionUpdateRate}                                            ||| field

- {8764D4 int _optMaxSettingCarReflectionDetail}                                                ||| field

- {8764D8 int _optMaxSettingCarShadowNeon}                                                      ||| field

- {8764DC int _optMaxSettingCarHeadlight}                                                       ||| field

- {8764E0 int _optMaxSettingCarLightingEnable}                                                  ||| field

- {8764E4 int _optMaxSettingCarDamageEnable}                                                    ||| field

- {8764E8 int _optMaxSettingCrowds}                                                             ||| field

- {8764EC int _optMaxSettingWorldReflectionDetail}                                              ||| field

- {8764F0 int _optMaxSettingFog}                                                                ||| field

- {8764F4 int _optMaxSettingMotionBlur}                                                         ||| field

- {8764F8 int _optMaxSettingLightTrails}                                                        ||| field

- {8764FC int _optMaxSettingLightGlow}                                                          ||| field

- {876500 int _optMaxSettingAnimatedTextureEnable}                                              ||| field

- {876504 int _optMaxSettingParticleSystem}                                                     ||| field

- {876508 int _optMaxSettingDepthOfField}                                                       ||| field

- {87650C int _optMaxSettingWorldDetail}                                                        ||| field

- {876510 int _optMaxSettingCarGeometryDetail}                                                  ||| field

- {876514 int _optMaxSettingOverBright}                                                         ||| field

- {876518 int _optMaxSettingEnchancedContrast}                                                  ||| field

- {876520 int _optMaxSettingFSAALevel}                                                          ||| field

- {876524 int _optMaxSettingHorizonFog}                                                         ||| field

- {876528 int _optMaxSettingRainSplatter}                                                       ||| field

- {876530 int _optMaxSettingTextureFiltering}                                                   ||| field
.pop symbols

.pop section
.push section

{Registry}              |||h id=registry

Many values (mainly display settings) are loaded/saved in procs {5BEA20} and {5BEEA0}.          ||| ref,ref

They are saved in key {Software\EA Games\Need for Speed Underground 2} in {HKEY_CURRENT_USER}.  ||| code,code
On my machine this translates to:
{HKEY_CURRENT_USER\Software\Classes\VirtualStore\MACHINE\SOFTWARE\Wow6432Node\EA                ||| code
Games\Need for Speed Underground 2}.
I'm guessing the extra path in between is because of WOW64.

Variables loaded from there:

{                                                               ||| table
{{{Variable}{Key}}}                                             ||| thead,tr,th,th
{                                                               ||| tbody
{{{870CB0}}     {{VERSION}}}                                    ||| tr,td,ref,td,code
{{{870CB4}}     {{SIZE}}}                                       ||| tr,td,ref,td,code
{{{870CB8}}     {{g_CarEnvironmentMapEnable}}}                  ||| tr,td,ref,td,code
{{{870CBC}}     {{g_CarEnvironmentMapUpdateData}}}              ||| tr,td,ref,td,code
{{{870CC0}}     {{g_CarShadowEnable}}}                          ||| tr,td,ref,td,code
{{{870CC4}}     {{g_CarHeadlightEnable}}}                       ||| tr,td,ref,td,code
{{{870CC8}}     {{g_CarLightingEnable}}}                        ||| tr,td,ref,td,code
{{{870CCC}}     {{g_CarDamageEnable}}}                          ||| tr,td,ref,td,code
{{{870CD0}}     {{g_CrowdEnable}}}                              ||| tr,td,ref,td,code
{{{870CD4}}     {{g_RoadReflectionEnable}}}                     ||| tr,td,ref,td,code
{{{870CD8}}     {{g_FogEnable}}}                                ||| tr,td,ref,td,code
{{{870CDC}}     {{g_MotionBlurEnable}}}                         ||| tr,td,ref,td,code
{{{870CE0}}     {{g_LightStreaksEnable}}}                       ||| tr,td,ref,td,code
{{{870CE4}}     {{g_LightGlowEnable}}}                          ||| tr,td,ref,td,code
{{{870CE8}}     {{g_AnimatedTextureEnable}}}                    ||| tr,td,ref,td,code
{{{870CEC}}     {{g_ParticleSystemEnable}}}                     ||| tr,td,ref,td,code
{{{870CF0}}     {{g_DepthOfFieldEnable}}}                       ||| tr,td,ref,td,code
{{{870CF4}}     {{g_WorldLodLevel}}}                            ||| tr,td,ref,td,code
{{{870CF8}}     {{g_CarLodLevel}}}                              ||| tr,td,ref,td,code
{{{870CFC}}     {{g_OverBrightEnable}}}                         ||| tr,td,ref,td,code
{{{870D00}}     {{g_BleachByPassEnable}}}                       ||| tr,td,ref,td,code
{{{870D04}}     {{g_TintingEnable}}}                            ||| tr,td,ref,td,code
{{{870D08}}     {{g_FSAALevel}}}                                ||| tr,td,ref,td,code
{{{870D0C}}     {{g_HorizonFogEnable}}}                         ||| tr,td,ref,td,code
{{{870D10}}     {{g_RainEnable}}}                               ||| tr,td,ref,td,code
{{{870D18}}     {{g_TextureFiltering}}}                         ||| tr,td,ref,td,code
{{{870D1C}}     {{g_RacingResolution}}}                         ||| tr,td,ref,td,code
{{{87099C}}     {{g_PerformanceLevel}}}                         ||| tr,td,ref,td,code
{{{870D24}}     {{g_VSyncOn}}}                                  ||| tr,td,ref,td,code
}
}

{5B76F0} also loads registry settings, but only once at boot.                                   ||| ref
It seems to load a special key that I haven't seen before:
{Software\Electronic Arts\EA Games\Need for Speed Underground 2\er}. This key                   ||| code
is not present on my system, so this seems interesting.

.push pre
HKEY key;
DWORD type, lenData;
if (RegOpenKeyExA(HKEY_LOCAL_MACHINE, "Software\\E...2\\er", 0, KEY_READ, &key)) {
	type = REG_SZ; // a null-terminated string
	lenData = 21;
	if (RegQueryValueExA(key, 0, 0, &type, &{86FF8C}, &lenData)) \{                         ||| refplain
		{86FF8C}[20] = 0;                                                               ||| refplain
	} else {
		{86FF8C}[0] = 0;                                                                ||| refplain
	}
}
RegCloseKey(&key);
.pop pre

Then it loads more stuff from the normal key:

{Install Dir} is read. If set, passed to (winapi) {GetLongPathNameA}.                           ||| code,code
and if that succeeds, the value is copied to buffer at {86E9B4}.                                ||| ref

{CD Drive} is read. If set, passed to (winapi) {GetLongPathNameA}.                              ||| code,code
passed to (winapi) {GetLastError} and if that succeeds, the value is copied to {86E8B0}.        ||| code,ref

{NotFirstTime} is read. If set, {870D20} gets set to 1, otherwise 0.                            ||| code,ref
It doesn't check the value in the register key. Then 1 is written to the register key.

{CacheSize} is read. If set, {75D65B} is called with the value. TODO                            ||| code,ref

{SwapSize} is read. If set, proc at {75D65B} is called with the value. TODO                     ||| code,ref

{Language} is read. Then it does something with looping through a language.                     |||code
This took some deciphering but I found out that there is some struct with language
information and associated data. See {language_metadata}.                                       ||| href

{StreamingInstall} is read. Then something with {75DD6F}. TODO                                  ||| code,ref

.push symbols
- {5B76F0 void LoadOtherRegistrySettings()}                                                     ||| func
  Called once during boot, from {5B7A70}                                                        ||| ref

- {5BEA20 void LoadDisplaySettings()}                                                           ||| func
  Loads display settings from windows registry into their variables.
  Only called once, at boot.

- {5BEEA0 void SaveDisplaySettings()}                                                           ||| func
  Stores display settings into windows registry.
  Called multiple times, TODO.

- {86E8B0 char CDDrivePath[4]}                                                                  ||| field

- {86E9B4 char installDirPath[260]}                                                             ||| field

- {86FF8C char someRegValue_er[20]}                                                             ||| field

- {870CB0 char *VERSION}                                                                        ||| field

- {870CB4 char *SIZE}                                                                           ||| field

- {870D20 int notFirstTime}                                                                     ||| field
.pop symbols

.pop section
.push section

{Game region} |||h id=gameregion

{5B7C40} certainly helped to know what the region numbers represent                             ||| ref

.push ul
- 0: US
- 2: Korea
- 3: Japan
- 4: Taiwan
- 5: UK/Netherlands/Sweden/Denmark
- 6: France
- 7: Germany
- 8: Italy
- 9: Spain
- 11: China
- 12: Thailand
.pop ul

.push symbols
- {570A30 int GetGameRegion()}                                                                  ||| func
  {return {864F24};}                                                                            ||| code,refplain
- {570A40 int UseCarUKNames()}                                                                  ||| func
  {return {864F24} == 1 || (4 < {864F24} && {864F24} < 10);}                                    ||| code,refplain,refplain,refplain
  Unsure about this name.
- {5B7C40 int OpenPatchesWebsite()}                                                             ||| func
No idea where this is used, TODO
.push pre
int OpenPatchesWebsite()
{
	char *url;

	switch (GetGameRegion()) {
	case 0: url = "http://patches.ea.com/nfs_underground2/EN-US/home.html"; break;
	case 2: url = "http://patches.ea.com/nfs_underground2/KO/home.html"; break;
	case 3: url = "http://patches.ea.com/nfs_underground2/JP/home.html"; break;
	case 4: url = "http://patches.ea.com/nfs_underground2/TW/home.html"; break;
	case 5:
		switch (GetCurrentLoadedLanguage()) {
		case 0: url = "http://patches.ea.com/nfs_underground2/EN-UK/home.html"; break;
		case 5: url = "http://patches.ea.com/nfs_underground2/NL/home.html"; break;
		case 6: url = "http://patches.ea.com/nfs_underground2/SV/home.html"; break;
		case 7: url = "http://patches.ea.com/nfs_underground2/DA/home.html"; break;
		default: goto def;
		}
		break;
	case 6: url = "http://patches.ea.com/nfs_underground2/FR/home.html"; break;
	case 7: url = "http://patches.ea.com/nfs_underground2/DE/home.html"; break;
	case 8: url = "http://patches.ea.com/nfs_underground2/IT/home.html"; break;
	case 9: url = "http://patches.ea.com/nfs_underground2/ES/home.html"; break;
	case 11: url = "http://patches.ea.com/nfs_underground2/ZH/home.html"; break;
	case 12: url = "http://patches.ea.com/nfs_underground2/TH/home.html"; break;
def:
	default: /*eax??*/ break;
	}
	return ShellExecuteA(NULL, "open", url, NULL, NULL, SW_SHOWNORMAL);
}
.pop pre
- {864F24 int _gameRegion}                                                                      ||| field
.pop symbols

.pop section
.push section

{Bin data}   ||| h id=bindata

Lots of data is in {.bin} files. These files can contain multiple {struct BinSection} entries.  ||| code,refto

.push pre
{struct BinSectionHeader} \{                                                                    ||| mkref
        int {magic};                                                                            ||| mkref name=structBinSectionHeader+0
        int {size};                                                                             ||| mkref name=structBinSectionHeader+4
};

{struct BinSection} \{                                                                          ||| mkref
        {struct BinSectionHeader} {header};                                                     ||| refto,mkref name=structBinSection+0
        char {data}[{structBinSectionHeader+4}];                                                ||| mkref name=structBinSection+8,refto
};

{struct BinSectionHandler} \{                                                                   ||| mkref
        int {magic};                                                                            ||| mkref name=structBinSectionHandler+0
        int (*{loadfunc})({struct BinSection}*));                                               ||| mkref name=structBinSectionHandler+4,refto
        int (*{unloadfunc})({struct BinSection}*));                                             ||| mkref name=structBinSectionHandler+8,refto
};

{struct BinSectionMagicMapEntry} \{                                                             ||| mkref
        {struct BinSectionMagicMapEntry} *{nextEntry};                                          ||| refto,mkref name=structBinSectionMagicMapEntry+0
        {struct BinSectionHandler} {value};                                                     ||| refto,mkref name=structBinSectionMagicMapEntry+4
};
.pop pre

These are all the sections that are in the {LANGUAGES/English.bin} file:                        ||| code

.push pre
offset 00000: section 00039000 size 3D230
offset 3D238: section 00000000 size 40
offset 3D280: section 00030201 size FF0
offset 3E278: section 00000000 size 0
offset 3E280: section 00030201 size 1270
offset 3F4F8: section 00000000 size 0
offset 3F500: section 00030201 size 370
offset 3F878: section 00000000 size 0
offset 3F880: section 00030201 size 1070
offset 408F8: section 00000000 size 0
offset 40900: section 00030201 size A70
offset 41378: section 00000000 size 0
offset 41380: section 00030201 size CF0
.pop pre

This is output by an early version of {nfsu2-re-binfiles/main.c}.                               ||| hookfileref

Note that the offset also increments by 8, being {sizeof {struct BinSectionHeader}}.            ||| code,refto

Section magic {0} seems to be just for padding/alignment uses.                                  ||| code

.push symbols

- {43C0B0 void __thiscall RegisterBinSectionHandler({struct BinSectionHandler} *this,           ||| func,refto
                                {struct BinSectionHandler} handler)}                            ||| refto
  .push pre
  int index;

  index = 0x3F & ((handler.{structBinSectionHandler+0} >> 0x6) + (handler.{structBinSectionHandler+0} + (handler.{structBinSectionHandler+0} >> 0xC)));   ||| refto,refto,refto
  this->{structBinSectionMagicMapEntry+4} = handler;                                            ||| refto
  this->{structBinSectionMagicMapEntry+0} = {828050}[index];                                    ||| refto,refplain
  {828050}[index] = this;                                                                       ||| refplain
  {827FE8}++;                                                                                   ||| refplain
  .pop pre

- {408200 int LoadBinSection34B00({struct BinSection} *binsection)}                             ||| func,refto

- {408220 int UnloadBinSection34B00({struct BinSection} *binsection)}                           ||| func,refto

- {40A460 int LoadBinSection3A000({struct BinSection} *binsection)}                             ||| func,refto

- {40A4A0 int UnloadBinSection3A000({struct BinSection} *binsection)}                           ||| func,refto

- {431870 int LoadBinSection80037050({struct BinSection} *binsection)}                          ||| func,refto

- {4318D0 int UnloadBinSection80037050({struct BinSection} *binsection)}                        ||| func,refto

- {432080 int LoadBinSection37140({struct BinSection} *binsection)}                             ||| func,refto

- {4320C0 int UnloadBinSection37140({struct BinSection} *binsection)}                           ||| func,refto

- {4325C0 int UnloadBinSection80037020({struct BinSection} *binsection)}                        ||| func,refto

- {4348F0 int LoadBinSection0E34010({struct BinSection} *binsection)}                           ||| func,refto
  Uses {Anim_CNFSAnimBank_SlotPool}                                                             ||| code

- {4349A0 int UnloadBinSection0E34010({struct BinSection} *binsection)}                         ||| func,refto

- {434E10 int LoadBinSection0E34009({struct BinSection} *binsection)}                           ||| func,refto
  Uses {Anim_CAnimSkeleton_SlotPool}                                                            ||| code

- {435A50 int UnloadBinSection37110({struct BinSection} *binsection)}                           ||| func,refto

- {435A90 int LoadBinSection37080({struct BinSection} *binsection)}                             ||| func,refto

- {4365B0 int UnloadBinSection0E34009({struct BinSection} *binsection)}                         ||| func,refto

- {4377F0 int LoadBinSection80037020({struct BinSection} *binsection)}                          ||| func,refto

- {4381B0 int LoadBinSection37100({struct BinSection} *binsection)}                             ||| func,refto

- {438720 int UnloadBinSection37150({struct BinSection} *binsection)}                           ||| func,refto

- {438C20 int UnloadBinSection37080({struct BinSection} *binsection)}                           ||| func,refto

- {438C60 int UnloadBinSection37090({struct BinSection} *binsection)}                           ||| func,refto

- {439D70 int UnloadBinSection37100({struct BinSection} *binsection)}                           ||| func,refto

- {43A1F0 int LoadBinSection37150({struct BinSection} *binsection)}                             ||| func,refto

- {43A260 int LoadBinSection37110({struct BinSection} *binsection)}                             ||| func,refto

- {43A460 int LoadBinSection37090({struct BinSection} *binsection)}                             ||| func,refto

- {43C0A0 int LoadUnloadBinSection0({struct BinSection} *binsection)}                           ||| func,refto
  Nop handler that returns 1 if {binsection->{structBinSection+0}} is 0.                        ||| code,refto

- {43C100 {struct BinSectionMagicMapEntry} *FindBinSectionHandler(int magic)}                   ||| func,refto
  Used in {570D70} and {577B10}.                                                                ||| ref,ref
  .push pre
  {struct BinSectionMagicMapEntry} *entry;                                                      ||| refto
  int index;

  index = 0x3F & ((magic >> 0x6) + (magic + (magic >> 0xC)));
  entry = {828050}[index];                                                                      ||| refplain
  while (entry) {
          if (entry->{structBinSectionMagicMapEntry+4}.{structBinSectionHandler+0} == magic) \{ ||| refto,refto
                  return entry;
          }
          entry = entry->{structBinSectionMagicMapEntry+0};                                     ||| refto
  }
  return NULL;
  .pop pre


- {44AB60 int LoadBinSection8003B200_8003B201_8003B202({struct BinSection} *binsection)}        ||| func,refto

- {452E90 int UnloadBinSection8003B200_8003B201_8003B202({struct BinSection} *binsection)}      ||| func,refto

- {47BC30 int LoadBinSection8003B500({struct BinSection} *binsection)}                          ||| func,refto

- {482D20 int UnloadBinSection8003B500({struct BinSection} *binsection)}                        ||| func,refto
  Does a function call on {82B884}.                                                             ||| ref

- {48A280 int LoadBinSection3B700({struct BinSection} *binsection)}                             ||| func,refto

- {48A2B0 int UnloadBinSection3B700({struct BinSection} *binsection)}                           ||| func,refto

- {48B4A0 int LoadBinSection34202({struct BinSection} *binsection)}                             ||| func,refto

- {48B740 int UnloadBinSection34202({struct BinSection} *binsection)}                           ||| func,refto

- {48E070 int LoadBinSection135200_80135100_80135000({struct BinSection} *binsection)}          ||| func,refto

- {48E270 int UnloadBinSection135200_80135100_80135000({struct BinSection} *binsection)}        ||| func,refto

- {491C70 int LoadBinSection80035000_80035010_35021_35020({struct BinSection} *binsection)}     ||| func,refto

- {491D50 int UnloadBinSection80035000_80035010_35021_35020({struct BinSection} *binsection)}   ||| func,refto

- {494060 int LoadBinSection80134000({struct BinSection} *binsection)}                          ||| func,refto

- {4940E0 int UnloadBinSection80134000({struct BinSection} *binsection)}                        ||| func,refto

- {494EA0 int LoadBinSectionB3300000_B332000_B0300100({struct BinSection} *binsection)}         ||| func,refto

- {495040 int UnloadBinSectionB3300000_B332000_B0300100({struct BinSection} *binsection)}       ||| func,refto

- {500290 int UnloadBinSection80034A10({struct BinSection} *binsection)}                        ||| func,refto

- {5108A0 int LoadBinSection30230({struct BinSection} *binsection)}                             ||| func,refto

- {5108C0 int UnloadBinSection30230({struct BinSection} *binsection)}                           ||| func,refto

- {5108E0 int LoadBinSection30231({struct BinSection} *binsection)}                             ||| func,refto

- {510900 int UnloadBinSection30231({struct BinSection} *binsection)}                           ||| func,refto

- {512C00 int LoadBinSection80034A10({struct BinSection} *binsection)}                          ||| func,refto
  This gets loaded once (enforced by {8641F4}), data resides in {GLOBAL/GLOBALB.BUN}.           ||| ref,code
  Career/Sponsor/DVD/Magazines related.

- {51BD30 int LoadBinSection30203_30210({struct BinSection} *binsection)}                       ||| func,refto
  Loads FNG packages?

- {51C610 int UnloadBinSection39020({struct BinSection} *binsection)}                           ||| func,refto

- {52CD90 int LoadBinSection39020({struct BinSection} *binsection)}                             ||| func,refto

- {5425A0 int UnloadBinSection30203_30210({struct BinSection} *binsection)}                     ||| func,refto
  Unloads FNG packages?

- {56C4C0 int LoadBinSection34A07({struct BinSection} *binsection)}                             ||| func,refto

- {56C4E0 int UnloadBinSection34A07({struct BinSection} *binsection)}                           ||| func,refto

- {570D70 int LoadBinSection({struct BinSection} *binsection)}                                  ||| func,refto
  Only called from {577AB0}.                                                                    ||| ref
  .push pre
  {struct BinSectionMagicMapEntry} *entry;                                                      ||| refto
  int i;

  entry = {43C100}(binsection->{structBinSection+0}.{structBinSectionHeader+0});                ||| refplain,refto,refto
  if (entry) {
          return entry->{structBinSectionMagicMapEntry+4}.{structBinSectionHandler+4}(binsection);||| refto,refto
  }
  for (i = 0; i < 36; i++) {
          if ({7FA858}[i](binsection)) \{                                                       ||| refplain
                  return 1;
          }
  }
  return 0;
  .pop pre
  Returns 1 when something managed to load it.
  Some loaders that are in the map are also in the array.

- {577B10 void UnloadBinSection(void *arg1, void *arg2)}                                        ||| func
  Does things and calls the bin section unload handler, similar to {570D70}.                    ||| ref

- {579340 int LoadBinSection39100_39101_39102({struct BinSection} *binsection)}                 ||| func,refto

- {579350 int UnloadBinSection39100_39101_39102({struct BinSection} *binsection)}               ||| func,refto

- {57A470 int LoadBinSection8003B000({struct BinSection} *binsection)}                          ||| func,refto

- {57BCE0 int UnloadBinSection8003B000({struct BinSection} *binsection)}                        ||| func,refto

- {599440 int LoadBinSection80034A30({struct BinSection} *binsection)}                          ||| func,refto

- {5994D0 int UnloadBinSection80034A30({struct BinSection} *binsection)}                        ||| func,refto

- {5A1750 int LoadBinSection80034020({struct BinSection} *binsection)}                          ||| func,refto

- {5A1860 int UnloadBinSection80034020({struct BinSection} *binsection)}                        ||| func,refto

- {5A8BD0 int UnloadBinSection34026_34027({struct BinSection} *binsection)}                     ||| func,refto

- {5B0E30 int LoadBinSection34026_34027({struct BinSection} *binsection)}                       ||| func,refto

- {5D3EB0 int LoadBinSection34201({struct BinSection} *binsection)}                             ||| func,refto

- {5D3EF0 int UnloadBinSection34201({struct BinSection} *binsection)}                           ||| func,refto

- {5D6440 int UnloadBinSection34108({struct BinSection} *binsection)}                           ||| func,refto

- {5D8470 int LoadBinSection34146({struct BinSection} *binsection)}                             ||| func,refto

- {5D84D0 int UnoadBinSection34146({struct BinSection} *binsection)}                            ||| func,refto

- {5DA490 int LoadBinSection80034147({struct BinSection} *binsection)}                          ||| func,refto

- {5DB2E0 int LoadBinSection34108({struct BinSection} *binsection)}                             ||| func,refto

- {5DB5A0 int UnloadBinSection80034150({struct BinSection} *binsection)}                        ||| func,refto

- {5DBF60 int LoadBinSection80036000({struct BinSection} *binsection)}                          ||| func,refto

- {5DC050 int UnloadBinSection80036000({struct BinSection} *binsection)}                        ||| func,refto

- {5DEB80 int LoadBinSection34121_34122_34123_34124({struct BinSection} *binsection)}           ||| func,refto

- {5DEE00 int UnloadBinSection80034147({struct BinSection} *binsection)}                        ||| func,refto

- {5DEF30 int LoadBinSection_34110_34111_34112_34112({struct BinSection} *binsection)}          ||| func,refto

- {5DF8A0 int LoadBinSection80034100_34107({struct BinSection} *binsection)}                    ||| func,refto

- {5DFBA0 int UnloadBinSection80034100_34107({struct BinSection} *binsection)}                  ||| func,refto

- {5E0190 int LoadBinSection34250({struct BinSection} *binsection)}                             ||| func,refto

- {5E0220 int UnloadBinSection34250({struct BinSection} *binsection)}                           ||| func,refto

- {5E4820 int UnloadBinSection34121_34122_34123_34124({struct BinSection} *binsection)}         ||| func,refto

- {5E4E60 int UnloadBinSection_34110_34111_34112_34112({struct BinSection} *binsection)}        ||| func,refto

- {5E81C0 int LoadBinSection80034130_3412F({struct BinSection} *binsection)}                    ||| func,refto
  Called when exiting to main menu after being in race/freeroam.

- {5E8660 int UnloadBinSection80034130_3412F({struct BinSection} *binsection)}                  ||| func,refto

- {5E9C10 int LoadBinSection80034150_thiscall({struct BinSection} *binsection)}                 ||| func,refto

- {5EA0F0 int LoadBinSection80034150({struct BinSection} *binsection)}                          ||| func,refto

- {60B810 int LoadBinSection8003B600({struct BinSection} *binsection)}                          ||| func,refto

- {60BAC0 int UnloadBinSection8003B600({struct BinSection} *binsection)}                        ||| func,refto

- {61B460 int UnloadBinSection34600_34601_80034602({struct BinSection} *binsection)}            ||| func,refto

- {61C3C0 int LoadBinSection30220({struct BinSection} *binsection)}                             ||| func,refto

- {61C420 int UnloadBinSection30220({struct BinSection} *binsection)}                           ||| func,refto

- {61CB50 int LoadBinSection34030({struct BinSection} *binsection)}                             ||| func,refto

- {61CB90 int UnloadBinSection34030({struct BinSection} *binsection)}                           ||| func,refto

- {636BE0 int LoadBinSection34600_34601_34608_34609_34607_80034602({struct BinSection} *binsection)} ||| func,refto
  Sets {8A1CCC} data.                                                                           ||| ref

- {77B620 void init_function_77B620_registerBinSectionHandler0()}                               ||| func
  Registers {7EB3F4} (without using {43C0B0}).                                                  ||| ref,ref

- {77CB00 void init_function_77CB00_registerBinSectionHandler80134000()}                        ||| func

- {77CC20 void init_function_77CC20_registerBinSectionHandler135200()}                          ||| func

- {77CC40 void init_function_77CC40_registerBinSectionHandler80135100()}                        ||| func

- {77CC60 void init_function_77CC60_registerBinSectionHandler80135000()}                        ||| func

- {77CD60 void init_function_77CD60_registerBinSectionHandlerB3300000()}                        ||| func

- {77CDA0 void init_function_77CDA0_registerBinSectionHandlerB0300100()}                        ||| func

- {77CD80 void init_function_77CD80_registerBinSectionHandlerB332000()}                         ||| func

- {77D960 void init_function_77D960_registerBinSectionHandler39100()}                           ||| func

- {77D980 void init_function_77D980_registerBinSectionHandler39101()}                           ||| func

- {77D9A0 void init_function_77D9A0_registerBinSectionHandler39102()}                           ||| func

- {77E190 void init_function_77E190_registerBinSectionHandler34026()}                           ||| func

- {77E1B0 void init_function_77E1B0_registerBinSectionHandler34027()}                           ||| func

- {77E6C0 void init_function_77E6C0_registerBinSectionHandler80034140()}                        ||| func

- {77E6E0 void init_function_77E6E0_registerBinSectionHandler3412F()}                           ||| func

- {77E720 void init_function_77E720_registerBinSectionHandler34146()}                           ||| func

- {77E740 void init_function_77E740_registerBinSectionHandler34201()}                           ||| func

- {77E7A0 void init_function_77E7A0_registerBinSectionHandler80034147()}                        ||| func

- {77E7D0 void init_function_77E7D0_registerBinSectionHandler34110()}                           ||| func

- {77E7F0 void init_function_77E7F0_registerBinSectionHandler34113()}                           ||| func

- {77E810 void init_function_77E781_registerBinSectionHandler34111()}                           ||| func

- {77E830 void init_function_77E783_registerBinSectionHandler34112()}                           ||| func

- {77E890 void init_function_77E890_registerBinSectionHandler34108()}                           ||| func

- {77E8B0 void init_function_77E8B0_registerBinSectionHandler80034100()}                        ||| func

- {77E8D0 void init_function_77E8D0_registerBinSectionHandler34107()}                           ||| func

- {7EB3F4 {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntry0}                     ||| field,refto
  Map entry with {43C0A0} as both {structBinSectionHandler+4} and {structBinSectionHandler+8}.  ||| ref,refto,refto

- {7FA858 int (*binSectionLoadFuncs)({struct BinSection}*)[36]}                                 ||| field,refto
  Called by {570D70}.                                                                           ||| ref
  These funcs return 1 if they can process the data.
  .push pre
  int (*{7FA858})({struct BinSection}*)[] = \{                                                  ||| refplain,refto
  /*0*/   {52CD00},                                                                             ||| refplain
  /*1*/   {491C70},                                                                             ||| refplain
  /*2*/   {5DBF60},                                                                             ||| refplain
  /*3*/   {5A1750},                                                                             ||| refplain
  /*4*/   {5EA0F0},                                                                             ||| refplain
  /*5*/   {4348F0},                                                                             ||| refplain
  /*6*/   {434E10},                                                                             ||| refplain
  /*7*/   {4377F0},                                                                             ||| refplain
  /*8*/   {431870},                                                                             ||| refplain
  /*9*/   {435A90},                                                                             ||| refplain
  /*10*/  {43A460},                                                                             ||| refplain
  /*11*/  {43A260},                                                                             ||| refplain
  /*12*/  {432080},                                                                             ||| refplain
  /*13*/  {43A1F0},                                                                             ||| refplain
  /*14*/  {4381B0},                                                                             ||| refplain
  /*15*/  {48B4A0},                                                                             ||| refplain
  /*16*/  {636BE0},                                                                             ||| refplain
  /*17*/  {599440},                                                                             ||| refplain
  /*18*/  {56C4C0},                                                                             ||| refplain
  /*19*/  {61CB50},                                                                             ||| refplain
  /*20*/  {5DEB80},                                                                             ||| refplain
  /*21*/  {408200},                                                                             ||| refplain
  /*22*/  {5125B0},                                                                             ||| refplain
  /*23*/  {5E0190},                                                                             ||| refplain
  /*24*/  {40A460},                                                                             ||| refplain
  /*25*/  {51BD30},                                                                             ||| refplain
  /*26*/  {57A470},                                                                             ||| refplain
  /*27*/  {44AB60},                                                                             ||| refplain
  /*28*/  {512C00},                                                                             ||| refplain
  /*29*/  {52CD90},                                                                             ||| refplain
  /*30*/  {47BC30},                                                                             ||| refplain
  /*31*/  {61C3C0},                                                                             ||| refplain
  /*32*/  {60B810},                                                                             ||| refplain
  /*33*/  {48A280},                                                                             ||| refplain
  /*34*/  {5108A0},                                                                             ||| refplain
  /*35*/  {5108E0},                                                                             ||| refplain
  }
  .pop pre

- {7FA8E8 int (*binSectionUnloadFuncs)({struct BinSection}*)[36]}                               ||| field,refto
  Called by {577B10}.                                                                           ||| ref
  These funcs return 1 if they can process the data.
  .push pre
  int (*{7FA8E8})({struct BinSection}*)[] = \{                                                  ||| refplain,refto
  /*0*/   {537290},                                                                             ||| refplain
  /*1*/   {491D50},                                                                             ||| refplain
  /*2*/   {5DC050},                                                                             ||| refplain
  /*3*/   {5A1860},                                                                             ||| refplain
  /*4*/   {5DB5A0},                                                                             ||| refplain
  /*5*/   {4349A0},                                                                             ||| refplain
  /*6*/   {4365B0},                                                                             ||| refplain
  /*7*/   {4325C0},                                                                             ||| refplain
  /*8*/   {4318D0},                                                                             ||| refplain
  /*9*/   {438C20},                                                                             ||| refplain
  /*10*/  {438C60},                                                                             ||| refplain
  /*11*/  {435A50},                                                                             ||| refplain
  /*12*/  {4320C0},                                                                             ||| refplain
  /*13*/  {438720},                                                                             ||| refplain
  /*14*/  {439D70},                                                                             ||| refplain
  /*15*/  {48B740},                                                                             ||| refplain
  /*16*/  {61B460},                                                                             ||| refplain
  /*17*/  {5994D0},                                                                             ||| refplain
  /*18*/  {56C4E0},                                                                             ||| refplain
  /*19*/  {61CB90},                                                                             ||| refplain
  /*20*/  {5E4820},                                                                             ||| refplain
  /*21*/  {408220},                                                                             ||| refplain
  /*22*/  {4FFAE0},                                                                             ||| refplain
  /*23*/  {5E0220},                                                                             ||| refplain
  /*24*/  {40A4A0},                                                                             ||| refplain
  /*25*/  {5425A0},                                                                             ||| refplain
  /*26*/  {57BCE0},                                                                             ||| refplain
  /*27*/  {452E90},                                                                             ||| refplain
  /*28*/  {500290},                                                                             ||| refplain
  /*29*/  {51C610},                                                                             ||| refplain
  /*30*/  {482D20},                                                                             ||| refplain
  /*31*/  {61C420},                                                                             ||| refplain
  /*32*/  {60BAC0},                                                                             ||| refplain
  /*33*/  {48A2B0},                                                                             ||| refplain
  /*34*/  {5108C0},                                                                             ||| refplain
  /*35*/  {510900},                                                                             ||| refplain
  }
  .pop pre

- {827FE8 char numBinSectionLoadFunctionsInMagicMapBucket[64]}                                  ||| field
  Written to, but never read. Functions seem to just check if
  {{struct BinSectionMagicMapEntry}.{structBinSectionMagicMapEntry+0}}                          ||| code,refto,refto
  is 0 instead of counting entries.

- {828050 {struct BinSectionMagicMapEntry} *binSectionMagicMap[64]}                             ||| field,refto

- {82DBA0 {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntryB3300000}              ||| field,refto

- {82DBB0 {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntry80135000}              ||| field,refto

- {830AF8 {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntry80135100}              ||| field,refto

- {830B08 {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntryB0300100}              ||| field,refto

- {835784 {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntry135200}                ||| field,refto

- {835840 {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntry80134000}              ||| field,refto

- {8358D0 {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntryB3320000}              ||| field,refto

- {8641F4 int binSection80034A10loaded}                                                         ||| field
  Ensures this section only gets loaded once.

- {8653A0 {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntry39101}                 ||| field,refto

- {865470 {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntry39102}                 ||| field,refto

- {86596C {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntry39100}                 ||| field,refto

- {86B4AC {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntry34027}                 ||| field,refto

- {86B580 {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntry34026}                 ||| field,refto

- {88A2AC {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntry80034130}              ||| field,refto

- {88E9B4 {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntry80034100}              ||| field,refto

- {88E9CC {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntry80034147}              ||| field,refto

- {88E9DC {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntry34113}                 ||| field,refto

- {88E9EC {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntry3412F}                 ||| field,refto

- {88EA74 {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntry34112}                 ||| field,refto

- {88EA94 {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntry34107}                 ||| field,refto

- {88EAA4 {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntry34108}                 ||| field,refto

- {88EAB4 {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntry34110}                 ||| field,refto

- {88EAC4 {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntry34146}                 ||| field,refto

- {88F27C {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntry34111}                 ||| field,refto

- {88F750 {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntry34201}                 ||| field,refto
.pop symbols

.pop section
.push section

{Language} ||| h id=language

There seems to be no way to change the language, except for changing the value
in the registry? See {registry}. Perhaps it is only set                                 ||| href
when the game is installed?

.push section

{Language metadata}  ||| h id=language_metadata

Thanks to code where it reads the Registry, I found following data:

.push pre
{struct LanguageData} \{                                                                ||| mkref
	char *pName;
	int {val1}; //??                                                                ||| mkref name=structLanguageData+4
	int region;
};

{struct LanguageData} {7FCA08}[] = \{                                                   ||| refto,refplain
        { "English US",            0,        0 },
        { "English UK",            0,        5 },
        { "French",                1,        6 },
        { "German",                2,        7 },
        { "Italian",               3,        8 },
        { "Spanish",               4,        9 },
        { "Swedish",               6,        5 },
        { "Danish",                7,        5 },
        { "Dutch",                 5,        5 },
        { "Korean",                8,        2 },
        { "Chinese (Traditional)", 9,        4 },
        { "English China",         9,        11 },
        { "Japanese",              10,       3 },
        { "Thai",                  11,       12 },
        { 0,                       0,        0 },
};
.pop pre

The value stored in the registry for {Language} is checked against                      ||| code
all language strings in the above data. The matching language's
{structLanguageData+4} gets stored in {7FCA00}, or 0 when the                           ||| refto,ref
name stored in the registry didn't match any names.

After chasing usages of a region related proc,
I found more language data which is being used in {4FF680}.                             ||| ref
They seem to fit into three more structs.

.push pre
/*from hashes, prefixed with HASH_*/
#define HASH_CONDUITMDITC_TT21I 0x5B9D88B9
#define HASH_font_impact36 0x0920075C
#define HASH_CONDUITMDITC_TT14I 0x5B9D84DB
#define HASH_FONT_CONDUITMDITCTT38BI 0x9583AA1A
#define HASH_arial 0xA87927BE
#define HASH_arial12 0xAB6215C1
#define HASH_lcd_let48 0xBBBA71C2
#define HASH_conduitmditc_tt14i_korean 0xDCA5485A
#define HASH_conduitmditc_tt21i_korean 0x833A8678
#define HASH_conduitmditc_tt14i_chinese 0xF88A75F9
#define HASH_conduitmditc_tt21i_chinese 0x71C777D7
#define HASH_conduitmditc_tt14i_japanese 0x743BF1C1
#define HASH_conduitmditc_tt21i_japanese 0x15192F5F
#define HASH_conduitmditc_tt14i_thailand 0xA73823FF
#define HASH_conduitmditc_tt21i_thailand 0x4815619D

{struct LanguageStruct7F6DE8} \{                                                                ||| mkref
	int {fonthash};                                                                         ||| mkref name=LanguageStruct7F6DE8+0
	int {field_1};                                                                          ||| mkref name=LanguageStruct7F6DE8+4
};

{struct LanguageStruct7F6DE8} {7F6DE8}[] = \{                                                   ||| refto,ref
        { HASH_CONDUITMDITC_TT21I,          0x0 },
        { HASH_font_impact36,               0x40000 },
        { HASH_CONDUITMDITC_TT14I,          0x10000 },
        { HASH_FONT_CONDUITMDITCTT38BI,     0x100000 },
        { HASH_arial,                       0x10000 },
        { HASH_arial12,                     0x10000 },
        { HASH_lcd_let48,                   0x4000 },
        { HASH_conduitmditc_tt14i_korean,   0x40000 },
        { HASH_conduitmditc_tt21i_korean,   0x80000 },
        { HASH_conduitmditc_tt14i_chinese,  0x40000 },
        { HASH_conduitmditc_tt21i_chinese,  0x80000 },
        { HASH_conduitmditc_tt14i_japanese, 0x40000 },
        { HASH_conduitmditc_tt21i_japanese, 0x80000 },
        { HASH_conduitmditc_tt14i_thailand, 0x40000 },
        { HASH_conduitmditc_tt21i_thailand, 0x80000 },
};

{struct LanguageStruct7F6E60} \{                                                                ||| mkref
	int {data}[28];                                                                         ||| mkref name=structLanguageStruct7F6E60+0
};

{struct LanguageFileData} \{                                                                    ||| mkref
	int id;
	char *filecode;
	char *binfile;
	{struct LanguageStruct7F6E60} *{pStruct7F6E60};                                         ||| refto,mkref name=structLanguageFileData+C
};

{7F6E60}[0][0] = HASH_CONDUITMDITC_TT21I;                                                       ||| refplain
{7F6E60}[0][1] = HASH_arial;                                                                    ||| refplain
{7F6E60}[0][2] = HASH_CONDUITMDITC_TT14I;                                                       ||| refplain
{7F6E60}[0][3] = HASH_lcd_let48;                                                                ||| refplain
{7F6E60}[0][8] = HASH_FONT_CONDUITMDITCTT38BI;                                                  ||| refplain
{7F6E60}[0][16] = HASH_arial12;                                                                 ||| refplain
{7F6E60}[0][17] = HASH_font_impact36;                                                           ||| refplain
{7F6E60}[1][0] = HASH_conduitmditc_tt21i_korean;                                                ||| refplain
{7F6E60}[1][1] = HASH_arial;                                                                    ||| refplain
{7F6E60}[1][2] = HASH_conduitmditc_tt14i_korean;                                                ||| refplain
{7F6E60}[1][3] = HASH_lcd_let48;                                                                ||| refplain
{7F6E60}[1][16] = HASH_arial12;                                                                 ||| refplain
{7F6E60}[1][17] = HASH_font_impact36;                                                           ||| refplain
{7F6E60}[2][0] = HASH_conduitmditc_tt21i_japanese;                                              ||| refplain
{7F6E60}[2][1] = HASH_arial;                                                                    ||| refplain
{7F6E60}[2][2] = HASH_conduitmditc_tt14i_japanese;                                              ||| refplain
{7F6E60}[2][3] = HASH_lcd_let48;                                                                ||| refplain
{7F6E60}[2][8] = HASH_FONT_CONDUITMDITCTT38BI;                                                  ||| refplain
{7F6E60}[2][16] = HASH_arial12;                                                                 ||| refplain
{7F6E60}[2][17] = HASH_font_impact36;                                                           ||| refplain
{7F6E60}[3][0] = HASH_conduitmditc_tt21i_chinese;                                               ||| refplain
{7F6E60}[3][1] = HASH_arial;                                                                    ||| refplain
{7F6E60}[3][2] = HASH_conduitmditc_tt14i_chinese;                                               ||| refplain
{7F6E60}[3][3] = HASH_lcd_let48;                                                                ||| refplain
{7F6E60}[3][16] = HASH_arial12;                                                                 ||| refplain
{7F6E60}[3][17] = HASH_font_impact36;                                                           ||| refplain

{struct LanguageFileData} {7F7020}[] = \{                                                       ||| refto,refplain
	\{  0, "ENGLISH", "LANGUAGES\\ENGLISH.BIN", {7F6E60} + 0 \},                            ||| refplain
	\{  1, "FRENCH", "LANGUAGES\\FRENCH.BIN", {7F6E60} + 0 \},                              ||| refplain
	\{  2, "GERMAN", "LANGUAGES\\GERMAN.BIN", {7F6E60} + 0 \},                              ||| refplain
	\{  3, "ITALIAN", "LANGUAGES\\ITALIAN.BIN", {7F6E60} + 0 \},                            ||| refplain
	\{  4, "SPANISH", "LANGUAGES\\SPANISH.BIN", {7F6E60} + 0 \},                            ||| refplain
	\{  5, "DUTCH", "LANGUAGES\\DUTCH.BIN", {7F6E60} + 0 \},                                ||| refplain
	\{  6, "SWEDISH", "LANGUAGES\\SWEDISH.BIN", {7F6E60} + 0 \},                            ||| refplain
	\{  7, "DANISH", "LANGUAGES\\DANISH.BIN", {7F6E60} + 0 \},                              ||| refplain
	\{  8, "KOREAN", "LANGUAGES\\KOREAN.BIN", {7F6E60} + 1 \},                              ||| refplain
	\{  9, "CHINESE", "LANGUAGES\\CHINESE.BIN", {7F6E60} + 3 \},                            ||| refplain
	\{ 10, "JAPANESE", "LANGUAGES\\JAPANESE.BIN", {7F6E60} + 2 \},                          ||| refplain
	/*there is no Thai entry here?*/
};
.pop pre

In {4FF680}, {7F7020} is searched. If {570A30} is 2, the entry with id 8 is searched,           ||| ref,ref,ref
otherwise id 0 is searched.
When it's not found the game will segfault because of the code below:

.push ida
{.text:004FF6A2}                 jl      short loc_4FF693                                       ||| text
{.text:004FF6A4} loc_4FF6A4:                                                                    ||| text
{.text:004FF6A4}                 xor     edx, edx                                               ||| text
{.text:004FF6A6} loc_4FF6A6:                                                                    ||| text
{.text:004FF6A6}                 mov     ecx, [edx+{0Ch}]                                       ||| text,num
.pop ida

Then {{struct LanguageFileData}.{structLanguageFileData+C}} is read.                            ||| code,refto,refto
Its {{structLanguageStruct7F6E60+0}[0]} value is read and then a                                ||| code,refto
matching entry in {7F6DE8} is searched.                                                         ||| ref
More stuff is read is a loop and reset and I lost track.
Eventually something is called with string {LanguageMemoryPool}.                                ||| code

{7983D0 aLanguageselect db 'LanguageSelectScreen',0 TODO}                                       ||| strong

.push symbols
- {4FF680 void LoadLanguageSomething()}                                                         ||| func
  TODO

- {512520 LoadLanguageAtBoot?}                                                                  ||| func
  TODO

- {7F6DE8 {struct LanguageStruct7F6DE8} struct7F6DE8[15]}                                       ||| field,refto

- {7F6E60 {struct LanguageStruct7F6E60} struct7F6E60[4]}                                        ||| field,refto

- {7FCA00 int languageIndex}                                                                    ||| field

- {7FCA08 {struct LanguageData} languageData[15]}                                               ||| field,refto

- {7F7020 {struct LanguageFileData} languageFileData[11]}                                       ||| field,refto
.pop symbols

.pop section
.push section

{Language files}       ||| h id=language_files

The language strings are in a bin section with magic {0x39000}, and is structured like this:    ||| code

.push pre
{struct BinDataLanguage39000} header;                                                           ||| refto
char unknown[header.{structBinDataLanguage39000+8} - sizeof(header)];                           ||| refto
{struct LanguageTableEntry} tableEntries[header.{structBinDataLanguage39000+4}];                ||| refto,refto
char *strings; /*all zero-terminated strings after each other*/
.pop pre

The {tableEntries} are sorted (low hash to high hash),                                          ||| code
required because a binary search is used at lookup.

.push ida
{.text:00497766}                 push    {04B5DE3E9h} {; hash (SMS_SUBJECT_HEADER)}             ||| text,num,comment
{.text:0049776B}                 lea     eax, [esp+{104h}+{buffer}]                             ||| text,num,str
{.text:00497772}                 push    {80h}             ; {destlen}                          ||| text,num,comment
{.text:00497777}                 push    eax             ; {dest}                               ||| text,comment
{.text:00497778}                 call    {4FFA50}                                               ||| text,refplain
.pop ida

Loading is done in {5125B0}.                                                                    ||| ref
See {language_english.txt} for all {LANGUAGES/English.bin} strings by their hash.               ||| a href=language_english.txt,code
(This was generated by an early version of {nfsu2-re-binfiles/main.c})                          ||| hookfileref

The hashes seem to be made with the case insensitive hash function {43DB50}.                    ||| ref
The original labels are also stored as a language file in {LANGUAGES/Labels.bin}                ||| code

.push pre
{struct BinDataLanguage39000} \{                                                                ||| mkref
        int {field_0};                                                                          ||| mkref name=structBinDataLanguage39000+0
        int {numStrings};                                                                       ||| mkref name=structBinDataLanguage39000+4
        int {tableOffset};                                                                      ||| mkref name=structBinDataLanguage39000+8
        int {stringsOffset};                                                                    ||| mkref name=structBinDataLanguage39000+C
};

{struct LanguageTableEntry} \{                                                                  ||| mkref
	unsigned int {hash};                                                                    ||| mkref name=structLanguageTableEntry+0
	char *{string};                                                                         ||| mkref name=structLanguageTableEntry+4
};

{struct LoadedLanguage} \{                                                                      ||| mkref
        int {numStrings};                                                                       ||| mkref name=structLoadedLanguage+0
        char **{ptrStrings};                                                                    ||| mkref name=structLoadedLanguage+4
        {struct LanguageTableEntry} *{ptrTable};                                                ||| refto,mkref name=structLoadedLanguage+8
        int {field_C}; /*TODO*/                                                                 ||| mkref name=structLoadedLanguage+C
};
.pop pre

TODO: language files also contain bin sections with magic {0x30201}                             ||| code

.push symbols
- {4FF9D0 char* GetLanguageStringOrNull(unsigned int hash)}                                     ||| func
  Returns a string ptr or {NULL} for given hash (which is passed through {edx}).                ||| code,code
  Does a binary search over the hashes in {{8383D0}.{structLoadedLanguage+8}}                   ||| code,ref,refto

- {4FFA50 void GetLanguageStringIntoBuf(char *dst, int dstlen, unsigned int hash)}              ||| func
  Same as {4FFA80} but copy it into a buffer.                                                   ||| ref

- {4FFA80 char* GetLanguageString(unsigned int hash)}                                           ||| func
  Calls {4FF9D0} and when it returns {NULL}, call it again but with                             ||| ref,code
  {0xC01A6F63} as fallback (which results in {FENG: Default string error.})                     ||| code,code

- {4FFAA0 char* GetNumberSuffix(int number)}                                                    ||| func
  Returns, based on passed index, one of: {th, st, nd, rd, th, th, th, th, th, th th},          ||| code
  uses default string as fallback.
  TODO: xref this for fun and profit (only 2 usages?)

- {4FFAE0 int UnloadLanguageBinSection39000({struct BinSection} *section);}                     ||| func,refto
  .push pre
  if (section->{structBinSection+0}.{structBinSectionHeader+0} == 0x39000) \{                     ||| refto,refto
          {8383D0}.{structLoadedLanguage+C} = 0;                                                  ||| refplain,refto
          {8383D0}.{structLoadedLanguage+0} = 0;                                                  ||| refplain,refto
          {8383D0}.{structLoadedLanguage+4} = 0;                                                  ||| refplain,refto
          {8383D0}.{structLoadedLanguage+8} = 0;                                                  ||| refplain,refto
  }
  .pop pre

- {5125B0 int LoadLanguageBinSection39000({struct BinSection} *section)}                        ||| func,refto
  .push pre
  {struct BinDataLanguage39000} *data;                                                            ||| refto
  {struct LanguageTableEntry} *tableEntry;                                                        ||| refto
  int i;

  if (section->{structBinSection+0}.{structBinSectionHeader+0} == 0x39000) \{                                  ||| refto,refto
          data = (void*) section->{structBinSection+8};                                                        ||| refto
          {8383D0}.{structLoadedLanguage+C} = data->{structBinDataLanguage39000+0};                            ||| refplain,refto,refto
          {8383D0}.{structLoadedLanguage+0} = data->{structBinDataLanguage39000+4};                            ||| refplain,refto,refto
          {8383D0}.{structLoadedLanguage+4} = (void*) (data + (int) data->{structBinDataLanguage39000+C});     ||| refplain,refto,refto
          {8383D0}.{structLoadedLanguage+8} = (void*) (data + (int) data->{structBinDataLanguage39000+8});     ||| refplain,refto,refto
          tableEntry = {8383D0}.{structLoadedLanguage+8};                                                      ||| refplain,refto
          for (i = 0; i < {8383D0}.{structLoadedLanguage+0}; i++) \{                                           ||| refplain,refto
                  tableEntry->{structLanguageTableEntry+4} += {8383D0}.{structLoadedLanguage+8};               ||| refto,refplain,refto
                  tableEntry++;
          }
  }
  .pop pre

- {52CD00 int LoadLanguageFontBinSection30201(struct BinData *bindata)}                         ||| func
  Something with font.

- {537290 int UnloadLanguageFontBinSection30201(struct BinData *bindata)}                       ||| func
  Something with font.

- {8383D0 {struct LoadedLanguage} loadedLanguage}                                               ||| field,refto
.pop symbols

.pop section
.pop section
.push section

{Pools}  ||| h id=pools

I hooked {440B40} and collected some output: {createpoollog.txt}                                ||| ref,a href=createpoollog.txt
This will probably help a lot when trying to figure out other things.
Note that the first time the {AUD: NFS3DMixCtl Pool} is made, it has an element amount of zero. ||| code
The dump is from just starting the game and starting a circuit race.

.push pre
struct PoolHeader {
	int field_0; // ptr
	int field_4;
	struct PoolHeader *nextLinkedPool;
	char* pName;
	int field_10;
	int field_14;
	int allocatedElements;
	int maxAllocatedElements?;
	int field_20;
	int elementAmount;
	int elementSize;
	int elementAmountOverAllLinkedPools;
	// here comes pool data
};

struct bFileSystemPoolEntry {

};
EXPECT_SIZE(struct bFileSystemPoolEntry, 0xF0);
.pop pre

.push symbols
- {440B40 ??CreatePoolReally(int maybeElementSize, int maybeElementAmount,                      ||| func
  char *name, int unknown)}
  TODO

- {440DF0 ??CreatePool(int maybeElementSize, int maybeElementAmount,                            ||| func
  char *name, int unknown)}
  TODO, does something after calling {440B40}                                                   ||| ref

- {440D40 int __thiscall PoolGetNextFreeItem_(void *this)}                                      ||| func
  TODO

- {440E50 int PoolGetNextFreeItem?stdcallwrapper(void *pool)}                                   ||| func
  Same as the one above, but wrapped in an stdcall.

- {440BB0 int __thiscall PoolExtend(struct Pool *this, int maybeElementAmount)}                 ||| func
  TODO, basically allocates another pool (with bigger size? TODO) and link it to this

- {865104 p_bFileSystemPool}                                                                    ||| field
.pop symbols

.pop section
.push section

{Speedy boot}  ||| h id=speedyboot

{I want a fast startup because I'm booting the game so many times               ||| em
(not to mention the numerious crashes)}

During startup, with the debug string output enabled, there are a few entries
showing loading and unloading states, such as {LS_THXMovie.fng}.                        ||| code
I already sped up boot by replacing the {MOVIES/THX_logo.vp6} with                      ||| code
{MOVIES/blank.vp6}. While that skips the unskippable intro logos,                       ||| code
it still takes some time because it switches to a state where it tries loading
and it takes slightly under a second to switch to the next state.

So by following the debug prints, I found following section:

.push ida
{.data:007F65E8} off_7F65E8  dd offset {aDiscerrorpc_fn}                                        ||| comment,ident
{.data:007F65EC}             dd offset byte_783FE5                                              ||| comment
{.data:007F65F0}             dd offset {aMc_bootup_fng} {; "MC_Bootup.fng"}                     ||| comment,ident,comment
{.data:007F65F4}             dd offset byte_783FE5                                              ||| comment
{.data:007F65F8}             dd offset byte_783FE5                                              ||| comment
{.data:007F65FC}             dd offset {aLs_blankmovie_} {; "LS_BlankMovie.fng"}                ||| comment,ident,comment
{.data:007F6600}             dd offset {aLs_ealogo_fng} {; "LS_EAlogo.fng"}                     ||| comment,ident,comment
{.data:007F6604}             dd offset byte_783FE5                                              ||| comment
{.data:007F6608}             dd offset {aLs_thxmovie_fn} {; "LS_THXMovie.fng"}                  ||| comment,ident,comment
{.data:007F660C}             dd offset {aLs_psamovie_fn} {; "LS_PSAMovie.fng"}                  ||| comment,ident,comment
{.data:007F6610}             dd offset {aUg_ls_introfmv} {; "UG_LS_IntroFMV.fng"}               ||| comment,ident,comment
{.data:007F6614}             dd offset {aUg_ls_splash_f} {; "UG_LS_Splash.fng"}                 ||| comment,ident,comment
{.data:007F6618}             dd offset {aMc_background_} {; "MC_Background.fng"}                ||| comment,ident,comment
{.data:007F661C}             dd offset {aUi_main_fng}  {; "UI_Main.fng"}                        ||| comment,ident,comment
.pop ida

This very much looks like the boot states the game goes through.
{byte_783FE5} is basically an empty string, so maybe there used to                        ||| code
be more states, or some are for different game versions?


Putting all of them to a reference to an empty string makes the boot pretty speedy
but then it doesn't do much. After initial boot, there's a black screen for a
short moment, then the basic loading progressbar screen with the cars and Rachel
shows, then it goes to a black screen and you can move the cursor. So the game is
running but nothing of UI is running so you can't do much.


Only leaving {UG_LS_Splash.fng} shows the splash screen with Rachel and                   ||| code
the cars, the famous music starts playing and when the beat drops the EA TRAX message
shows and "Press enter" shows. When pressing enter, we're back to the black screen
with a moveable cursor.


Only leaving {MC_BACKGROUND.fng} shows the splash screen with Rachel and                  ||| code
the cars and the prompt if I want to create a new profile. When pressing 'no', we're
back to the black screen. When pressing 'yes' I get to enter a name but when it then
asks to save the profile, it says 'Unable to save profile' so I have to choose 'no'.
Then black screen again.


Only leaving {UI_MAIN.fng} directly jumps to the main menu where you see                  ||| code
Rachel's car after a short moment after the loading screen showed. It didn't ask
for a profile to load and when I try to load a profile it says that no profiles
were found. Scary. I can create a new profile but it says 'Unable to save'. There
is no music in the menu. Music does start when starting a race but going back to
the menus stops the music again. Going to EA TRAX in the option does suddenly
start the music in the menus.


When only leaving {LS_EALogo.fng}, the ea logo movie sound starts to play                 ||| code
while the 'loading' screen is still showing, then there's one frame of the logo movie
when it's about halfway the sound of the movie and then it goes to black screen with
cursor. Leaving {LS_BlankMovie.fng} in as well fixes that problem.                        ||| code


Leaving just {MC_Bootup.fng} doesn't seem to change much, not even timing                 ||| code
wise. It does sound important, so I tried this in combination with
{UI_MAIN.fng}. It jumps into the main menu, but when I go to the profile                  ||| code
manager now, I can load my profiles. Nice. The main menu music still doesn't load
without going to EA TRAX, but I'm okay with that. One weird thing is that the Q button
doesn't show the 'quit game' dialog. After searching a bit, it seems like
{LS_PSAMovie.fng} is the one that makes the Q to quit keybind happen. That's              ||| code
quite interesting, definitely something to research when/if I get more into the workings
of the UI.


So my final setup is to only leave in {MC_Bootup} (because it makes profiles              ||| code
work), {LS_PSAMovie} (because I like the Q button and it can be a good dialog             ||| code
test, it means I still need to skip the PSA movie but I can handle that),
{MC_Background} (so I can load a profile at start) and                                    ||| code
{UI_Main} (obviously). Code can be found in the {speedyboot} function.                    ||| code, code

.push pre
static int zero = 0;
static
void speedyboot()
{
	*(int**) (0x7F65E8) = &zero; /*discerrorpc*/
	*(int**) (0x7F65EC) = &zero; /*??nothing*/
	//*(int**) (0x7F65F0) = &zero; /*mc_bootup*/
	*(int**) (0x7F65F4) = &zero; /*??nothing*/
	*(int**) (0x7F65F8) = &zero; /*??nothing*/
	*(int**) (0x7F65FC) = &zero; /*blankmovie*/
	*(int**) (0x7F6600) = &zero; /*ealogo*/
	*(int**) (0x7F6604) = &zero; /*??nothing*/
	*(int**) (0x7F6608) = &zero; /*thxmovie*/
	//*(int**) (0x7F660C) = &zero; /*psamovie*/
	*(int**) (0x7F6610) = &zero; /*introfmv*/
	*(int**) (0x7F6614) = &zero; /*splash*/
	//*(int**) (0x7F6618) = &zero; /*mc_background*/
	//*(int**) (0x7F661C) = &zero; /*ui_main*/
}
.pop pre

.pop section
.push section

{Console leftovers}  ||| h id=consoleleftover

{Note: console as in somewhere you type in, not a videogame console}            ||| em

In the hooks project, I "enabled" this console in the functions {initConsolePOC}                ||| code
in the file {nfsu2-re-hooks/faux-enable-console.c}.                                             ||| hookfileref
As it doesn't seem to be used anywhere, the only effect you can see is that whatever you
type is written into the {console_real_text} buffer (use CheatEngine or something               ||| code
you like to inspect it).

.push section

{ConsoleConsumeKey} ||| h id=console_consume_key

When looking at the {5CCD60} (which is not to hard too find because it's                        ||| ref
passed in a struct to {RegisterClassExA}), I saw a call to a function that                      ||| code
is called on every {WM_CHAR} event. The function does nothing when the value                    ||| code
in {8709BC} is zero, and there are no write references to it, so it seems                       ||| ref
like it will always be zero.

First it seems like the input is dropped if it's a {CR} (carriage return) and                   ||| code
when the value at {8709C4} is non-zero. Again, this is always zero so CR's                      ||| ref
are never dropped.

Then it has four different handlers. The first one handles a backspace character, second
one does escape, third one does tab and CR, and the last one does everything else. Basically
one character is deleted when pressing backspace and one character is added in all other
cases. I named following variables:

.push ul
- {8709B8}                                                                                      ||| ref
- {8709C0}                                                                                      ||| ref
- {8709B0}                                                                                      ||| ref
- {8709B4}                                                                                      ||| ref
- {8709BC}                                                                                      ||| ref
.pop ul

Basically, on backspace it checks if {8709B8} is bigger than zero,                              ||| ref
copies everything in {8709B0} starting from {8709B8} to a                                       ||| ref,ref
zero byte into a newly allocated buffer, decrements {8709B8} and {8709B4},                      ||| ref,ref
and copies everything from the allocated buffer back into {8709B0} at position {8709B8}.        ||| ref,ref

When inserting, it checks if {8709B4} is less than {8709C0},                                    ||| ref,ref
copies everything in {8709B0} starting from {8709B8} to a zero byte into                        ||| ref,ref
a newly allocated buffer, inserts the character in {8709B0} at position {8709B8},               ||| ref,ref
increments {8709B8} and {8709B4} by one,                                                        ||| ref,ref
and copies everything from the allocated buffer back into {8709B0} at position {8709B8}.        ||| ref,ref

.push ul
- Backspace: delete character before caret
- Escape: insert zero byte
- Tab and CR: insert LF
- Other: insert char if it's {a-z} or {A-Z} or {0-9} or,                                        ||| code,code,code
  if {80057E} is zero, {_} or {@} or {.} or                                                     ||| ref,code,code,code
  {-}. If none of these pass, do a check for more keys as described below}                      ||| code
.pop ul

.push section

{A hardcoded key check}      ||| h id=console_consume_key_check

At the end of looking if a character is valid, when it hasn't passed any of the criteria
above, it checks one last function if {8709C7} is {1}. The function                             ||| ref,code
seems to check if the key is one of 55 configured values and if so, the char is accepted.

.pop section
.pop section
.push section

{ConsoleMoveCaret} ||| h id=console_move_caret

This function is also called from {5CCD60}, this time when a                                    ||| ref
{WM_KEYDOWN} message is received. One parameter is passed based on the keycode                  ||| code
of the event:

.push ul
- {VK_LEFT}: {-1}                                                                               ||| code,code
- {VK_RIGHT}: {1}                                                                               ||| code,code
- {VK_HOME}: {-{8709C0}}                                                                        ||| code,code,refplain
- {VK_END}: {{8709C0}}                                                                          ||| code,code,refplain
.pop ul

This is the only other function that checks if {8709BC} is non-zero.                            ||| ref

.pop section

I need text here or my parser breaks.

.push symbols
- {5BF260 int ConsoleIsArgOneOfTheseHardcodedValues(char c)}                                    ||| func
  .push pre
  unsigned char values[55] = {
          ' ', '.', ',', '_', '@', '-', '`', '=', '[', ']', '\\',
          ';', '\'', '/', '<', '>', '?', ':', '"', '{', '}', '|',
          '+', '(', ')', '*', '&', '%', '#', '!', '~', 0xE5, 0xE4,
          0xE0, 0xE2, 0xEB, 0xE8, 0xE9, 0xEA, 0xEF, 0xEE, 0xF6,
          0xF4, 0xFC, 0xF9, 0xFB, 0xE7, 0x9C, 0xF2, 0xEC, 0xC5,
          0xC4, 0xD6, 0xDC, 0xA7
  };
  int i;

  for (i = 0; i < 55; i++) {
          if (values[i] == value) {
                  return 1;
          }
  }
  return 0;
  .pop pre
- {5BF3A0 void ConsoleMoveCaret(int relativePosition)}                                          ||| func

- {80057E char consoleDisallowSpecialChars}                                                     ||| field
  Never written to?

- {80057D char consoleLastCharTyped?}                                                           ||| field
  Never read from?

- {8709B0 char *consoleTextString}                                                              ||| field

- {8709B4 int consoleTextStringLength}                                                          ||| field

- {8709B8 int consoleTextCaretPosition}                                                         ||| field

- {8709BC int consoleEnabledFlag}                                                               ||| field

- {8709C0 int consoleTextStringMaxLength}                                                       ||| field

- {8709C4 int consoleIgnoreNextCR}                                                              ||| field

- {8709C5 char ??DebugUnusedLastKeyPressed}                                                     ||| field

- {8709C7 char consoleFilterSpecialChars}                                                       ||| field
.pop symbols

.pop section
.push section

{Hash functions}  ||| h id=hashfuncs

While scrolling and looking at references to some strings, I found some parts that look like
following excerpt:

.push ida
{.text:005121AE}     push    offset {aGenericdialo_2} {; "GenericDialog_Animate_SMALL.fng"}     ||| text,ident,comment
{.text:005121B3}     call    {sub_505450}                                                       ||| text,hi
{.text:005121B8}     add     esp, {4}                                                           ||| text,num
{.text:005121BB}     cmp     esi, eax                                                           ||| text
{.text:005121BD}     jz      short loc_512218                                                   ||| text
{.text:005121BF}     push    offset {aGenericdialog_} {; "GenericDialog_SMALL.fng"}             ||| text,ident,comment
{.text:005121C4}     call    {sub_505450}                                                       ||| text,hi
{.text:005121C9}     add     esp, {4}                                                           ||| text,num
{.text:005121CC}     cmp     esi, eax                                                           ||| text
{.text:005121CE}     jz      short loc_512218                                                   ||| text
{.text:005121D0}     push    offset {aGenericdialo_3} {; "GenericDialog_Animate_MED.fng"}       ||| text,ident,comment
{.text:005121D5}     call    {sub_505450}                                                       ||| text,hi
{.text:005121DA}     add     esp, {4}                                                           ||| text,num
{.text:005121DD}     cmp     esi, eax                                                           ||| text
{.text:005121DF}     jz      short loc_512218                                                   ||| text
{.text:005121E1}     push    offset {aGenericdialo_4} {; "GenericDialog_MED.fng"}               ||| text,ident,comment
{.text:005121E6}     call    {sub_505450}                                                       ||| text,hi
{.text:005121EB}     add     esp, {4}                                                           ||| text,num
{.text:005121EE}     cmp     esi, eax                                                           ||| text
{.text:005121F0}     jz      short loc_512218                                                   ||| text
{.text:005121F2}     push    offset {aGenericdialo_5} {; "GenericDialog_Animate_LARGE.fng"}     ||| text,ident,comment
{.text:005121F7}     call    {sub_505450}                                                       ||| text,hi
{.text:005121FC}     add     esp, {4}                                                           ||| text,num
{.text:005121FF}     cmp     esi, eax                                                           ||| text
{.text:00512201}     jz      short loc_512218                                                   ||| text
{.text:00512203}     push    offset {aGenericdialo_0} {; "GenericDialog_LARGE.fng"}             ||| text,ident,comment
{.text:00512208}     call    {sub_505450}                                                       ||| text,hi
{.text:0051220D}     add     esp, {4}                                                           ||| text,num
{.text:00512210}     cmp     esi, eax                                                           ||| text
{.text:00512212}     jz      short loc_512218                                                   ||| text
.pop ida

The proc {505450} doesn't look very complicated; it has one argument and                        ||| ref
doesn't perform any calls. It dereferences the given argument and increment its position,
until a zero has been found. While it's doing that, {eax} is modified based on the read value.  ||| code
So I assumed it is some hashing function and hooked it to see what kind of things are passed
through it.

As it turns out, it gets called many, many times.

.push pre
{time        input                       result}        ||| strong
53.42743683 GenericDialog_SMALL.fng     6962C0CD
53.42753220 UI_PC_Help_Bar.fng          33AC1CB4
53.42756271 OL_ICON_GROUP               2BAC0CEE
53.42758179 UI_PC_Help_Bar.fng          33AC1CB4
53.42760086 Hide                        0016A259
53.42761993 UI_Main.fng                 C343126A
53.42766190 GarageMain.fng              4CDD8B14
53.42769241 GarageMain.fng              4CDD8B14
53.42771149 GarageMain.fng              4CDD8B14
53.42773056 GenericDialog.fng           F68A7675
53.42774963 UI_GenericParts_Browser.fng AF09F84F
53.42776871 GenericDialog.fng           F68A7675
53.42779160 GenericDialog_SMALL.fng     6962C0CD
53.42781067 UI_PC_Help_Bar.fng          33AC1CB4
53.42782974 UI_Main.fng                 C343126A
53.42784882 GarageMain.fng              4CDD8B14
53.42790222 UI_MagazineBack.fng         FA8CC482
53.42796707 GenericDialog_SMALL.fng     6962C0CD
53.42798615 UI_PC_Help_Bar.fng          33AC1CB4
53.42800522 UI_Main.fng                 C343126A
53.42802429 GarageMain.fng              4CDD8B14
53.42922211 GenericDialog_SMALL.fng     6962C0CD
53.42924881 UI_PC_Help_Bar.fng          33AC1CB4
53.42926788 UI_Main.fng                 C343126A
53.42928696 GarageMain.fng              4CDD8B14
.pop pre

The excerpt above is probably from one cycle in the update loop, and is repeated a lot.

Some time later I found a very similar looking proc: {43DB50}, so I copied                      ||| ref
the previous hook for this function. This one gets called many times seemingly at startup
and when car parts or maps get loaded.

When writing this I took a better look at the procedures and saw that the only difference
really is that the first one is case insensitive while the second one is case sensitive.
In the {505450} one, it checks for every character if it is in the range                        ||| ref
{'a'-'z'} and subtracts {0x20} if so, making the character uppercase                            ||| code,code
before updating the hash.

.push nop
TODO: a directive for filesize?
{} ||| filesize file=hashes.txt
.pop nop

See {hashes.txt} (< 1MB) for list of hashes, each line is formatted                          ||| a href=hashes.txt
as {hash\tinput\tresult\tproc\n}. This file is updated at random times. 8 minutes               ||| code
of playing gives about a 277MB file, all output was piped to {sort | uniq}.                     ||| code

How I collected these can be seen in the {nfsu2-re-hooks/hook-*-hash-*.c} files.                ||| code

.push symbols
- {43DB50 int SomeHashCS43DB50(char *str)}                                                      ||| func
  Case sensitive hash function.

- {505450 int SomeHashCI505450(char *str)}                                                      ||| func
  Case insensitive hash function.

- {50B990 int FormatWithSinglePlaceholderAndHashCS43DB50(char *src, void *param)}               ||| func
  Delegates hashing to {43DB50}.                                                                ||| ref

- {50B9C0 int FormatWithSinglePlaceholderAndHashCI(char *src, void *param)}                     ||| func
  Does its own hashing.

.pop symbols

.push section

{Messing with hash results}  ||| h id=hashmess

I had an impulse to try to return different results for certain hashes. For example, return
the result of {FIRETRUCK} when the input is {240SX}. The result is ..                           ||| code,code
difficult to describe. Here's some short points:

.push ul
- Browsing to the stock 240sx to customize shows an empty spot, no car
- Selecting the stock car to customize will suddenly swap to the firetruck model
- I can modify the firetruck, I can't select any bumpers but I can choose spoilers,
  although it does nothing
- Changing wheels/spinners/hydraulics does show
- Then going out of the customization menu crashes the game
  (this includes going to performance tuning)
.pop ul

{Hop hop skippity hop}                             ||| imgcaptioned src=FIRETRUCK.GIF alt="jumping firetruck"

.push ul
- Browsing a previously customized 240sx only shows the wheels of the car
- If the wheels were not customized, it shows black rectangles as wheels and the game
  crashes when I try to customize the wheels/spinners
- Selecting the customized car to customize doesn't change anything special, still only wheels
- Only the firetruck customization options can be selected
- Choosing a spoiler shows the spoiler in the center of the car
- When going out of a category (like Body parts),
  the car switches to the same car but the wheels at
  the position where they should be for the firetruck
- When going outside the customize menu now, the car's brand is a {*} symbol                    ||| code
- When going to a different car and back, the firetruck model shows
- Entering customization again hides the firetruck, only showing the wheels
  (the spoiler is gone?)
- After saving and undoing the swap and restarting the game, the saved car stays a firetruck
  (but the behavior is still the same as described above)
- Using the car to race makes the framerate go down significantly, except when in nose camera
  (you just see headlights driving without a vehicle body)
- It doesn't lag at all in the performance tuning
.pop ul

{Here's a dyno chart of the firetruck}                             ||| imgcaptioned src=FIRETRUCK-DYNO.JPG alt="dyno chart"

While the firetruck is unused in the game,
I also tried to do this with the taxi, but it gave the same results.
Then I tried to replace it with a "normal" car, the Mustang.

.push ul
- Browsing a stock 240sx only shows black rectangles for wheels
- When selecting the car, it gets replaced with a mustang, and now I'm customizing a mustang
- The only change I can see is that there are no headlights or taillights
- Going ingame now only shows the front bumper of the car, which is the thing I customized
- Going back to the menu now shows the car with stock headlights and taillights
- Going ingame again now shows the car fully as it should
- Selecting a customized 240sx now shows the doors of a mustang
.pop ul

{Car?}                             ||| imgcaptioned src=MUSTANG.JPG alt="driving invisible mustang"

The behavior isn't always the same, just give it a try and see for yourself.
Replacing the taxi with the ambulance just lags out the game whenever a taxi comes in sight.

Check the function {SomeHashCS43DB50Print} in the file                                          ||| code
{nfsu2-re-hooks/hook-43DB50-hash-cs.c} to see how I did this,                                   ||| hookfileref
the code to replace cars is in comments.

.pop section
.pop section
.push section

{Debug print}  ||| h id=debugprint

While scrolling through the data segment, I found these interesting strings:

.push ida
{.rdata:0079B160} {aDeletingPackag} db {'Deleting package [%s]'},{0Ah},{0}                      ||| comment,ident,str,num,num
{.rdata:0079B177}                 align {4}                                                     ||| comment,num
{.rdata:0079B178} {aUnActivateXX}   db {'Un-Activate!!! %x %x'},{0Ah},{0}                       ||| comment,ident,str,num,num
{.rdata:0079B18E}                 db {2} dup({0})                                               ||| comment, num, num
{.rdata:0079B190} {aWillBeUnloaded} db {'Will be unloaded [%s]'},{0Ah},{0}                      ||| comment,ident,str,num,num
.pop ida

Even more interesting is that these strings are using by pushing them on to the stack,
followed by a call to a specific proc that looks like this:

.push ida
{.text:0050D510} {sub_50D510  proc near}                                                        ||| text,ident
{.text:0050D510}                 xor     eax, eax                                               ||| text
{.text:0050D512}                 retn                                                           ||| text
{.text:0050D512} {sub_50D510  endp}                                                             ||| text,ident
.pop ida

It appears as if this used to be some kind of debug printf function, so I named it
{SomeDebugPrint}. I hooked the function and made it output to a log file,                       ||| code
see {nfsu2-re-hooks/replace-50D510-DebugPrint.c}.                                               ||| hookfileref

It also seems to pass data that is not a pointer to a string. I'm guessing since the
implementation of this function was removed (and now just returns zero), and there
were probably other removed functions, so some calls that are supposed to be done
to different functions may now all point to this one function that also happened to
be used for the debug print stuff. My simple solution is to check if the first passed
argument points to memory in the data section, and print if so.

I did a short session browsing customization options and performance tuning with this
enabled, the results can be seen in the log file
{debugstring50D510.txt}. Each line is formatted as                                              ||| a href=debugstring50D510.txt
{debugstr\t50D510\tcallee\tstring\n}. Here is a 'small' excerpt:                                ||| code

.push pre
DIALOG :: --------- ShowDialog -----------
DIALOG :: |_ Do you want to convert your trunk to carbon fiber?
DIALOG :: Oh shit - the control mask is zero.  This is bad.  Try to use Top Package's control mask.
DIALOG ::  |_ TopPackage = UI_GenericParts_Browser.fng, mask = 0.
DIALOG ::    |_ Crap - mask is zero, forcing to 0xff.
DIALOG :: Success : Control mask = 255, Handle = 2
DIALOG :: --------- ShowDialog Finished -----------
Init Package GenericDialog_SMALL.fng
DIALOG :: Constructor
Joy Event: FEPad_Accept[0]
Joy Event: FEPad_Accept[0]
Joy Event: FEPad_Back[1]
Joy Event: FEPad_Back[1]
DIALOG :: Tick, ReturnWithMessage Set, Dismissing: [GenericDialog_SMALL.fng] [b4623f67]
DIALOG :: DismissDialog.  Handle(2).  Current handle(2)
DIALOG ::  |_ Found, popping.
Queue popping GenericDialog_SMALL.fng
Will unload -----------GenericDialog_SMALL.fng------------------
Will be unloaded [GenericDialog_SMALL.fng]
DIALOG :: Closing, sending message (b4623f67) to (UI_GenericParts_Browser.fng).
Send message[b4623f67] to package [UI_GenericParts_Browser.fng]
Message was queued
Un-Activate!!! 37a52f0 37e69c0
Deleting package [GenericDialog_SMALL.fng]
package[GenericDialog_SMALL.fng] will unload
.pop pre

Most of the messages seem to be about dialogs, joy (keyboard) events,
FEng/fng packages (I'm guessing those are ui resources/designs?).

.pop section
.push section

{UI}  ||| h id=ui

Names with {.FNG} seem to be occuring a lot, it seems like that are UI                          ||| code
resources or some kind of UI widget descriptors.

In text strings, {^} is a line feed (but {\n} might work as well, TODO).                        ||| code,code

UI things seem to work on a {640x480} canvas.                                                   ||| code
Most things (especially when mouse is involved) seem to be positioned
{([-320,+320],[-240,+240])}.                                                                    ||| code

.push section

{Dialogs}  ||| h id=ui_dialog

Thanks to the {debugprint} discovery, my attention got grabbed                                  ||| href
by something that looked like dialog code. These leftover debug strings helped so much.

Someone left a trace here:

.push ida
{.text:005541FC}                 call    {Dialog__ctor??}                                       ||| text,ident
{.text:00554201}                 push    offset {aDialogConstruc} {; "DIALOG :: Constructor\n"} ||| text,ident,comment
{.text:00554206}                 call    {SomeDebugPrint}                                       ||| text,ident
.pop ida

One of the first thing {558020} does is calling {526C40},                                       ||| ref,ref
which looks like initializes the dialog maybe? One argument is passed, seemingly the
dialog name. But then it checks something at the passed dialog name {+324h}. Conclusion:        ||| code
it's passing a struct with dialog info, of which the first member is the name.

.push section

{GetFNGForDialog}  ||| h id=ui_dialog_getfngfordialog

This function is only used once, by the {558020} function. It checks                            ||| ref
the value at {+324h}, which seems to be a pointer to a string,                                  ||| code
looks like maybe a type of dialog?
It's checked if that value is either {NULL} or empty string or equal to                         ||| code
{animating} or {3button}. I decided to reimplement that function.                               ||| code,code
Fun fact: while doing this I managed to write an infinite loop which caused a BSOD.

At the end I decided upon the name {526C40}. It returns a pointer                               ||| ref
to a string that says what FNG to display for the dialog that was passed.

The dialog info may already have the FNG set, this function will return that unless
it's not set or it's not either {animating} or {3button}.                                       ||| code,code

.push ul
- {HelpDialog_SMALL.fng} when {{structDialogInfo+32D}} and text has less than 5 linebreaks      ||| code,code,refto
- {HelpDialog_MED.fng} when {{structDialogInfo+32D}} and text has more than 4 linebreaks        ||| code,code,refto
- {GenericDialog_ThreeButton.fng} when {{structDialogInfo+324}} is {3button}                    ||| code,code,refto,code
- {GenericDialog_SMALL.fng} when text width is {< 2561.0f}                                      ||| code,code
- {GenericDialog_Animate_SMALL.fng} same as above, but when type is {animating}                 ||| code,code
- {GenericDialog_MED.fng} when text width is {< 5122.0f}                                        ||| code,code
- {GenericDialog_Animate_MED.fng} same as above, but when type is {animating}                   ||| code,code
- {GenericDialog_LARGE.fng} if the other measurements didn't pass                               ||| code
- {GenericDialog_Animate_LARGE.fng} same as above, but when type is {animating}                 ||| code,code
.pop ul

See the {nfsu2-re-hooks/replace-526C40-GetFNGForDialog.c} function                              ||| hookfileref
for the complete reimplementation.

Here's me messing with the returned value:

{{HelpDialog_SMALL.fng}}            ||| imgcaptioned src=dialoghelp.jpg alt="dialog",code
{{GenericDialog_MED.fng}}           ||| imgcaptioned src=dialoggenericmed.jpg alt="dialog",code
{{GenericDialog_ThreeButton.fng}}   ||| imgcaptioned src=dialog3button.jpg alt="dialog",code
{{GenericDialog_Animate_SMALL.fng}} ||| imgcaptioned src=dialoganimate.gif alt="dialog",code

I can't remember seeing this animate style dialog... But when adding some debug prints,
it seems like the online/LAN play uses this: {dialog 'Retrieving updated games                  ||| code
list^from the server...' has type animating} but that dialog disappears so fast
I probably never noticed it.

Then I tried replacing it with something totally different,
{UI_GenericParts_Browser.fng}. I half expected the game to crash, so I was                      ||| code
surprised when it showed me this:

{:)}             ||| imgcaptioned src=dialoggenericpartsbrowser.jpg alt="main menu ui on splash screen"

Seems like this is a nice place to test loading other screens. Some do crash, but
here's {UI_OLEAMessenger.fng}:                                                                  ||| code

{No idea why that text is .. Spanish?}             ||| imgcaptioned src=dialogoleamessenger.jpg alt="online messenger menu with placeholder text"

Printing the dialog info struct address sadly showed that it wasn't stored in the
executable itself so it's probably somewhere deep in a bin file.

.pop section

{DialogInfo} struct made by looking at all of the above and more:                               ||| code
(Especially {4FF250} helped here.)                                                              ||| ref

.push pre
{struct DialogInfo} \{                                                                          ||| mkref
	char text[768];
	int unused300;
	int unused304;
	int unused308;
	int unused30C;
	int unused310;
	int unused314;
	int unused318;
	int unused31C;
	char *pParentFNG;
	char *{pMyFNG};                                                                         ||| mkref name=structDialogInfo+324
	int unused_328;
	char unused_32C;
	char {isHelpDialog};                                                                    ||| mkref name=structDialogInfo+32D
	char unused_32E;
	char something32F; /*set to 0 in 55806D*/
	int something330; /*set to 0 in 558074*/
	int unused334;
};
EXPECT_SIZE({struct DialogInfo}, 0x338);                                                        ||| refto
ASSERT_OFFSET({struct DialogInfo}, {structDialogInfo+324}, 0x324);                              ||| refto,refto
ASSERT_OFFSET({struct DialogInfo}, {structDialogInfo+32D}, 0x32D);                              ||| refto,refto
.pop pre

.push symbols
- {4FF250 void __thiscall Dialog__ctor({struct DialogInfo} *this)}                              ||| func,refto
  Initializes memory that was allocated to be a dialog.

- {526C40 int GetFNGforDialog({struct DialogInfo} *dialog)}                                     ||| func,refto
  Returns a pointer to a string that says what FNG to display for the dialog that was passed.
  See {ui_dialog_getfngfordialog}                                                               ||| href

- {540A60 void DismissDialog(int dialogIdToDismiss)}                                            ||| func

- {558020 int ShowDialog({struct DialogInfo} *info)}                                            ||| func,refto
  Returns the new dialog id for it (value in {838974}) or zero when                             ||| ref
  it didn't show because of some override.

- {7F6DE0 int nextDialogId}                                                                     ||| field
  When {558020} is called, value is put into {838974} and incremented.                          ||| ref,ref

- {838640 {struct DialogInfo} shownDialogData}                                                  ||| field,refto
  Dialog info passed to {558020} is copied into here, TODO xrefs                                ||| ref

- {838960 char* shownDialogParent}                                                              ||| field
  Example value: {UI_PerformanceTuning_Setting.fng}.                                            ||| code

- {838964 char* shownDialogType}                                                                ||| field
  Example value: {GenericDialog_MED.fng}.                                                       ||| code

- {838970 int dialogDismissedByOtherDialogMsg}                                                  ||| field
  Unsure yet.

- {838974 int shownDialogId}                                                                    ||| field
  Zero when none.
.pop symbols

.pop section
.push section

{FNG things}  ||| h id=fngthings

Thanks to {558020} code, following things were discovered:                                      ||| ref

.push pre
{struct FNGShowData} \{                                                                         ||| mkref
	char *fngname;
	int arg1;
	int fngdata_field8;
	int fngdata_fieldC;
	int arg2;
};
EXPECT_SIZE(struct FNGMessage, 0x14);

struct FNGInfo {
	int field_0;
	int field_4;
	int field_8;
	int field_C;
	int field_10;
	int field_14;
	int field_18;
	int controlMask;
};

typedef int ({fnginithandler})({struct FNGShowData} *msg);                                      ||| mkref,refto

{struct FNGData} \{                                                                             ||| mkref
	char *name;
	{fnginithandler} *initializeHandler;                                                    ||| refto
	int field_8;
	int field_C;
	int field_10;
	int field_14;
	int field_18;
};
EXPECT_SIZE(struct FNGData, 0x1C);

struct FNGData {7F7DC8}[] = \{                                                                  ||| refplain
{{collapsed data} ||| details,summary
.controlchars ^^
	{ "UI_Main.fng", 0x4ED6B0, 0x0D6DFCF20, 0x5, 0x0, 0x100, 0x0 }, // 0
	{ "UI_OptionsMain.fng", 0x4EFDE0, 0x9323DF57, 0x405, 0x0, 0x80, 0x0 }, // 1
	{ "UI_Options.fng", 0x4E3710, 0x2F735833, 0x401, 0x0, 0x1CA, 0x0 }, // 2
	{ "UI_Wheel_Options.fng", 0x4E3770, 0x18CDD1FC, 0x401, 0x0, 0x1CA, 0x0 }, // 3
	{ "UI_PC_Customize_Options.fng", 0x4E36B0, 0x0, 0x401, 0x0, 0x1CA, 0x0 }, // 4
	{ "UI_Options_PC_Controller.fng", 0x4F92E0, 0x0, 0x0C01, 0x0, 0x1CA,0 }, // 5
	{ "UI_PC_LAN_ServerSelect.fng", 0x4FD4B0, 0x0, 0x40000405, 0x0, 0x1CA, 0x0 }, // 6
	{ "UI_PC_LAN.fng", 0x4D6C90, 0x0, 0x405, 0x0, 0x1CA, 0x0 }, // 7
	{ "UI_PC_Help_Bar.fng", 0x552280, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 8
	{ "UI_Trailers.fng", 0x4CFB20, 0x0B5B3AB78, 0x401, 0x0, 0x80, 0x0 }, // 9
	{ "Credits.fng", 0x4B8720, 0x844FEB00, 0x401, 0x0, 0x80, 0x0 }, // 10
	{ "ScreenPrintf.fng", 0x0, 0x0, 0x0, 0x0, 0x100, 0x1 }, // 11
	{ "loading_boot.fng", 0x0, 0x0, 0x0, 0x0, 0x80, 0x2 }, // 12
	{ "UI_CareerCrib.fng", 0x4ED780, 0x8778F27, 0x405, 0x0,0C0, 0x0 }, // 13
	{ "UI_CribRewardOptionsMain.fng", 0x4ED7E0, 0x10965456, 0x405, 0x0, 0x0C0, 0x0 }, // 14
	{ "UI_CareerCarSelect.fng", 0x4FC110, 0x0FAB1B6BB, 0x405, 0x0, 0x0C0, 0x0 }, // 15
	{ "UI_StartCareer.fng", 0x4ED710, 0x0FBFCE084, 0x405, 0x0, 0x0C0, 0x0 }, // 16
	{ "UI_MagazineBack.fng", 0x554E60, 0x0, 0x0, 0x0, 0x0C0, 0x0 }, // 17
	{ "UI_MagazineReward.fng", 0x56B140, 0x0, 0x0, 0x0, 0x0C0, 0x0 }, // 18
	{ "UI_MagazineSelect.fng", 0x55B520, 0x82F20772, 0x405, 0x0, 0x0C0, 0x0 }, // 19
	{ "UI_MagazineView.fng", 0x554EC0, 0x0, 0x0, 0x0, 0x0C0, 0x0 }, // 20
	{ "UI_RewardsSponsor.fng", 0x4ED840, 0x0C91B17F1, 0x401, 0x0, 0x0C0, 0x0 }, // 21
	{ "UI_CareerWorldMap.fng", 0x4F9D30, 0x0C090500B, 0x8401,0, 0x80, 0x0 }, // 22
	{ "UI_Status_Master.fng", 0x4E1B80, 0x0, 0x18400, 0x0, 0x80,0 }, // 23
	{ "UI_Status_Career.fng", 0x4EEB10, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 24
	{ "UI_Status_Region.fng", 0x4B1C90, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 25
	{ "UI_Status_DVD.fng", 0x4B1D90, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 26
	{ "EA_Trax_Jukebox.fng", 0x554F20, 0x0D8F5EDF7, 0x401, 0x0, 0x80, 0x0 }, // 27
	{ "UI_Menu_Asset_Reputation.fng", 0x553B00, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 28
	{ "UI_CareerCarLot.fng", 0x4FC0B0, 0x0C3CABAFD, 0x405, 0x0, 0x0C0, 0x0 }, // 29
	{ "UI_EngageEventDialog.fng", 0x4CE650, 0x0, 0x0, 0x0, 0x0C0, 0x0 }, // 30
	{ "UI_EngageRaceDialog.fng", 0x4E34A0, 0x0, 0x0, 0x0, 0x0C0, 0x0 }, // 31
	{ "UI_EngageShopDialog.fng", 0x4CE6B0, 0x0, 0x0, 0x0, 0x0C0, 0x0 }, // 32
	{ "UI_Showcase_Preview.fng", 0x4E3500, 0x0, 0x0, 0x0, 0x0C0, 0x0 }, // 33
	{ "UI_Showcase_DPAD.fng", 0x4CF5C0, 0x0, 0x0, 0x0, 0x0C0, 0x0 }, // 34
	{ "IG_PlayMovie.fng", 0x554E00, 0x0, 0x0, 0x0, 0x0C0, 0x0 }, // 35
	{ "UI_Pause.fng", 0x4F4790, 0x0, 0x30404, 0x0, 0x0C0, 0x0 }, // 36
	{ "UI_PauseOptionsMain.fng", 0x4F47F0, 0x0, 0x30404, 0x0, 0x80,0 }, // 37
	{ "UI_PauseOptions.fng", 0x4EB650, 0x0, 0x10400, 0x0, 0x440, 0x0 }, // 38
	{ "UI_ReplayControl.fng", 0x4D7AD0, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 39
	{ "HUD_SingleRace.fng", 0x0, 0x0, 0x0, 0x0, 0x168, 0x1 }, // 40
	{ "HUD_Drift.fng", 0x0, 0x0, 0x0, 0x0, 0x80, 0x1 }, // 41
	{ "HUD_Drag.fng", 0x0, 0x0, 0x0, 0x0, 0x80, 0x1 }, // 42
	{ "UI_InGame_WorldMap.fng", 0x4F9C10, 0x0, 0x18400, 0x0, 0x80,0 }, // 43
	{ "UI_EngageMessageDialog.fng", 0x4B2240, 0x0, 0x18404, 0x0, 0x80,0 }, // 44
	{ "UI_SMS_Mailbox.fng", 0x4E2050, 0x0, 0x1A500, 0x0, 0x80,0 }, // 45
	{ "GarageMain.fng", 0x4EB130, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 46
	{ "DiscError.fng", 0x5522D0, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 47
	{ "GenericDialog.fng", 0x0, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 48
	{ "GenericDialog_LARGE.fng", 0x0, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 49
	{ "GenericDialog_MED.fng", 0x0, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 50
	{ "GenericDialog_SMALL.fng", 0x0, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 51
	{ "GenericDialog_Animate_LARGE.fng", 0x0, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 52
	{ "GenericDialog_Animate_MED.fng", 0x0, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 53
	{ "GenericDialog_Animate_SMALL.fng", 0x0, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 54
	{ "GenericDialog_ThreeButton.fng", 0x0, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 55
	{ "IG_GenericDialog_LARGE.fng", 0x0, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 56
	{ "IG_GenericDialog_MED.fng", 0x0, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 57
	{ "IG_GenericDialog_SMALL.fng", 0x0, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 58
	{ "HelpDialog_LARGE.fng", 0x0, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 59
	{ "HelpDialog_MED.fng", 0x0, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 60
	{ "HelpDialog_SMALL.fng", 0x0, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 61
	{ "GenericerDialog.fng", 0x0, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 62
	{ "MU_QRTransmissionSelect.fng", 0x0, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 63
	{ "MU_QuickRaceCarSelect.fng", 0x4EB1A0, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 64
	{ "Chyron_FE.fng", 0x4CB180, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 65
	{ "Chyron_IG.fng", 0x4CB180, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 66
	{ "UI_DebugTest.fng", 0x4B89B0, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 67
	{ "UI_InGameDialog.fng", 0x0, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 68
	{ "UI_VirtualKeyboard.fng", 0x4EFD40, 0x0CAF6D39E, 0x0, 0x0, 0x258, 0x0 }, // 69
	{ "UI_QRModeSelect.fng", 0x4EF280, 0x0C6923ECD, 0x405, 0x0, 0x80, 0x0 }, // 70
	{ "UI_QRModeOptions.fng", 0x4FA550, 0x7F2D0C79, 0x405, 0x0, 0x200, 0x0 }, // 71
	{ "UI_QRTrackSelect.fng", 0x4EF9B0, 0x0F4AA6D5B, 0x405, 0x0, 0x80, 0x0 }, // 72
	{ "UI_QRCarSelect.fng", 0x4FC190, 0x6C6C43FE, 0x1405, 0x0, 0x100, 0x0 }, // 73
	{ "UI_OLCarSelect.fng", 0x4FC190, 0x0A7FA00B6, 0x1405,0, 0x100, 0x0 }, // 74
	{ "2P_PressStart.fng", 0x4CCED0, 0x0, 0x0, 0x0, 0x100, 0x0 }, // 75
	{ "UI_DebugCarCustomize.fng", 0x554A00, 0x0, 0x405, 0x0, 0x80, 0x0 }, // 76
	{ "UI_ChooseCustomizeCategory.fng", 0x5591E0, 0x0EBF23E40, 0x405, 0x0, 0x80, 0x0 }, // 77
	{ "UI_ChoosePerformanceCategory.fng", 0x559C30, 0x0C3A914F6, 0x405, 0x0, 0x80, 0x0 }, // 78
	{ "UI_GenericParts_Browser.fng", 0x566430, 0x72F7569A, 0x405, 0x0FFFFFFFF, 0x80, 0x0 }, // 79
	{ "UI_ChoosePaintCategory.fng", 0x55A400, 0x0A9E93FF5, 0x605, 0x0, 0x80, 0x0 }, // 80
	{ "UI_ChoosePerformancePackage.fng", 0x55C8D0, 0x0C3A914F6, 0x441, 0x0, 0x80, 0x0 }, // 81
	{ "UI_BuyPerformanceParts.fng", 0x56C150, 0x0A0F26827, 0x409, 0x0, 0x80, 0x0 }, // 82
	{ "UI_PerformanceBrandSelect.fng", 0x554B80, 0x0, 0x5, 0x0, 0x80, 0x0 }, // 83
	{ "UI_Paint.fng", 0x56C1B0, 0x0DC884CB, 0x405, 0x0, 0x80, 0x0 }, // 84
	{ "UI_ChooseVinylLayer.fng", 0x555440, 0x9DA9E93D, 0x405, 0x0, 0x80, 0x0 }, // 85
	{ "UI_ChooseUniquePart.fng", 0x554B20, 0x0AF93FE34, 0x409, 0x0, 0x80, 0x0 }, // 86
	{ "UI_DecalMain.fng", 0x554AC0, 0x0AADE3025, 0x405, 0x0, 0x80, 0x0 }, // 87
	{ "UI_DecalsOverlay.fng", 0x56B900, 0x0, 0x405, 0x0, 0x80, 0x0 }, // 88
	{ "UI_DecalsOverlayInvis.fng", 0x56B900, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 89
	{ "UI_ChooseCustomHUD.fng", 0x554DA0, 0x0ADA7304B, 0x405, 0x0, 0x80, 0x0 }, // 90
	{ "UI_ChooseRimBrand.fng", 0x554A60, 0x7A4C4AB2, 0x405, 0x0, 0x80, 0x0 }, // 91
	{ "UI_Rims_Browser.fng", 0x56B350, 0x7A4C4AB2, 0x405, 0x0, 0x80, 0x0 }, // 92
	{ "UI_ChooseSpinner.fng", 0x56C0F0, 0x7A4C4AB2, 0x405, 0x0, 0x80, 0x0 }, // 93
	{ "UI_PerformanceDyno_MAIN.fng", 0x55D7F0, 0x0, 0x404, 0x0, 0x100, 0x0 }, // 94
	{ "UI_PerformanceTuning_Master.fng", 0x55D8B0, 0x0, 0x404, 0x0, 0x80, 0x0 }, // 95
	{ "UI_PerformanceTuning_Graph.fng", 0x55DB70, 0x0, 0x400C00, 0x0, 0x100, 0x0 }, // 96
	{ "UI_PerformanceTuning_NOS.fng", 0x55DB70, 0x0, 0x400C00, 0x0, 0x100, 0x0 }, // 97
	{ "UI_PerformanceTuning_Sliders.fng", 0x55DB10, 0x0, 0x0C00, 0x0, 0x100,0 }, // 98
	{ "UI_PerformanceTuning_Drivetrain.fng", 0x55DB10, 0x0, 0x400C00, 0x0, 0x100, 0x0 }, // 99
	{ "UI_PerformanceTuning_Setting.fng", 0x55D850, 0x0, 0x404, 0x0, 0x100, 0x0 }, // 100
	{ "UI_PerformanceDyno_Chart.fng", 0x55AF20, 0x0, 0x4, 0x0, 0x100, 0x0 }, // 101
	{ "UI_PerformanceDyno_Results.fng", 0x55AF80, 0x0, 0x404, 0x0, 0x100, 0x0 }, // 102
	{ "UI_ICEMAIN.fng", 0x560550, 0x264A5F10, 0x405, 0x0, 0x100, 0x0 }, // 103
	{ "UI_IcePartsOverlay.fng", 0x56C3C0, 0x0, 0x409, 0x0, 0x100, 0x0 }, // 104
	{ "UI_CustomNeonMain.fng", 0x554C40, 0x0, 0x405, 0x0, 0x100, 0x0 }, // 105
	{ "UI_NeonPartsOverlay.fng", 0x554BE0, 0x0, 0x409, 0x0, 0x100, 0x0 }, // 106
	{ "UI_CustomHUDOverlay.fng", 0x56C420, 0x1B2794C7, 0x409,0, 0x100, 0x0 }, // 107
	{ "UI_PostRaceResults.fng", 0x4FBB60, 0x0, 0x80010004, 0x0, 0x80, 0x0 }, // 108
	{ "UI_PostRaceReward.fng", 0x4D72F0, 0x0, 0x404, 0x0, 0x80, 0x0 }, // 109
	{ "UI_SponsorPopup.fng", 0x4C1280, 0x0, 0x400, 0x0, 0x80, 0x0 }, // 110
	{ "UI_Sponsorship_new.fng", 0x4F4730, 0x0, 0x400, 0x0, 0x80, 0x0 }, // 111
	{ "UI_PostRace_TournResults.fng", 0x4FBF00, 0x0, 0x80010004, 0x0, 0x80, 0x0 }, // 112
	{ "UI_PostRace_TournStandings.fng", 0x4FBF60, 0x0, 0x4, 0x0, 0x80, 0x0 }, // 113
	{ "UI_PostRaceStats.fng", 0x4FD6C0, 0x0, 0x10400, 0x0, 0x80,0 }, // 114
	{ "UI_PostRace.fng", 0x4F3940, 0x0, 0x30404, 0x0, 0x80,0 }, // 115
	{ "MU_PostRaceConfirm.fng", 0x0, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 116
	{ "LS_BlankMovie.fng", 0x4A8AD0, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 117
	{ "LS_EALogo.fng", 0x4A89D0, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 118
	{ "MW_LS_IntroFMV.fng", 0x4C52D0, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 119
	{ "MW_LS_Splash.fng", 0x4C5500, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 120
	{ "UG_LS_IntroFMV.fng", 0x4C52D0, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 121
	{ "UG_LS_Splash.fng", 0x4C5500, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 122
	{ "LS_THXMovie.fng", 0x4A8D90, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 123
	{ "LS_PSAMovie.fng", 0x4A8C60, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 124
	{ "LS_Demo_Legal.fng", 0x4C50C0, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 125
	{ "LS_Demo_PSA.fng", 0x4A8EC0, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 126
	{ "LS_Demo_ESRB.fng", 0x4A8F50, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 127
	{ "LS_Demo_Warning.fng", 0x4A9080, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 128
	{ "UI_EngageMessageDialog.fng", 0x4B2240, 0x0, 0x12400, 0x0, 0x80,0 }, // 129
	{ "Loading_Tips.fng", 0x4D9480, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 130
	{ "LS_LangSelect.fng", 0x4F48A0, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 131
	{ "LS_Chinese_Health.fng", 0x4A87E0, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 132
	{ "UI_OL_Disconnect.fng", 0x4D0390, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 133
	{ "UI_OL_Disconnect_BG.fng", 0x4D03F0, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 134
	{ "UI_OL_WebOffer.fng", 0x49D550, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 135
	{ "UI_OL_WebOffer2.fng", 0x4B9E80, 0x0, 0x0, 0x0, 0x0, 0x0 }, // 136
	{ "UI_OL_News.fng", 0x49D4F0, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 137
	{ "UI_OLLobbyRoom.fng", 0x4FA990, 0x3D43F19, 0x0, 0x0, 0x200, 0x0 }, // 138
	{ "UI_OLGameRoom.fng", 0x4F1820, 0x0CCD1A5D8, 0x0, 0x0, 0x200, 0x0 }, // 139
	{ "UI_OLGameRoom_host.fng", 0x4F1880, 0x0, 0x0, 0x0, 0x200, 0x0 }, // 140
	{ "UI_OLGameRoom_client.fng", 0x4F18E0, 0x0, 0x0, 0x0, 0x200, 0x0 }, // 141
	{ "UI_OLPreRaceStart.fng", 0x4D3430, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 142
	{ "UI_OL_ViewCar.fng", 0x4FB260, 0x3DE94DB2, 0x400, 0x0, 0x100, 0x0 }, // 143
	{ "UI_OL_ViewTrack.fng", 0x4FB2C0, 0x5EB035D1, 0x400, 0x0, 0x80, 0x0 }, // 144
	{ "UI_OLCarLot.fng", 0x4FD450, 0x452606CA, 0x405, 0x0, 0x80, 0x0 }, // 145
	{ "UI_OLMAIN.fng", 0x4F1940, 0x3F07D3A, 0x4405, 0x0,80, 0x0 }, // 146
	{ "UI_OLFilters.fng", 0x4E6530, 0x0, 0x4405, 0x0,80, 0x0 }, // 147
	{ "PC_OL_Lobby.fng", 0x4FA990, 0x0, 0x4401, 0x0, 0x80, 0x0 }, // 148
	{ "PC_OL_GameRoom.fng", 0x4F1820, 0x67F34517, 0x4400, 0x0, 0x200, 0x0 }, // 149
	{ "UI_OLPassword.fng", 0x4E42C0, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 150
	{ "UI_OLRankings_Personal.fng", 0x4F1BC0, 0x392CDCB0, 0x4401, 0x0, 0x80, 0x0 }, // 151
	{ "UI_OLRankings_Overall.fng", 0x4FB1A0, 0x2BBA4B21, 0x4405, 0x0, 0x80, 0x0 }, // 152
	{ "UI_OLRankings_Monthly.fng", 0x4E64D0, 0x0C5C27A17, 0x4401, 0x0, 0x80, 0x0 }, // 153
	{ "UI_OLEAMessenger.fng", 0x4F22F0, 0x0C092120A, 0x0, 0x0, 0x80, 0x0 }, // 154
	{ "PC_OL_SEARCH.fng", 0x4D5070, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 155
	{ "UI_OL_FriendDialogue.fng", 0x4FB200, 0x0, 0x405, 0x0, 0x80, 0x0 }, // 156
	{ "UI_OLX_Message.fng", 0x4F24E0, 0x0, 0x405, 0x0, 0x80, 0x0 }, // 157
	{ "UI_OLRankings.fng", 0x4F2540, 0x19A5232, 0x4405, 0x0, 0x80, 0x0 }, // 158
	{ "UI_OLX_FindResults.fng", 0x4F25A0, 0x0, 0x405, 0x0, 0x80, 0x0 }, // 159
	{ "UI_OL_Feedback.fng", 0x4F27E0, 0x0A4F8464E, 0x0, 0x0, 0x80, 0x0 }, // 160
	{ "UI_OL_Challenge.fng", 0x4D6940, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 161
	{ "UI_OLViewCareer.fng", 0x4E88C0, 0x0, 0x400, 0x0, 0x80, 0x0 }, // 162
	{ "UI_OLISPConnect.fng", 0x4B9750, 0x0, 0x405, 0x0, 0x0, 0x0 }, // 163
	{ "UI_OLSelectPersona.fng", 0x4E3CD0, 0x3F1409CC, 0x2405, 0x0, 0x100, 0x0 }, // 164
	{ "UI_OLCreateUser.fng", 0x4E3D50, 0x6B42F6F6, 0x401, 0x0, 0x0, 0x0 }, // 165
	{ "UI_OLCreateUser_2.fng", 0x4BAA60, 0x0, 0x401, 0x0, 0x0, 0x0 }, // 166
	{ "UI_OLAgeVerif.fng", 0x4E3DD0, 0x0, 0x405, 0x0, 0x0, 0x0 }, // 167
	{ "UI_OLAgeTooYoung.fng", 0x49E780, 0x0, 0x405, 0x0, 0x0, 0x0 }, // 168
	{ "UI_OLUseExisting.fng", 0x4E3E30, 0x36DA152D, 0x405, 0x0, 0x100, 0x0 }, // 169
	{ "UI_OLForgotAccountName.fng", 0x4E3BD0, 0x0, 0x405, 0x0, 0x100, 0x0 }, // 170
	{ "UI_OLEALogin.fng", 0x4E3C50, 0x0E720F694, 0x405, 0x0, 0x100, 0x0 }, // 171
	{ "UI_DateEntry.fng", 0x552720, 0x1BE259F7, 0x405, 0x0, 0x0, 0x0 }, // 172
	{ "DiscErrorPC.fng", 0x4D97A0, 0x0, 0x405, 0x0, 0x80, 0x0 }, // 173
	{ "UI_ProfileManager.fng", 0x4F4900, 0x9323DF57, 0x405, 0x0, 0x80, 0x0 }, // 174
	{ "UI_Deleteprofile.fng", 0x4F4960, 0x9323DF57, 0x0, 0x0, 0x80, 0x0 }, // 175
	{ "MC_Bootup.fng", 0x4F32B0, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 176
	{ "MC_List.fng", 0x4D7070, 0x8C4D03EA, 0x1, 0x0, 0x80,0 }, // 177
	{ "MC_Main.fng", 0x4F3320, 0x0, 0x1, 0x0, 0x80, 0x0 }, // 178
	{ "MC_Background.fng", 0x4A8740, 0x0, 0x0, 0x0, 0x80, 0x0 }, // 179
.controlchars {}
}\};
.pop pre

{{Short excerpt from hooking {50B790}}                                                          ||| details,summary,ref

{arg2} for the dialogs are a pointer to the text string                                         ||| code

.push pre
ShowFNG(AB447B38 (""), 037864A0, 00000000) = 00000000
ShowFNG(33AC1CB4 ("UI_PC_Help_Bar.fng"), 0378BD30, 00000000) = 03D7EB60
ShowFNG(E503D390 ("MC_Bootup.fng"), 0379ADE0, 00000000) = 03786140
ShowFNG(23F4270A ("LS_PSAMovie.fng"), 03786120, 00000000) = 03787AD0
ShowFNG(F774ED37 ("MC_Background.fng"), 03786120, 00000000) = 03786290
ShowFNG(801E019C ("MC_Main.fng"), 03787F40, 00000000) = 0379F4B0
ShowFNG(136E3C13 ("MC_List.fng"), 0379C8C0, 00000000) = 037A86F0
ShowFNG(4CDD8B14 ("GarageMain.fng"), 037AE470, 00000000) = 037AFD70
ShowFNG(C343126A ("UI_Main.fng"), 037A8EC0, 00000000) = 037AE880
ShowFNG(8E2B101E ("UI_QRCarSelect.fng"), 037879D0, 00000000) = 0379D3B0
ShowFNG(887BBEA7 ("UI_ChooseCustomizeCategory.fng"), 0379BF40, 00000000) = 03787570
ShowFNG(DF3D7763 ("UI_Menu_Asset_Reputation.fng"), 03789730, 00000000) = 0378A940
ShowFNG(AF09F84F ("UI_GenericParts_Browser.fng"), 0378A860, 00000000) = 037BBBB0
ShowFNG(887BBEA7 ("UI_ChooseCustomizeCategory.fng"), 037B9F40, 00000000) = 037BE620
ShowFNG(8E2B101E ("UI_QRCarSelect.fng"), 037BE4A0, 00000000) = 03787660
ShowFNG(C343126A ("UI_Main.fng"), 0378A570, 00000000) = 0379F260
ShowFNG(F6C99F4D ("UI_QRModeSelect.fng"), 0379F0F0, 00000000) = 03788380
ShowFNG(8E2B101E ("UI_QRCarSelect.fng"), 0378BF40, 00000000) = 0379B7C0
ShowFNG(6962C0CD ("GenericDialog_SMALL.fng"), 0379B620, 00838640) = 037A80E0
ShowFNG(6962C0CD ("GenericDialog_SMALL.fng"), 037AE720, 00838640) = 037ABA50
ShowFNG(6962C0CD ("GenericDialog_SMALL.fng"), 037AE720, 00838640) = 037ABA50
ShowFNG(AB447B38 (""), 03767010, 00000000) = 00000000
ShowFNG(0EB1F7E5 ("HUD_SingleRace.fng"), 037A45B0, 00000000) = 00000000
ShowFNG(26691D4A ("Chyron_IG.fng"), 03793AE0, 00000000) = 03D7EBF0
ShowFNG(33AC1CB4 ("UI_PC_Help_Bar.fng"), 037B8870, 00000000) = 03D7EB60
ShowFNG(32124083 ("UI_Pause.fng"), 03796280, 00000000) = 037B8B90
ShowFNG(33AC1CB4 ("UI_PC_Help_Bar.fng"), 037C7D30, 00000000) = 03D7EB60
ShowFNG(73F51C74 ("UI_PauseOptionsMain.fng"), 037C3EF0, 00000000) = 037C6080
ShowFNG(AEA9078F ("UI_PauseOptions.fng"), 037BAE10, 00000000) = 037D8430
ShowFNG(73F51C74 ("UI_PauseOptionsMain.fng"), 037D8F40, 00000000) = 037DE0C0
ShowFNG(33AC1CB4 ("UI_PC_Help_Bar.fng"), 037DFF40, 00000000) = 03D7EB60
ShowFNG(32124083 ("UI_Pause.fng"), 037DDF40, 00000000) = 037DE2B0
ShowFNG(AA469286 ("UI_InGameDialog.fng"), 037C1120, 00838640) = 037C2AB0
.pop pre
}

.push ul
- {50B840 {struct FNGData}* GetFNGDataForHash(unsigned int hash)}                               ||| func,refto
  Goes through all the fng data above and returns the one with matching hash.
- {50B8E0 int SetInitializeHandlerForFNG(char *fng, {fnginithandler} *func)}                    ||| func,refto
  Goes through all the fng data above and set the handler for {43DCC0} matching fng names.      ||| ref
- {50B790 ShowFNG(int fnghash, int arg1, int arg2)}                                             ||| func
  See {nfsu2-re-hooks/replace-50B790-ShowFNG.c} for a reimplementation.                         ||| hookfileref
- {558B70 void __thiscall UIConsumeKey(void *this, int keyCode)}                                ||| func
  probably used for Q, but what else?
- {55DBD0 void UIHandleKey(int keyCode)}                                                        ||| func
  Called from {WM_CHAR} messages in {5CCD60},                                                   ||| code,ref
  only used to type/press enter in a textbox and Q to quit.
  Navigating menus seems unaffected
- {55DC20 __thiscall void SendSomethingToFNG?(void *this, char *fng, int data)}                 ||| func
  Called when menus change.
- {7F7DC8 {struct FNGData} fngdata[180]}                                                        ||| field,refto
- {83A9C0 int isTextboxFocused}                                                                 ||| field
- {83A9C4 void *focusedTextbox}                                                                 ||| field
.pop ul

.pop section

Stuff

.push symbols
- {50B460 int RenderCursor(int x, int y)}                                                       ||| func

- {50CD00 int IsPointInRect(float x, float y, struct \{ float x; float y\} *pos,                ||| func
  struct \{ float width; float height; \} *size)}
  Only seen this being called when there's a list on screen so far.

- {52D020 int IsPointIn??SomethingUI(float x, float y, void *somethingui)}                      ||| func
  something ui is something ui. Calculating the area goes through lots of functions, TODO

- {537B80 void SetUIString(?, unsigned int keyToSet, char *string, ?)}                          ||| func
  Only used for a few things, such as: sms 'from', sms 'subject', part name in customize..

- {5663B0 void DoUI()}                                                                          ||| func
  TODO document this and go in the last unresolved func.
.pop symbols

.pop section
.push section

{Mouse input}  ||| h id=mouseinput

While the canvas is {640x480}, mouse position seems to be handled mostly                        ||| code
as {([-320,+320],[-240,+240])}.                                                                 ||| code

.push pre
{struct MouseData} \{                                                                           ||| mkref
	void /*DInputDevice8*/ *{dinputdevice};                                                 ||| mkref name=structMouseData+0
	int cursorX; // on 640x480 canvas
	int cursorY; // on 640x480 canvas
	int previousCursorX; // on 640x480 canvas
	int previousCursorY; // on 640x480 canvas
	int deltaCursorX; // on 640x480 canvas
	int deltaCursorY; // on 640x480 canvas
	int mousestate_lZ; // scrollwheel data
	char areMouseButtonsSwapped; // result of GetSystemMetrics(SM_SWAPBUTTON);
	char button0State; // left mouse button
	char button0JustPressed;
	char button0JustReleased;
	char button1State; // right mouse button
	char button1JustPressed;
	char button1JustReleased;
	char button2State; // middle mouse button
	char button2JustPressed;
	char button2JustReleased;
};

struct MouseData *_mouseData = (struct MouseData*) 0x8763D0;
.pop pre

.push symbols
- {50CD70 void GetMousePositionFromMiddle(float *cursorX, float *cursorY)}                      ||| func
  .push pre
  *cursorX = _mouseData.cursorX - canvasWidth/2;
  *cursorY = _mouseData.cursorY - canvasHeight/2;
  .pop pre

- {50C860 void StoreMousePosButtonsIntoArg(void *arg)}                                          ||| func
  .push pre
  *((short*) arg_0 + 0) = _mouseData.cursorX - canvasWidth / 2;
  *((short*) arg_0 + 1) = _mouseData.cursorY - canvasHeight / 2;
  *((short*) arg_0 + 2) = _mouseData.button0State << 1 | _mouseData.button1State; (or swapped)
  .pop pre

- {50CDA0 void GetMouseWheel(float *mouseWheelData)}                                            ||| func
  .push pre
  *mouseWheelData = _mouseData.mousestate.lz;
  .pop pre

- {50CDB0 int DidCursorPressInRect(struct \{ float x; float y; \} *pos,                         ||| func
  struct \{ float width; float height; \} *size)}
  Gets called in one location, but still haven't actually seen it being called. TODO

- {52D090 DidCursorPressIn??SomethingUI(void *somethingui)}                                     ||| func
  Delegates to {52D020}                                                                         ||| ref

- {52D100 DidCursorPressIn??SomethingUI_2(void *something2)}                                    ||| func
  same as above, probably for some other type UI element

- {5BF6E0 int __thiscall CreateDinputDevice({struct MouseData} *this)}                          ||| func,refto
  Creates and sets {{8763D0}.{structMouseData+0}}                                               ||| code,ref,refto

- {5BF750 int __thiscall UpdateCursorPosition({struct MouseData} *this)}                        ||| func,refto

- {5BF860 void __thiscall UpdateMouseState({struct MouseData} *this)}                           ||| func,refto
  Calls {5BF750} and then updates button states.                                                ||| ref

- {5BF940 int __thiscall HaveCursorActivity({struct MouseData} *this)}                          ||| func,refto
  called once, from {5663B0}. returns 1 if position deltas or scrollwheel or                    ||| ref
  any of the JustPressed/JustReleased fields are not zero. Always returning 0 here has the
  effect that ui hover does not work, left click acts as right click (go back) except when
  clicking on the active ui element (like main menu bar). Dialog box buttons still work
  somehow. The car showroom can still be rotated with mmb. Mouse still moves.

- {5C8600 int __thiscall MouseData::ctor({struct MouseData} *this)}                             ||| func,refto
  Called once, from {77E580}.                                                                   ||| ref

- {8763D0 struct MouseData _mouseData}                                                          ||| field
.pop symbols

.pop section
.push section

{Cheats}  ||| h id=cheats

.push pre
{struct CheatScreenData} \{                                                                     ||| mkref
	void **ppFunc;
	char {doCheatCheck}; // only 1 when in the 'press enter key' screen                     ||| mkref name=structCheatScreenData+4
	char field5;
	char field6;
	char field7;
	int field2CofLastCheatActivated;
	struct CheatData *cheats; /*0x7FB960*/
	int numCheats; // 20
	char cheatString[32]; // typed string
	int typedCheatLength; // characters typed
	int field38;
};

#define CHEAT_TYPE_VISUALS 1
#define CHEAT_TYPE_PERFORMANCE 2
#define CHEAT_TYPE_CAREER 5
#define CHEAT_TYPE_SPONSOR_CAR 6 // shows up when doing quick race
#define CHEAT_TYPE_VINYL 7

{struct CheatData} \{                                                                           ||| mkref
	char cheat[32];
	int cheatType;
	int cheatData; // hash when cheatType is sponsor car or vinyl
	int {field28};                                                                          ||| mkref name=structCheatData+28
	int field2C;
	char {hasBeenTriggered};                                                                ||| mkref name=structCheatData+30
	char field31;
	char cheatEnabled;
	char field33;
};
EXPECT_SIZE(struct CheatData, 0x34);

struct CheatScreenData {865930}; // partially initialized by {575770}                           ||| ref,ref
struct CheatData {7FB960}[20] = \{                                                              ||| ref
	{ "needperformance1",	2, 1, 0, 0, 0, 1, 1, 0 }, // 0
	{ "needperformance2",	2, 2, 0, 0, 0, 1, 1, 0 }, // 1
	{ "gimmevisual1",	1, 2, 0, 0, 0, 1, 1, 0 }, // 2
	{ "gimmevisual2"	1, 2, 0, 0, 0, 1, 1, 0 }, // 3
	{ "gimmechingy"		6, 0, 0, 0, 0, 0, 0, 0 }, // 4
	{ ""			0, 0, 0, 0, 0, 0, 0, 0 }, // 5
	{ ""			0, 0, 0, 0, 0, 0, 0, 0 }, // 6
	{ ""			0, 0, 0, 0, 0, 0, 0, 0 }, // 7
	{ ""			0, 0, 0, 0, 0, 0, 0, 0 }, // 8
	{ ""			0, 0, 0, 0, 0, 0, 0, 0 }, // 9
	{ ""			0, 0, 0, 0, 0, 0, 0, 0 }, // 10
	{ ""			0, 0, 0, 0, 0, 0, 0, 0 }, // 11
	{ ""			0, 0, 0, 0, 0, 0, 0, 0 }, // 12
	{ ""			0, 0, 0, 0, 0, 0, 0, 0 }, // 13
	{ ""			0, 0, 0, 0, 0, 0, 0, 0 }, // 14
	{ ""			0, 0, 0, 0, 0, 0, 0, 0 }, // 15
	{ ""			0, 0, 0, 0, 0, 0, 0, 0 }, // 16
	{ ""			0, 0, 0, 0, 0, 0, 0, 0 }, // 17
	{ ""			0, 0, 0, 0, 0, 0, 0, 0 }, // 18
	{ ""			0, 0, 0, 0, 0, 0, 0, 0 }, // 19
};
// after {575770} was called, it looks like this:                                               ||| ref
// hashes are done with case sensitive hash
struct CheatData {7FB960}[20] = \{                                                              ||| ref
	{ "needperformance1",	2, 0x00000001, 0, 0, 0, 1, 1, 0 }, //
	{ "needperformance2",	2, 0x00000002, 0, 0, 0, 1, 1, 0 }, //
	{ "gimmevisual1",	1, 0x00000002, 0, 0, 0, 1, 1, 0 }, //
	{ "gimmevisual2"	1, 0x00000002, 0, 0, 0, 1, 1, 0 }, //
	{ "gimmechingy"		6, 0x3EE7D094, 0, 0, 0, 1, 1, 0 }, // "SPONSOR_CHINGY"
	{ "wannacapone"		6, 0x3E6D00C8, 0, 0, 0, 1, 1, 0 }, // "SPONSOR_CAPONE"
	{ "wantmyd3"		6, 0x54E32D29, 0, 0, 0, 1, 1, 0 }, // "SPONSOR_D3"
	{ "shinestreetbright"	6, 0xE57B6400, 0, 0, 0, 1, 1, 0 }, // "SPONSOR_SHINESTREET"
	{ "davidchoeart"	6, 0x7760C479, 0, 0, 0, 1, 1, 0 }, // "SPONSOR_DAVIDCHOE"
	{ "tunejapantuning"	6, 0x002F98F1, 0, 0, 0, 1, 1, 0 }, // "SPONSOR_JAPANTUNING"
	{ "yodogg"		6, 0x007090A1, 0, 0, 0, 1, 1, 0 }, // "SPONSOR_SNOOP_DOGG"
	{ "opendoors"		6, 0x4BAECE79, 0, 0, 0, 1, 1, 0 }, // "SPONSOR_THE_DOORS"
	{ "needmybestbuy"	7, 0x9E52EAC1, 0, 0, 0, 1, 1, 0 }, // "AD_BESTBUY"
	{ "goforoldspice"	7, 0x5FD7B956, 0, 0, 0, 1, 1, 0 }, // "AD_OLDSPICE"
	{ "gottaedge"		7, 0x44C47B98, 0, 0, 0, 1, 1, 0 }, // "AD_EDGE"
	{ "gottahavebk"		7, 0xCF5F6873, 0, 0, 0, 1, 1, 0 }, // "AD_BURGERKING"
	{ "gotmycingular"	7, 0x7C504338, 0, 0, 0, 1, 1, 0 }, // "AD_CINGULAR"
	{ "regmybank"		5, 0x00000002, 0, 0, 0, 1, 1, 0 }, //
	{ "regmebaby"		5, 0x00000003, 0, 0, 0, 1, 1, 0 }, //
	{ "ordermebaby"		5, 0x00000004, 0, 0, 0, 1, 1, 0 }, //
};

void __thiscall {575770}(struct CheatScreenData *data)                                          ||| ref
{
	int i;

	cheatScreenData.ppFunc = (void*) 0x7A0604;
	cheatScreenData.doCheatCheck = 0;
	cheatScreenData.cheats = cheatData;
	cheatScreenData.numCheats = 20;
	cheatScreenData.typedCheatLength = 0;
	cheatScreenData.field38 = 0;

	for (i = 0; i < 20; i++) {
		if (cheatData[i].cheatType == CHEAT_TYPE_VINYL &&
			cheatData[i].someHash == hashCS43DB50("AD_BESTBUY") &&
			_gameRegion != 0 /*REGION_US*/)
		{
			cheatData[i].cheatEnabled = 0;
		}
	}
}
.pop pre

Cheats can only be inserted at the 'press enter key' screen at boot. (I remember
this from looking up cheats in my childhood), but toggling sponsor car cheats when
ingame has immediate effect.

.push symbols
- {575770 void __thiscall InitCheats_({struct CheatScreenData} *this)}                          ||| func,refto
  Initializes {865930} and {7FB960}.                                                            ||| ref,ref

- {576050 void __thiscall UndoCheat__({struct CheatScreenData} *this, int cheatdata_field28)}   ||| func,refto
  Weird one, is called on each cheat entry and all cheats with a matching
  {{structCheatData+28}} has zero written to its {{structCheatData+30}} field.                  ||| code,refto,code,refto

- {576090 int GetExtraCheatedCareerMoney()}                                                     ||| func
  Basically {return {86512C} + {865130};}                                                       ||| code,refplain,refplain

- {5760A0 int __thiscall DoCareerCheat({struct CheatScreenData} *this, int careerCheatIdx)}     ||| func,refto

- {579CB0 void __thiscall CheatMatched({struct CheatScreenData} *this, int cheat_index)}        ||| func,refto
  Called from {57B8B0} when a cheat matched.                                                    ||| ref

- {57B8B0 void __thiscall CheatCheck(void *this, int keyCode)}                                  ||| func
  Called from {55DBD0} when {{865930}.{structCheatScreenData+4}} is non-zero.                   ||| ref,code,ref,refto

- {7FB960 {struct CheatData} cheatData[20]}                                                     ||| field,refto

- {8383C8 cheatCareerNeverPossible}                                                             ||| field
  This gets only set to one when a career cheat with {7FB960} zero is entered,                  ||| ref
  but all career cheats have a value of 2-4.
  It has one XREF, surrounded by some language stuff? TODO

- {86512C cheatExtraCareerMoney200}                                                             ||| field
  Set to 200 when the {regmybank} cheat was entered.                                            ||| em

- {865130 cheatExtraCareerMoney1000}                                                            ||| field
  Set to 1000 when the {ordermebaby} cheat was entered.                                         ||| em

- {865930 {struct CheatScreenData} cheatScreenData}                                             ||| field,refto
.pop symbols

.pop section
.push section

{Car model data}  ||| h id=carmodeldata

When jumping around XREFs I stumbled upon a function that I named {511E60}.                     ||| ref
It uses a lot of strings that are manufacturers and stuff like {CARSELECT_MANUFACTURER_%s}.     ||| code
There are two parameters, the first seems to be the index of the car and the second is if
the caller wants the manufacturer logo or the brand logo.
The function gave some nice information:

.push ul
- {8A1CCC} is a pointer to something that's probably car model data                             ||| ref
- That data is an array with component size {0x890}                                             ||| code
- At {+0x0}, there is a brand name                                                              ||| code
- At {+0xC0}, there is a manufacturer name                                                      ||| code
- (returning zero from this func will show a star image for the manufacturer/brand)
.pop ul

After hooking and printing addresses, some more obvious data could be seen:

.push ul
- At {+0x20} is a the brand name again                                                          ||| code
- At {+0x40} is a geometry path (example {CARS\A3\GEOMETRY.BIN})                                ||| code, code
- At {+0x60} is a geometry path (example {CARS\A3\GEOMETRY.LZC})                                ||| code, code
.pop ul

.push symbols
- {511E60 void *GetLogoForCarModel(int car_model_index, char get_manufacturer_logo)}            ||| func
  TODO: what is the return type?
.pop symbols

.pop section
.push section

{Sound}  ||| h id=sound

.push symbols
- {458520 void __thiscall PlaySound_(void *this, void *sound)}                                  ||| func

- {51DE60 int PlayUISoundEffect(void *unknownUnused, int soundID)}                              ||| func
  Discovered when looking at cheats. 8 is some choose sound, 9 too, .. TODO other IDs.

- {82B884 pSoundEffectSystem?}                                                                  ||| field
  pointer to what is used as {this} for calls to {458520}                                       ||| code, ref
.pop symbols

.pop section
.push section

{Career}  ||| h id=career

.push pre
{struct CareerData} \{                                                                          ||| mkref
	int money;
};

{struct SmsMessage} \{                                                                          ||| mkref
	/*ptr to offset in language table {838428}*/                                            ||| refplain
	short *{careerTextLanguageTableOffset};                                                 ||| mkref name=structSmsMessage+0
	int {field_4};                                                                          ||| mkref name=structSmsMessage+4
	int {field_8};                                                                          ||| mkref name=structSmsMessage+8
	unsigned int {subjectParameterLanguageLabel};                                           ||| mkref name=structSmsMessage+C
	unsigned int {subjectFormatLanguageLabel};                                              ||| mkref name=structSmsMessage+10
};
.pop pre

The career money cheat is mildly interesting, as it seems to work in two different
ways. It adds the amount to a variable that is used when a new career is started and
it adds the amount to the current career data if the loaded profile didn't start
career yet.

.controlchars [] .push pre
/*from [5760A0]*/                                                                               ||| ref
/*ordermebaby ($1000 career start bonus)*/
[cheatExtraCareerMoney1000] = 1000;                                                             ||| refplain address=865130
// ^ used when starting a new career from a profile that
// was loaded from the profile menu
if (![isProfileWithStartedCareerLoaded])  {                                                     ||| refplain address=86347C
	if ([CareerGetMoney]() == 0)  {                                                         ||| refplain address=500F90
		[CareerSetMoney](1000);                                                         ||| refplain address=500F80
		// ^ This only has an effect when the profile was
		// loaded from the loading screen
	}
}
.controlchars {} .pop pre

.push symbols
- {495D30 CareerShowSponsorSelectScreen?()}                                                             ||| func

- {497760 void GetSmsMessageSubjectHeader({struct SmsMessage} *sms, char *dest, int maxLength)}         ||| func,refto
  Gets the subject from {5149C0} and prepends {Subject: } to it (based on language).                    ||| ref,code
  Used by {4CC7C0} and {4979A5}.                                                                        ||| ref,ref
  {{Implementation {nfsu2-re-hooks/replace-497760-GetSmsMessageSubjectHeader.c}}                        ||| details,summary,hookfileref
  .push pre
  char *subjectFormat;
  char subject[100];

  subjectFormat = {4FF9D0}(0x4B5DE3E9/*SMS_SUBJECT_HEADER*/);                                           ||| refplain
  {5149C0}(sms, subject, sizeof(subject));                                                              ||| refplain
  sprintf(dest, subjectFormat, subject);
  .pop pre
  }

- {5149C0 void __thiscall GetSmsMessageSubject({struct SmsMessage} *this, char *dest, int maxlen)}      ||| func,refto
  {{Implementation {nfsu2-re-hooks/replace-5149C0-GetSmsMessageSubject.c}}                              ||| details,summary,hookfileref
  .controlchars [] .push pre
  char *format;
  char *parameter;
  char *str;
  char buffer\[50\];

  if (this->[structSmsMessage+10]) {                                                                    ||| refto
          format = [4FFA80](this->[structSmsMessage+10]);                                               ||| refplain,refto
          parameter = [4FFA80](this->[structSmsMessage+C]);                                             ||| refplain,refto
          sprintf(dest, format, parameter);
          return;
  }

  str = getCareerString(this->[structSmsMessage+0]);                                                    ||| refto
  if (![43DC60](str, "SMS_CAR_UNLOCK_", [43DBB0]("SMS_CAR_UNLOCK_"))) {                                 ||| refplain,refplain
          str = [4FFA80](0xF81E6031/*SMS_CAR_UNLOCK_1_SUBJECT*/);                                       ||| refplain
          [43DBD0](dest, str);                                                                          ||| refplain
          return;
  }

  [50B990](dest, "%s_SUBJECT", str);                                                                    ||| refplain
  .controlchars {} .pop pre
  }

- {500F90 int __thiscall CareerGetMoney({struct CareerData} *this)}                                     ||| func,refto
  TODO has one other XREF: where money is drawn?

- {500180 char* __thiscall GetCareerLanguageString(short *this)}                                        ||| func
  Uses {838428} along with offset passed in {this} to return a string.                                  ||| ref,code

- {500F80 void __thiscall CareerGiveMoney({struct CareerData} *this, int amount)}                       ||| func,refto
  Only used in the career money cheats.

- {5129F0 int __thiscall GetCareerSponsorLanguageKey(short *this)}                                      ||| func
  Uses {838428} along with offset passed in {this} to format a string {SPONSOR_%s} and                  ||| ref,code,code
  return the hash result to use for getting a language string.

- {532830 void MaybeStartCareer?()}                                                                     ||| func
  It's the only func that calls {576090}.                                                               ||| ref

- {83840C ptr83840C}                                                                                    ||| field
  Pointer to some struct with DVD/SHOW related stuff.

- {838428 ptr838428}                                                                                    ||| field
  Pointer to career related labels/keys.

- {86347C int isProfileWithStartedCareerLoaded}                                                         ||| field
  Fun fact: when creating a new profile,
  this value is set to 0 when the textbox to enter a name appears.
  When canceling at that point, it's set back to 1
  (if the loaded profile already had career started).

- {861E74 {struct CareerData} careerData}                                                               ||| field,refto

- {862838 int _currentStage}                                                                            ||| field
  Maybe this is part of {struct CareerData}?                                                            ||| refto
.pop symbols

.pop section
.push section

{D3D9 Stuff}  ||| h id=d3d9stuff

.push symbols
- {86C120 struct D3DADAPTER_IDENTIFIER9 _d3d9AdapterIdentifier}                                 ||| field

- {870970 IDirect3D9 *_IDirect3D9ptr}                                                           ||| field

- {8709AC int _displayAdapter}                                                                  ||| field
  {Ordinal number that denotes the display adapter.                                             ||| em
  {D3DADAPTER_DEFAULT(0)} is always the primary display adapter.}                               ||| code
.pop symbols

.pop section
.push section

{Other symbols}  ||| h id=other_symbols

.push symbols
- {43DBB0 int strlenWithNullcheck(char *str)}                                                   ||| func

- {43DBD0 int strcpy(char *dest, char *src)}                                                    ||| func

- {43DC00 void strncpy(char *dst, char *src, int maxlen)}                                       ||| func

- {43DC30 int strcmp(char *a, char *b)}                                                         ||| func

- {43DC60 int strncmp(char *a, char *b, int maxlen)}                                            ||| func

- {43DCC0 int stricmp(char *a, char *b)}                                                        ||| func

- {43E950 int FormatWithSinglePlaceholderPtr(char *dst, char *format, void *parameter)}         ||| func
  This does a bunch of things that I don't want to figure out,
  but the the result is that it formats.

- {43FBC0 int FormatWithSinglePlaceholderPtrTimed(char *dst, char *format, void *parameter)}    ||| func
  Calls {43E950} but does some stuff with {QueryPerformanceCounter} before and after,           ||| ref, code
  I'm assuming it times. Seems to add the time spent to {828518}, and increments {82851C}       ||| ref,ref
  every time this func is called.

- {50D510 void sub_50D510(?)}                                                                   ||| func
  A nop function.
  It seems like many calls to different functions that got nopped all redirect here.
  Some of the calls are used as a debug print, see {debugprint}.                                ||| href

- {5CCD60 LPRESULT MainWndProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)}             ||| func

- {75BCC7 start}                                                                                ||| func

- {75D45B sub_75D45B()}                                                                         ||| func
  Invoked once at boot, does things (todo) and calls all functions in {7E8000}.                 ||| ref

- {77E580 init_function_77E580_MouseData_ctor()}                                                ||| func
  Calls {5C8600} to initialize mouse data.                                                      ||| ref

- {7E8000 void (*someInitFunctions)()[821]}                                                     ||| field
  Array of functions that are called at boot, by {75D45B}.                                      ||| ref
  Some of them are constructors being called.

- {828518 int _TimeSpentInFormatWithSinglePlaceholder}                                          ||| field
  Used in {43FBC0}.                                                                             ||| ref

- {82851C int _FormatWithSinglePlaceholderCallCount}                                            ||| field
  Used in {43FBC0}.                                                                             ||| ref
- {864F4C int _isGameClosing}                                                                   ||| field

- {8709D8 int _isCTRLKeyDown}                                                                   ||| field
  Set in {5CCD60}, but seemingly never read from? REVISIT                                       ||| ref

- {8A1CCC void *ptrCarData}                                                                     ||| field
.pop symbols

.pop section
.push plain
</body>
</html>
.pop plain
