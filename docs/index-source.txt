.push nop
# vim: set expandtab ts=8 nowrap:
.pop nop




.push plain

<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<title>nfsu2-re</title>
<style>
body {
	font-family: Arial,Tahoma,sans-serif;
	background: #888;
}
table {
        border-collapse: collapse;
}
td,th {
	padding: .1em .4em;
	border: 1px solid #000;
}
th {
        background: #f5f5f5;
}
div, h1 {
	padding: 1em;
	border: 1px solid #efefef;
	outline: 1px solid #d0d0d0;
	max-width: 50em;
}
h1 {
	background:#C7C7C7;
}
h1,h2,h3,h4,h5,h6 {
        margin-top: 0.2em;
}
h2 a,h3 a,h4 a,h5 a,h6 a{
	color: #A0A0A0;
}
body > div {
	margin-bottom: 1em;
	background: #fff;
}
.center {
	text-align: center;
}
code {
	display: inline-block;
	background: #dfdfdf;
	padding: 2px .2em;
	margin: 0 .2em;
	border-radius: 2px;
}
pre {
	border:2px solid #CDCDCD;
	padding: 0.5em;
	white-space: pre-wrap;
	background: #f7f7f7;
}
pre.ida {
	color:#000080;
	font-weight: bold;
}
pre.ida span.text {
	color:#000;
}
pre.ida span.comment {
	color:#808080;
}
pre.ida span.ident {
	color:#0000FF;
}
pre.ida span.num,pre.ida span.str {
	color:#008000;
}
pre.ida span.hi {
	background:#FFFF00;
}
span.unresolved,a.funcref,a.fieldref {
        padding: 0 4px;
        border-radius: 3px;
        font-family: monospace;
}
span.unresolved {
        background: #ff5454;
}
a.funcref {
        background: #fdf;
}
a.funcref:hover {
        background: #f6f;
}
a.fieldref {
        background: #dfd;
}
a.fieldref:hover {
        background: #6f6;
}
span.func,span.field {
        display: block;
        padding: 2px 3px;
        font-family: monospace;
        font-weight: bold;
        margin: .5em 0;
}
span.func {
        background: #fdf;
        border: 1px solid #f6f;
}
span.field {
        background: #dfd;
        border: 1px solid #6f6;
}
details {
        padding: .2em .4em 0 .4em;
        margin: .5em 0;
        border: 1px solid #ccc;
        background: #eee;
}
summary {
        user-select: none;
        cursor: pointer;
}
</style>
</head>
<body>

.pop plain





{nfsu2-re} |||h





.push section

{Prologue}      |||h id=prologue

This is just me documenting while I have fun attempting to reverse-engineer the game
Need For Speed Underground 2, otherwise knows as nfsu2.

This normally belongs to {https://github.com/yugecin/nfsu2-re}.                                 |||a href=https://github.com/yugecin/nfsu2-re

Other pages: {(fpu) cheatsheet}                                                                 |||a href=cheatsheet.html

.pop section
.push section

{Index}         |||h id=index

{}              |||index

.pop section
.push section

{Injected code}         |||h id=injectedcode

The code for all injected things I did can be found in {nfsu2-re-hooks/*.c}.                    |||code
It's configured as a VC2005 project in a VC2005 solution.
The project emits a compiled file to {..\NeedForSpeed U2\scripts\nfsu2-re-hooks.asi}.           |||code
I'm using the {Ultimate ASI Loader by ThirteenAG},                                              |||a href=https://github.com/ThirteenAG/Ultimate-ASI-Loader/releases
which loads the library nicely for me (download the ZIP and place the dll in the game folder,
name it {dinput8.dll}).                                                                         |||code

.pop section
.push section

{Display settings}  ||| h id=displaysettings

Display settings get saved in the windows registry. See {registry}.                             ||| href

TODO. I was writing this when I got distracted by the language stuff.

.push symbols
- {5BE190 void StoreOptLightGlowSetToZero()}                                                    ||| func
  .push pre
  {8709D4} = {870CE4};                                                                          ||| refplain,refplain
  {870CE4} = 0;                                                                                 ||| refplain
  .pop pre
  TODO why

- {5BE1B0 void RestoreOptLightGlow()}                                                           ||| func
  .push pre
  {870CE4} = {8709D4};                                                                          ||| refplain,refplain
  .pop pre
  TODO why

- {5BE1C0 int GetWorldDetailClampBetween0And2()}                                                ||| func
  .push pre
  return clamp({870CF4}, 0, 2);                                                                 ||| refplain
  .pop pre

- {5BE560 int GetRealFilteringLevelForCurrentSetting()}                                         ||| func
  Returns {{870D18}+1} ({0-2 -> 1-3}), but maxed to {2} if the device doesn't have              ||| code,refplain,code,code
  {D3DDEVCAPS_RTPATCHES} support.                                                               ||| code

- {5BE200 void DetermineMaxDisplaySettingValuesForDevice()}                                     ||| func
  Sets maximum values of various options based on the adapter info in {86C120}.                 ||| ref
  See all {_optMax*} fields.                                                                    ||| code
  Also seems to do stuff with shaders maybe? TODO
  Called twice. TODO: where and why

- {5BE5A0 void DetermineSupportedResolutions()}                                                 ||| func
  Based on the device, for every resolution index,
  put {1} in {86E880} at that index if available.                                               ||| code,ref

- {5BE690 void EnsureDisplayOptionsDontExceedMaxSettings()}                                     ||| func
  For each option that has a maximum value field,
  set it to the maximum value if it was exceeded.

- {5BE870 void SetPresetDisplayLevelFromLevelOfDetail()}                                        ||| func

- {5BE9F0 void SetPresetDisplayLevelFromLevelOfDetaulAndLimit()}                                ||| func
  Calls {5BE870},                                                                               ||| ref
  sets {870D08} to 0 for some specific windows version or if the device is from vendor          ||| ref
  {Advanced Micro Devices, Inc}, then calls {5BE690}                                            ||| em,ref

- {800538 int _resolutionWidths[6]}                                                             ||| field
  Values {640, 800, 1024, 1280, 1280, 1600}                                                     ||| code

- {800550 int _resolutionHeights[6]}                                                            ||| field
  Values {480, 600, 768, 960, 1024, 1200}                                                       ||| code

- {86E880 int isSupportedResolutionIdx[6]}                                                      ||| field

- {87099C int _optLevelOfDetail}                                                                ||| field

- {8709D4 tempStoredOptLightGlow}                                                               ||| field
  Used as temporary store for {5BE190} and {5BE1B0}                                             ||| ref,ref

- {870CB8 int _optCarReflectionUpdateRate}                                                      ||| field

- {870CBC int _optCarReflectionDetail}                                                          ||| field

- {870CC0 int _optCarShadowNeon}                                                                ||| field

- {870CC4 int _optCarHeadlight}                                                                 ||| field

- {870CC8 int _optCarLightingEnableUNUSED}                                                      ||| field
  Seemingly unused.

- {870CCC int _optCarDamageEnableUNUSED}                                                        ||| field
  Seemingly unused.

- {870CD0 int _optCrowds}                                                                       ||| field

- {870CD4 int _optWorldReflectionDetail}                                                        ||| field

- {870CD8 int _optFog}                                                                          ||| field

- {870CDC int _optMotionBlur}                                                                   ||| field

- {870CE0 int _optLightTrails}                                                                  ||| field

- {870CE4 int _optLightGlow}                                                                    ||| field

- {870CE8 int _optAnimatedTextureEnable}                                                        ||| field
  Doesn't seem to be in the display menu, or it's hidden due to my system config.

- {870CEC int _optParticleSystem}                                                               ||| field

- {870CF0 int _optDepthOfField}                                                                 ||| field

- {870CF4 int _optWorldDetail}                                                                  ||| field

- {870CF8 int _optCarGeometryDetail}                                                            ||| field

- {870CFC int _optOverBright}                                                                   ||| field

- {870D00 int _optEnchancedContrast}                                                            ||| field

- {870D04 int _optTinting}                                                                      ||| field

- {870D08 int _optFSAALevel}                                                                    ||| field

- {870D0C int _optHorizonFog}                                                                   ||| field

- {870D10 int _optRainSplatter}                                                                 ||| field

- {870D18 int _optTextureFiltering}                                                             ||| field

- {870D1C int _optRacingResolutionIdx}                                                          ||| field
  To be used for arrays {800538},{800550} and {86E880}.                                         ||| ref,ref,ref

- {870D24 int _optVsync}                                                                        ||| field

- {8764D0 int _optMaxSettingCarReflectionUpdateRate}                                            ||| field

- {8764D4 int _optMaxSettingCarReflectionDetail}                                                ||| field

- {8764D8 int _optMaxSettingCarShadowNeon}                                                      ||| field

- {8764DC int _optMaxSettingCarHeadlight}                                                       ||| field

- {8764E0 int _optMaxSettingCarLightingEnable}                                                  ||| field

- {8764E4 int _optMaxSettingCarDamageEnable}                                                    ||| field

- {8764E8 int _optMaxSettingCrowds}                                                             ||| field

- {8764EC int _optMaxSettingWorldReflectionDetail}                                              ||| field

- {8764F0 int _optMaxSettingFog}                                                                ||| field

- {8764F4 int _optMaxSettingMotionBlur}                                                         ||| field

- {8764F8 int _optMaxSettingLightTrails}                                                        ||| field

- {8764FC int _optMaxSettingLightGlow}                                                          ||| field

- {876500 int _optMaxSettingAnimatedTextureEnable}                                              ||| field

- {876504 int _optMaxSettingParticleSystem}                                                     ||| field

- {876508 int _optMaxSettingDepthOfField}                                                       ||| field

- {87650C int _optMaxSettingWorldDetail}                                                        ||| field

- {876510 int _optMaxSettingCarGeometryDetail}                                                  ||| field

- {876514 int _optMaxSettingOverBright}                                                         ||| field

- {876518 int _optMaxSettingEnchancedContrast}                                                  ||| field

- {876520 int _optMaxSettingFSAALevel}                                                          ||| field

- {876524 int _optMaxSettingHorizonFog}                                                         ||| field

- {876528 int _optMaxSettingRainSplatter}                                                       ||| field

- {876530 int _optMaxSettingTextureFiltering}                                                   ||| field
.pop symbols

.pop section
.push section

{Registry}              |||h id=registry

Many values (mainly display settings) are loaded/saved in procs {5BEA20} and {5BEEA0}.          ||| ref,ref

They are saved in key {Software\EA Games\Need for Speed Underground 2} in {HKEY_CURRENT_USER}.  ||| code,code
On my machine this translates to:
{HKEY_CURRENT_USER\Software\Classes\VirtualStore\MACHINE\SOFTWARE\Wow6432Node\EA                ||| code
Games\Need for Speed Underground 2}.
I'm guessing the extra path in between is because of WOW64.

Variables loaded from there:

{                                                               ||| table
{{{Variable}{Key}}}                                             ||| thead,tr,th,th
{                                                               ||| tbody
{{{870CB0}}     {{VERSION}}}                                    ||| tr,td,ref,td,code
{{{870CB4}}     {{SIZE}}}                                       ||| tr,td,ref,td,code
{{{870CB8}}     {{g_CarEnvironmentMapEnable}}}                  ||| tr,td,ref,td,code
{{{870CBC}}     {{g_CarEnvironmentMapUpdateData}}}              ||| tr,td,ref,td,code
{{{870CC0}}     {{g_CarShadowEnable}}}                          ||| tr,td,ref,td,code
{{{870CC4}}     {{g_CarHeadlightEnable}}}                       ||| tr,td,ref,td,code
{{{870CC8}}     {{g_CarLightingEnable}}}                        ||| tr,td,ref,td,code
{{{870CCC}}     {{g_CarDamageEnable}}}                          ||| tr,td,ref,td,code
{{{870CD0}}     {{g_CrowdEnable}}}                              ||| tr,td,ref,td,code
{{{870CD4}}     {{g_RoadReflectionEnable}}}                     ||| tr,td,ref,td,code
{{{870CD8}}     {{g_FogEnable}}}                                ||| tr,td,ref,td,code
{{{870CDC}}     {{g_MotionBlurEnable}}}                         ||| tr,td,ref,td,code
{{{870CE0}}     {{g_LightStreaksEnable}}}                       ||| tr,td,ref,td,code
{{{870CE4}}     {{g_LightGlowEnable}}}                          ||| tr,td,ref,td,code
{{{870CE8}}     {{g_AnimatedTextureEnable}}}                    ||| tr,td,ref,td,code
{{{870CEC}}     {{g_ParticleSystemEnable}}}                     ||| tr,td,ref,td,code
{{{870CF0}}     {{g_DepthOfFieldEnable}}}                       ||| tr,td,ref,td,code
{{{870CF4}}     {{g_WorldLodLevel}}}                            ||| tr,td,ref,td,code
{{{870CF8}}     {{g_CarLodLevel}}}                              ||| tr,td,ref,td,code
{{{870CFC}}     {{g_OverBrightEnable}}}                         ||| tr,td,ref,td,code
{{{870D00}}     {{g_BleachByPassEnable}}}                       ||| tr,td,ref,td,code
{{{870D04}}     {{g_TintingEnable}}}                            ||| tr,td,ref,td,code
{{{870D08}}     {{g_FSAALevel}}}                                ||| tr,td,ref,td,code
{{{870D0C}}     {{g_HorizonFogEnable}}}                         ||| tr,td,ref,td,code
{{{870D10}}     {{g_RainEnable}}}                               ||| tr,td,ref,td,code
{{{870D18}}     {{g_TextureFiltering}}}                         ||| tr,td,ref,td,code
{{{870D1C}}     {{g_RacingResolution}}}                         ||| tr,td,ref,td,code
{{{87099C}}     {{g_PerformanceLevel}}}                         ||| tr,td,ref,td,code
{{{870D24}}     {{g_VSyncOn}}}                                  ||| tr,td,ref,td,code
}
}

{5B76F0} also loads registry settings, but only once at boot.                                   ||| ref
It seems to load a special key that I haven't seen before:
{Software\Electronic Arts\EA Games\Need for Speed Underground 2\er}. This key                   ||| code
is not present on my system, so this seems interesting.

.push pre
HKEY key;
DWORD type, lenData;
if (RegOpenKeyExA(HKEY_LOCAL_MACHINE, "Software\\E...2\\er", 0, KEY_READ, &key)) {
	type = REG_SZ; // a null-terminated string
	lenData = 21;
	if (RegQueryValueExA(key, 0, 0, &type, &{86FF8C}, &lenData)) \{                         ||| refplain
		{86FF8C}[20] = 0;                                                               ||| refplain
	} else {
		{86FF8C}[0] = 0;                                                                ||| refplain
	}
}
RegCloseKey(&key);
.pop pre

Then it loads more stuff from the normal key:

{Install Dir} is read. If set, passed to (winapi) {GetLongPathNameA}.                           ||| code,code
and if that succeeds, the value is copied to buffer at {86E9B4}.                                ||| ref

{CD Drive} is read. If set, passed to (winapi) {GetLongPathNameA}.                              ||| code,code
passed to (winapi) {GetLastError} and if that succeeds, the value is copied to {86E8B0}.        ||| code,ref

{NotFirstTime} is read. If set, {870D20} gets set to 1, otherwise 0.                            ||| code,ref
It doesn't check the value in the register key. Then 1 is written to the register key.

{CacheSize} is read. If set, {75D65B} is called with the value. TODO                            ||| code,ref

{SwapSize} is read. If set, proc at {75D65B} is called with the value. TODO                     ||| code,ref

{Language} is read. Then it does something with looping through a language.                     |||code
This took some deciphering but I found out that there is some struct with language
information and associated data. See {language_metadata}.                                       ||| href

{StreamingInstall} is read. Then something with {75DD6F}. TODO                                  ||| code,ref

.push symbols
- {5B76F0 void LoadOtherRegistrySettings()}                                                     ||| func
  Called once during boot, from {5B7A70}                                                        ||| ref

- {5BEA20 void LoadDisplaySettings()}                                                           ||| func
  Loads display settings from windows registry into their variables.
  Only called once, at boot.

- {5BEEA0 void SaveDisplaySettings()}                                                           ||| func
  Stores display settings into windows registry.
  Called multiple times, TODO.

- {86E8B0 char CDDrivePath[4]}                                                                  ||| field

- {86E9B4 char installDirPath[260]}                                                             ||| field

- {86FF8C char someRegValue_er[20]}                                                             ||| field

- {870CB0 char *VERSION}                                                                        ||| field

- {870CB4 char *SIZE}                                                                           ||| field

- {870D20 int notFirstTime}                                                                     ||| field
.pop symbols

.pop section
.push section

{Game region} |||h id=gameregion

List by {571380}:                                                                               ||| ref

.push ul
- region 0: US
- region 2: Korea
- region 3: Japan
- region 4: Taiwan
- region 1,5,6,7,8,9:
.push ul
- language 0: UK
- language 1: France
- language 2: Germany
- language 3: Italy
- language 4: Spain
- language 5: Netherlands
- language 6: Sweden
- language 7: Denmark
.pop ul
- region 11: China
- region 12: Thailand
.pop ul

List by {5B7C40}:                                                                               ||| ref
.push ul
- 0: US
- 2: Korea
- 3: Japan
- 4: Taiwan
- 5: UK/Netherlands/Sweden/Denmark
- 6: France
- 7: Germany
- 8: Italy
- 9: Spain
- 11: China
- 12: Thailand
.pop ul

Then some network region stuff at 7FA740 showed a 14th entry:
.push ul
- 13: South America
.pop ul

.push symbols
- {570A30 int GetGameRegion()}                                                                  ||| func
  {return {864F24};}                                                                            ||| code,refplain
- {570A40 int UseCarUKNames()}                                                                  ||| func
  {return {864F24} == 1 || (4 < {864F24} && {864F24} < 10);}                                    ||| code,refplain,refplain,refplain
  Unsure about this name.

- {571380 char *GetCountryCode()}                                                               ||| func

- {5B7C40 int OpenPatchesWebsite()}                                                             ||| func
No idea where this is used, TODO
.push pre
int OpenPatchesWebsite()
{
	char *url;

	switch (GetGameRegion()) {
	case 0: url = "http://patches.ea.com/nfs_underground2/EN-US/home.html"; break;
	case 2: url = "http://patches.ea.com/nfs_underground2/KO/home.html"; break;
	case 3: url = "http://patches.ea.com/nfs_underground2/JP/home.html"; break;
	case 4: url = "http://patches.ea.com/nfs_underground2/TW/home.html"; break;
	case 5:
		switch (GetCurrentLoadedLanguage()) {
		case 0: url = "http://patches.ea.com/nfs_underground2/EN-UK/home.html"; break;
		case 5: url = "http://patches.ea.com/nfs_underground2/NL/home.html"; break;
		case 6: url = "http://patches.ea.com/nfs_underground2/SV/home.html"; break;
		case 7: url = "http://patches.ea.com/nfs_underground2/DA/home.html"; break;
		default: goto def;
		}
		break;
	case 6: url = "http://patches.ea.com/nfs_underground2/FR/home.html"; break;
	case 7: url = "http://patches.ea.com/nfs_underground2/DE/home.html"; break;
	case 8: url = "http://patches.ea.com/nfs_underground2/IT/home.html"; break;
	case 9: url = "http://patches.ea.com/nfs_underground2/ES/home.html"; break;
	case 11: url = "http://patches.ea.com/nfs_underground2/ZH/home.html"; break;
	case 12: url = "http://patches.ea.com/nfs_underground2/TH/home.html"; break;
def:
	default: /*eax??*/ break;
	}
	return ShellExecuteA(NULL, "open", url, NULL, NULL, SW_SHOWNORMAL);
}
.pop pre
- {864F24 int _gameRegion}                                                                      ||| field
.pop symbols

.pop section
.push section

{Bin data}   ||| h id=bindata

Lots of data is in {.bin} files. These files can contain multiple {struct BinSection} entries.  ||| code,refto

.push pre
{struct BinSectionHeader} \{                                                                    ||| mkref
        int {magic};                                                                            ||| mkref name=structBinSectionHeader+0
        int {size};                                                                             ||| mkref name=structBinSectionHeader+4
};

{struct BinSection} \{                                                                          ||| mkref
        {struct BinSectionHeader} {header};                                                     ||| refto,mkref name=structBinSection+0
        char {data}[{structBinSectionHeader+4}];                                                ||| mkref name=structBinSection+8,refto
};

{struct BinSectionHandler} \{                                                                   ||| mkref
        int {magic};                                                                            ||| mkref name=structBinSectionHandler+0
        int (*{loadfunc})({struct BinSection}*));                                               ||| mkref name=structBinSectionHandler+4,refto
        int (*{unloadfunc})({struct BinSection}*));                                             ||| mkref name=structBinSectionHandler+8,refto
};

{struct BinSectionMagicMapEntry} \{                                                             ||| mkref
        {struct BinSectionMagicMapEntry} *{nextEntry};                                          ||| refto,mkref name=structBinSectionMagicMapEntry+0
        {struct BinSectionHandler} {value};                                                     ||| refto,mkref name=structBinSectionMagicMapEntry+4
};
.pop pre

These are all the sections that are in the {LANGUAGES/English.bin} file:                        ||| code

.push pre
offset 00000: section 00039000 size 3D230
offset 3D238: section 00000000 size 40
offset 3D280: section 00030201 size FF0
offset 3E278: section 00000000 size 0
offset 3E280: section 00030201 size 1270
offset 3F4F8: section 00000000 size 0
offset 3F500: section 00030201 size 370
offset 3F878: section 00000000 size 0
offset 3F880: section 00030201 size 1070
offset 408F8: section 00000000 size 0
offset 40900: section 00030201 size A70
offset 41378: section 00000000 size 0
offset 41380: section 00030201 size CF0
.pop pre

This is output by an early version of {nfsu2-re-binfiles/main.c}.                               ||| hookfileref

Note that the offset also increments by 8, being {sizeof {struct BinSectionHeader}}.            ||| code,refto

Section magic {0} seems to be just for padding/alignment uses.                                  ||| code

.push symbols

- {43C0B0 void __thiscall RegisterBinSectionHandler({struct BinSectionHandler} *this,           ||| func,refto
                                {struct BinSectionHandler} handler)}                            ||| refto
  .push pre
  int magic, index;

  magic = handler.{structBinSectionHandler+0};                                                  ||| refto
  index = 0x3F & ((magic >> 0x6) + (magic + (magic >> 0xC)));
  this->{structBinSectionMagicMapEntry+4} = handler;                                            ||| refto
  this->{structBinSectionMagicMapEntry+0} = {828050}[index];                                    ||| refto,refplain
  {828050}[index] = this;                                                                       ||| refplain
  {827FE8}++;                                                                                   ||| refplain
  .pop pre

- {408200 int LoadBinSection34B00({struct BinSection} *binsection)}                             ||| func,refto

- {408220 int UnloadBinSection34B00({struct BinSection} *binsection)}                           ||| func,refto

- {40A460 int LoadBinSection3A000({struct BinSection} *binsection)}                             ||| func,refto

- {40A4A0 int UnloadBinSection3A000({struct BinSection} *binsection)}                           ||| func,refto

- {431870 int LoadBinSection80037050({struct BinSection} *binsection)}                          ||| func,refto

- {4318D0 int UnloadBinSection80037050({struct BinSection} *binsection)}                        ||| func,refto

- {432080 int LoadBinSection37140({struct BinSection} *binsection)}                             ||| func,refto

- {4320C0 int UnloadBinSection37140({struct BinSection} *binsection)}                           ||| func,refto

- {4325C0 int UnloadBinSection80037020({struct BinSection} *binsection)}                        ||| func,refto

- {4348F0 int LoadBinSection0E34010({struct BinSection} *binsection)}                           ||| func,refto
  Uses {Anim_CNFSAnimBank_SlotPool}                                                             ||| code

- {4349A0 int UnloadBinSection0E34010({struct BinSection} *binsection)}                         ||| func,refto

- {434E10 int LoadBinSection0E34009({struct BinSection} *binsection)}                           ||| func,refto
  Uses {Anim_CAnimSkeleton_SlotPool}                                                            ||| code

- {435A50 int UnloadBinSection37110({struct BinSection} *binsection)}                           ||| func,refto

- {435A90 int LoadBinSection37080({struct BinSection} *binsection)}                             ||| func,refto

- {4365B0 int UnloadBinSection0E34009({struct BinSection} *binsection)}                         ||| func,refto

- {4377F0 int LoadBinSection80037020({struct BinSection} *binsection)}                          ||| func,refto

- {4381B0 int LoadBinSection37100({struct BinSection} *binsection)}                             ||| func,refto

- {438720 int UnloadBinSection37150({struct BinSection} *binsection)}                           ||| func,refto

- {438C20 int UnloadBinSection37080({struct BinSection} *binsection)}                           ||| func,refto

- {438C60 int UnloadBinSection37090({struct BinSection} *binsection)}                           ||| func,refto

- {439D70 int UnloadBinSection37100({struct BinSection} *binsection)}                           ||| func,refto

- {43A1F0 int LoadBinSection37150({struct BinSection} *binsection)}                             ||| func,refto

- {43A260 int LoadBinSection37110({struct BinSection} *binsection)}                             ||| func,refto

- {43A460 int LoadBinSection37090({struct BinSection} *binsection)}                             ||| func,refto

- {43C0A0 int LoadUnloadBinSection0({struct BinSection} *binsection)}                           ||| func,refto
  Nop handler that returns 1 if {binsection->{structBinSection+0}} is 0.                        ||| code,refto

- {43C100 {struct BinSectionMagicMapEntry} *FindBinSectionHandler(int magic)}                   ||| func,refto
  Used in {570D70} and {577B10}.                                                                ||| ref,ref
  .push pre
  {struct BinSectionMagicMapEntry} *entry;                                                      ||| refto
  int index;

  index = 0x3F & ((magic >> 0x6) + (magic + (magic >> 0xC)));
  entry = {828050}[index];                                                                      ||| refplain
  while (entry) {
          if (entry->{structBinSectionMagicMapEntry+4}.{structBinSectionHandler+0} == magic) \{ ||| refto,refto
                  return entry;
          }
          entry = entry->{structBinSectionMagicMapEntry+0};                                     ||| refto
  }
  return NULL;
  .pop pre


- {44AB60 int LoadBinSection8003B200_8003B201_8003B202({struct BinSection} *binsection)}        ||| func,refto

- {452E90 int UnloadBinSection8003B200_8003B201_8003B202({struct BinSection} *binsection)}      ||| func,refto

- {47BC30 int LoadBinSection8003B500({struct BinSection} *binsection)}                          ||| func,refto

- {482D20 int UnloadBinSection8003B500({struct BinSection} *binsection)}                        ||| func,refto
  Does a function call on {82B884}.                                                             ||| ref

- {48A280 int LoadBinSection3B700({struct BinSection} *binsection)}                             ||| func,refto

- {48A2B0 int UnloadBinSection3B700({struct BinSection} *binsection)}                           ||| func,refto

- {48B4A0 int LoadBinSection34202({struct BinSection} *binsection)}                             ||| func,refto

- {48B740 int UnloadBinSection34202({struct BinSection} *binsection)}                           ||| func,refto

- {48E070 int LoadBinSection135200_80135100_80135000({struct BinSection} *binsection)}          ||| func,refto

- {48E270 int UnloadBinSection135200_80135100_80135000({struct BinSection} *binsection)}        ||| func,refto

- {491C70 int LoadBinSection80035000_80035010_35021_35020({struct BinSection} *binsection)}     ||| func,refto

- {491D50 int UnloadBinSection80035000_80035010_35021_35020({struct BinSection} *binsection)}   ||| func,refto

- {494060 int LoadBinSection80134000({struct BinSection} *binsection)}                          ||| func,refto

- {4940E0 int UnloadBinSection80134000({struct BinSection} *binsection)}                        ||| func,refto

- {494EA0 int LoadBinSectionB3300000_B332000_B0300100({struct BinSection} *binsection)}         ||| func,refto

- {495040 int UnloadBinSectionB3300000_B332000_B0300100({struct BinSection} *binsection)}       ||| func,refto

- {500290 int UnloadBinSection80034A10({struct BinSection} *binsection)}                        ||| func,refto

- {5108A0 int LoadBinSection30230({struct BinSection} *binsection)}                             ||| func,refto

- {5108C0 int UnloadBinSection30230({struct BinSection} *binsection)}                           ||| func,refto

- {5108E0 int LoadBinSection30231({struct BinSection} *binsection)}                             ||| func,refto

- {510900 int UnloadBinSection30231({struct BinSection} *binsection)}                           ||| func,refto

- {512C00 int LoadBinSection80034A10({struct BinSection} *binsection)}                          ||| func,refto
  This gets loaded once (enforced by {8641F4}), data resides in {GLOBAL/GLOBALB.BUN}.           ||| ref,code
  Career/Sponsor/DVD/Magazines related. The data in this section is more sections, with magic
  {0x34A11-0x34A1F} (excluding {0x34A13}),                                                      ||| code,code

- {51BD30 int LoadBinSection30203_30210({struct BinSection} *binsection)}                       ||| func,refto
  Loads FNG packages?

- {51C610 int UnloadBinSection39020({struct BinSection} *binsection)}                           ||| func,refto

- {52CD90 int LoadBinSection39020({struct BinSection} *binsection)}                             ||| func,refto

- {5425A0 int UnloadBinSection30203_30210({struct BinSection} *binsection)}                     ||| func,refto
  Unloads FNG packages?

- {56C4C0 int LoadBinSection34A07({struct BinSection} *binsection)}                             ||| func,refto

- {56C4E0 int UnloadBinSection34A07({struct BinSection} *binsection)}                           ||| func,refto

- {570D70 int LoadBinSection({struct BinSection} *binsection)}                                  ||| func,refto
  Only called from {577AB0}.                                                                    ||| ref
  .push pre
  {struct BinSectionMagicMapEntry} *entry;                                                      ||| refto
  int i;

  entry = {43C100}(binsection->{structBinSection+0}.{structBinSectionHeader+0});                ||| refplain,refto,refto
  if (entry) {
          return entry->{structBinSectionMagicMapEntry+4}.{structBinSectionHandler+4}(binsection);||| refto,refto
  }
  for (i = 0; i < 36; i++) {
          if ({7FA858}[i](binsection)) \{                                                       ||| refplain
                  return 1;
          }
  }
  return 0;
  .pop pre
  Returns 1 when something managed to load it.
  Some loaders that are in the map are also in the array.

- {577B10 void UnloadBinSection(void *arg1, void *arg2)}                                        ||| func
  Does things and calls the bin section unload handler, similar to {570D70}.                    ||| ref

- {579340 int LoadBinSection39100_39101_39102({struct BinSection} *binsection)}                 ||| func,refto

- {579350 int UnloadBinSection39100_39101_39102({struct BinSection} *binsection)}               ||| func,refto

- {57A470 int LoadBinSection8003B000({struct BinSection} *binsection)}                          ||| func,refto

- {57BCE0 int UnloadBinSection8003B000({struct BinSection} *binsection)}                        ||| func,refto

- {599440 int LoadBinSection80034A30({struct BinSection} *binsection)}                          ||| func,refto

- {5994D0 int UnloadBinSection80034A30({struct BinSection} *binsection)}                        ||| func,refto

- {5A1750 int LoadBinSection80034020({struct BinSection} *binsection)}                          ||| func,refto

- {5A1860 int UnloadBinSection80034020({struct BinSection} *binsection)}                        ||| func,refto

- {5A8BD0 int UnloadBinSection34026_34027({struct BinSection} *binsection)}                     ||| func,refto

- {5B0E30 int LoadBinSection34026_34027({struct BinSection} *binsection)}                       ||| func,refto

- {5D3EB0 int LoadBinSection34201({struct BinSection} *binsection)}                             ||| func,refto

- {5D3EF0 int UnloadBinSection34201({struct BinSection} *binsection)}                           ||| func,refto

- {5D6440 int UnloadBinSection34108({struct BinSection} *binsection)}                           ||| func,refto

- {5D8470 int LoadBinSection34146({struct BinSection} *binsection)}                             ||| func,refto

- {5D84D0 int UnoadBinSection34146({struct BinSection} *binsection)}                            ||| func,refto

- {5DA490 int LoadBinSection80034147({struct BinSection} *binsection)}                          ||| func,refto

- {5DB2E0 int LoadBinSection34108({struct BinSection} *binsection)}                             ||| func,refto

- {5DB5A0 int UnloadBinSection80034150({struct BinSection} *binsection)}                        ||| func,refto

- {5DBF60 int LoadBinSection80036000({struct BinSection} *binsection)}                          ||| func,refto

- {5DC050 int UnloadBinSection80036000({struct BinSection} *binsection)}                        ||| func,refto

- {5DEB80 int LoadBinSection34121_34122_34123_34124({struct BinSection} *binsection)}           ||| func,refto

- {5DEE00 int UnloadBinSection80034147({struct BinSection} *binsection)}                        ||| func,refto

- {5DEF30 int LoadBinSection_34110_34111_34112_34113({struct BinSection} *binsection)}          ||| func,refto

- {5DF8A0 int LoadBinSection80034100_34107({struct BinSection} *binsection)}                    ||| func,refto

- {5DFBA0 int UnloadBinSection80034100_34107({struct BinSection} *binsection)}                  ||| func,refto

- {5E0190 int LoadBinSection34250({struct BinSection} *binsection)}                             ||| func,refto

- {5E0220 int UnloadBinSection34250({struct BinSection} *binsection)}                           ||| func,refto

- {5E4820 int UnloadBinSection34121_34122_34123_34124({struct BinSection} *binsection)}         ||| func,refto

- {5E4E60 int UnloadBinSection_34110_34111_34112_34113({struct BinSection} *binsection)}        ||| func,refto

- {5E81C0 int LoadBinSection80034130_3412F({struct BinSection} *binsection)}                    ||| func,refto
  Called when exiting to main menu after being in race/freeroam.

- {5E8660 int UnloadBinSection80034130_3412F({struct BinSection} *binsection)}                  ||| func,refto

- {5E9C10 int LoadBinSection80034150_thiscall({struct BinSection} *binsection)}                 ||| func,refto

- {5EA0F0 int LoadBinSection80034150({struct BinSection} *binsection)}                          ||| func,refto

- {60B810 int LoadBinSection8003B600({struct BinSection} *binsection)}                          ||| func,refto

- {60BAC0 int UnloadBinSection8003B600({struct BinSection} *binsection)}                        ||| func,refto

- {61B460 int UnloadBinSection34600_34601_80034602({struct BinSection} *binsection)}            ||| func,refto

- {61C3C0 int LoadBinSection30220({struct BinSection} *binsection)}                             ||| func,refto

- {61C420 int UnloadBinSection30220({struct BinSection} *binsection)}                           ||| func,refto

- {61CB50 int LoadBinSection34030({struct BinSection} *binsection)}                             ||| func,refto

- {61CB90 int UnloadBinSection34030({struct BinSection} *binsection)}                           ||| func,refto

- {636BE0 int LoadBinSection34600_34601_34608_34609_34607_80034602({struct BinSection} *binsection)} ||| func,refto
  Sets {8A1CCC} data.                                                                           ||| ref

- {77B620 void init_function_77B620_registerBinSectionHandler0()}                               ||| func
  Registers {7EB3F4} (without using {43C0B0}).                                                  ||| ref,ref

- {77CB00 void init_function_77CB00_registerBinSectionHandler80134000()}                        ||| func

- {77CC20 void init_function_77CC20_registerBinSectionHandler135200()}                          ||| func

- {77CC40 void init_function_77CC40_registerBinSectionHandler80135100()}                        ||| func

- {77CC60 void init_function_77CC60_registerBinSectionHandler80135000()}                        ||| func

- {77CD60 void init_function_77CD60_registerBinSectionHandlerB3300000()}                        ||| func

- {77CDA0 void init_function_77CDA0_registerBinSectionHandlerB0300100()}                        ||| func

- {77CD80 void init_function_77CD80_registerBinSectionHandlerB332000()}                         ||| func

- {77D960 void init_function_77D960_registerBinSectionHandler39100()}                           ||| func

- {77D980 void init_function_77D980_registerBinSectionHandler39101()}                           ||| func

- {77D9A0 void init_function_77D9A0_registerBinSectionHandler39102()}                           ||| func

- {77E190 void init_function_77E190_registerBinSectionHandler34026()}                           ||| func

- {77E1B0 void init_function_77E1B0_registerBinSectionHandler34027()}                           ||| func

- {77E6C0 void init_function_77E6C0_registerBinSectionHandler80034140()}                        ||| func

- {77E6E0 void init_function_77E6E0_registerBinSectionHandler3412F()}                           ||| func

- {77E720 void init_function_77E720_registerBinSectionHandler34146()}                           ||| func

- {77E740 void init_function_77E740_registerBinSectionHandler34201()}                           ||| func

- {77E7A0 void init_function_77E7A0_registerBinSectionHandler80034147()}                        ||| func

- {77E7D0 void init_function_77E7D0_registerBinSectionHandler34110()}                           ||| func

- {77E7F0 void init_function_77E7F0_registerBinSectionHandler34113()}                           ||| func

- {77E810 void init_function_77E781_registerBinSectionHandler34111()}                           ||| func

- {77E830 void init_function_77E783_registerBinSectionHandler34112()}                           ||| func

- {77E890 void init_function_77E890_registerBinSectionHandler34108()}                           ||| func

- {77E8B0 void init_function_77E8B0_registerBinSectionHandler80034100()}                        ||| func

- {77E8D0 void init_function_77E8D0_registerBinSectionHandler34107()}                           ||| func

- {7EB3F4 {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntry0}                     ||| field,refto
  Map entry with {43C0A0} as both {structBinSectionHandler+4} and {structBinSectionHandler+8}.  ||| ref,refto,refto

- {7FA858 int (*binSectionLoadFuncs)({struct BinSection}*)[36]}                                 ||| field,refto
  Called by {570D70}.                                                                           ||| ref
  These funcs return 1 if they can process the data.
  .push pre
  int (*{7FA858})({struct BinSection}*)[] = \{                                                  ||| refplain,refto
  /*0*/   {52CD00},                                                                             ||| refplain
  /*1*/   {491C70},                                                                             ||| refplain
  /*2*/   {5DBF60},                                                                             ||| refplain
  /*3*/   {5A1750},                                                                             ||| refplain
  /*4*/   {5EA0F0},                                                                             ||| refplain
  /*5*/   {4348F0},                                                                             ||| refplain
  /*6*/   {434E10},                                                                             ||| refplain
  /*7*/   {4377F0},                                                                             ||| refplain
  /*8*/   {431870},                                                                             ||| refplain
  /*9*/   {435A90},                                                                             ||| refplain
  /*10*/  {43A460},                                                                             ||| refplain
  /*11*/  {43A260},                                                                             ||| refplain
  /*12*/  {432080},                                                                             ||| refplain
  /*13*/  {43A1F0},                                                                             ||| refplain
  /*14*/  {4381B0},                                                                             ||| refplain
  /*15*/  {48B4A0},                                                                             ||| refplain
  /*16*/  {636BE0},                                                                             ||| refplain
  /*17*/  {599440},                                                                             ||| refplain
  /*18*/  {56C4C0},                                                                             ||| refplain
  /*19*/  {61CB50},                                                                             ||| refplain
  /*20*/  {5DEB80},                                                                             ||| refplain
  /*21*/  {408200},                                                                             ||| refplain
  /*22*/  {5125B0},                                                                             ||| refplain
  /*23*/  {5E0190},                                                                             ||| refplain
  /*24*/  {40A460},                                                                             ||| refplain
  /*25*/  {51BD30},                                                                             ||| refplain
  /*26*/  {57A470},                                                                             ||| refplain
  /*27*/  {44AB60},                                                                             ||| refplain
  /*28*/  {512C00},                                                                             ||| refplain
  /*29*/  {52CD90},                                                                             ||| refplain
  /*30*/  {47BC30},                                                                             ||| refplain
  /*31*/  {61C3C0},                                                                             ||| refplain
  /*32*/  {60B810},                                                                             ||| refplain
  /*33*/  {48A280},                                                                             ||| refplain
  /*34*/  {5108A0},                                                                             ||| refplain
  /*35*/  {5108E0},                                                                             ||| refplain
  }
  .pop pre

- {7FA8E8 int (*binSectionUnloadFuncs)({struct BinSection}*)[36]}                               ||| field,refto
  Called by {577B10}.                                                                           ||| ref
  These funcs return 1 if they can process the data.
  .push pre
  int (*{7FA8E8})({struct BinSection}*)[] = \{                                                  ||| refplain,refto
  /*0*/   {537290},                                                                             ||| refplain
  /*1*/   {491D50},                                                                             ||| refplain
  /*2*/   {5DC050},                                                                             ||| refplain
  /*3*/   {5A1860},                                                                             ||| refplain
  /*4*/   {5DB5A0},                                                                             ||| refplain
  /*5*/   {4349A0},                                                                             ||| refplain
  /*6*/   {4365B0},                                                                             ||| refplain
  /*7*/   {4325C0},                                                                             ||| refplain
  /*8*/   {4318D0},                                                                             ||| refplain
  /*9*/   {438C20},                                                                             ||| refplain
  /*10*/  {438C60},                                                                             ||| refplain
  /*11*/  {435A50},                                                                             ||| refplain
  /*12*/  {4320C0},                                                                             ||| refplain
  /*13*/  {438720},                                                                             ||| refplain
  /*14*/  {439D70},                                                                             ||| refplain
  /*15*/  {48B740},                                                                             ||| refplain
  /*16*/  {61B460},                                                                             ||| refplain
  /*17*/  {5994D0},                                                                             ||| refplain
  /*18*/  {56C4E0},                                                                             ||| refplain
  /*19*/  {61CB90},                                                                             ||| refplain
  /*20*/  {5E4820},                                                                             ||| refplain
  /*21*/  {408220},                                                                             ||| refplain
  /*22*/  {4FFAE0},                                                                             ||| refplain
  /*23*/  {5E0220},                                                                             ||| refplain
  /*24*/  {40A4A0},                                                                             ||| refplain
  /*25*/  {5425A0},                                                                             ||| refplain
  /*26*/  {57BCE0},                                                                             ||| refplain
  /*27*/  {452E90},                                                                             ||| refplain
  /*28*/  {500290},                                                                             ||| refplain
  /*29*/  {51C610},                                                                             ||| refplain
  /*30*/  {482D20},                                                                             ||| refplain
  /*31*/  {61C420},                                                                             ||| refplain
  /*32*/  {60BAC0},                                                                             ||| refplain
  /*33*/  {48A2B0},                                                                             ||| refplain
  /*34*/  {5108C0},                                                                             ||| refplain
  /*35*/  {510900},                                                                             ||| refplain
  }
  .pop pre

- {827FE8 char numBinSectionLoadFunctionsInMagicMapBucket[64]}                                  ||| field
  Written to, but never read. Functions seem to just check if
  {{struct BinSectionMagicMapEntry}.{structBinSectionMagicMapEntry+0}}                          ||| code,refto,refto
  is 0 instead of counting entries.

- {828050 {struct BinSectionMagicMapEntry} *binSectionMagicMap[64]}                             ||| field,refto

- {82DBA0 {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntryB3300000}              ||| field,refto

- {82DBB0 {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntry80135000}              ||| field,refto

- {830AF8 {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntry80135100}              ||| field,refto

- {830B08 {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntryB0300100}              ||| field,refto

- {835784 {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntry135200}                ||| field,refto

- {835840 {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntry80134000}              ||| field,refto

- {8358D0 {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntryB3320000}              ||| field,refto

- {8641F4 int binSection80034A10loaded}                                                         ||| field
  Ensures this section only gets loaded once.

- {8653A0 {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntry39101}                 ||| field,refto

- {865470 {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntry39102}                 ||| field,refto

- {86596C {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntry39100}                 ||| field,refto

- {86B4AC {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntry34027}                 ||| field,refto

- {86B580 {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntry34026}                 ||| field,refto

- {88A2AC {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntry80034130}              ||| field,refto

- {88E9B4 {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntry80034100}              ||| field,refto

- {88E9CC {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntry80034147}              ||| field,refto

- {88E9DC {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntry34113}                 ||| field,refto

- {88E9EC {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntry3412F}                 ||| field,refto

- {88EA74 {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntry34112}                 ||| field,refto

- {88EA94 {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntry34107}                 ||| field,refto

- {88EAA4 {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntry34108}                 ||| field,refto

- {88EAB4 {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntry34110}                 ||| field,refto

- {88EAC4 {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntry34146}                 ||| field,refto

- {88F27C {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntry34111}                 ||| field,refto

- {88F750 {struct BinSectionMagicMapEntry} binSectionHandlerMagicMapEntry34201}                 ||| field,refto
.pop symbols

.pop section
.push section

{Language} ||| h id=language

There seems to be no way to change the language, except for changing the value
in the registry? See {registry}. Perhaps it is only set                                 ||| href
when the game is installed?

.push section

{Language metadata}  ||| h id=language_metadata

Thanks to code where it reads the Registry, I found following data:

.push pre
{struct LanguageData} \{                                                                ||| mkref
	char *pName;
	int {val1}; //??                                                                ||| mkref name=structLanguageData+4
	int region;
};

{struct LanguageData} {7FCA08}[] = \{                                                   ||| refto,refplain
        { "English US",            0,        0 },
        { "English UK",            0,        5 },
        { "French",                1,        6 },
        { "German",                2,        7 },
        { "Italian",               3,        8 },
        { "Spanish",               4,        9 },
        { "Swedish",               6,        5 },
        { "Danish",                7,        5 },
        { "Dutch",                 5,        5 },
        { "Korean",                8,        2 },
        { "Chinese (Traditional)", 9,        4 },
        { "English China",         9,        11 },
        { "Japanese",              10,       3 },
        { "Thai",                  11,       12 },
        { 0,                       0,        0 },
};
.pop pre

The value stored in the registry for {Language} is checked against                      ||| code
all language strings in the above data. The matching language's
{structLanguageData+4} gets stored in {7FCA00}, or 0 when the                           ||| refto,ref
name stored in the registry didn't match any names.

After chasing usages of a region related proc,
I found more language data which is being used in {4FF680}.                             ||| ref
They seem to fit into three more structs.

.push pre
/*from hashes, prefixed with HASH_*/
#define HASH_CONDUITMDITC_TT21I 0x5B9D88B9
#define HASH_font_impact36 0x0920075C
#define HASH_CONDUITMDITC_TT14I 0x5B9D84DB
#define HASH_FONT_CONDUITMDITCTT38BI 0x9583AA1A
#define HASH_arial 0xA87927BE
#define HASH_arial12 0xAB6215C1
#define HASH_lcd_let48 0xBBBA71C2
#define HASH_conduitmditc_tt14i_korean 0xDCA5485A
#define HASH_conduitmditc_tt21i_korean 0x833A8678
#define HASH_conduitmditc_tt14i_chinese 0xF88A75F9
#define HASH_conduitmditc_tt21i_chinese 0x71C777D7
#define HASH_conduitmditc_tt14i_japanese 0x743BF1C1
#define HASH_conduitmditc_tt21i_japanese 0x15192F5F
#define HASH_conduitmditc_tt14i_thailand 0xA73823FF
#define HASH_conduitmditc_tt21i_thailand 0x4815619D

{struct LanguageStruct7F6DE8} \{                                                                ||| mkref
	int {fonthash};                                                                         ||| mkref name=LanguageStruct7F6DE8+0
	int {field_1};                                                                          ||| mkref name=LanguageStruct7F6DE8+4
};

{struct LanguageStruct7F6DE8} {7F6DE8}[] = \{                                                   ||| refto,ref
        { HASH_CONDUITMDITC_TT21I,          0x0 },
        { HASH_font_impact36,               0x40000 },
        { HASH_CONDUITMDITC_TT14I,          0x10000 },
        { HASH_FONT_CONDUITMDITCTT38BI,     0x100000 },
        { HASH_arial,                       0x10000 },
        { HASH_arial12,                     0x10000 },
        { HASH_lcd_let48,                   0x4000 },
        { HASH_conduitmditc_tt14i_korean,   0x40000 },
        { HASH_conduitmditc_tt21i_korean,   0x80000 },
        { HASH_conduitmditc_tt14i_chinese,  0x40000 },
        { HASH_conduitmditc_tt21i_chinese,  0x80000 },
        { HASH_conduitmditc_tt14i_japanese, 0x40000 },
        { HASH_conduitmditc_tt21i_japanese, 0x80000 },
        { HASH_conduitmditc_tt14i_thailand, 0x40000 },
        { HASH_conduitmditc_tt21i_thailand, 0x80000 },
};

{struct LanguageStruct7F6E60} \{                                                                ||| mkref
	int {data}[28];                                                                         ||| mkref name=structLanguageStruct7F6E60+0
};

{struct LanguageFileData} \{                                                                    ||| mkref
	int id;
	char *filecode;
	char *binfile;
	{struct LanguageStruct7F6E60} *{pStruct7F6E60};                                         ||| refto,mkref name=structLanguageFileData+C
};

{7F6E60}[0][0] = HASH_CONDUITMDITC_TT21I;                                                       ||| refplain
{7F6E60}[0][1] = HASH_arial;                                                                    ||| refplain
{7F6E60}[0][2] = HASH_CONDUITMDITC_TT14I;                                                       ||| refplain
{7F6E60}[0][3] = HASH_lcd_let48;                                                                ||| refplain
{7F6E60}[0][8] = HASH_FONT_CONDUITMDITCTT38BI;                                                  ||| refplain
{7F6E60}[0][16] = HASH_arial12;                                                                 ||| refplain
{7F6E60}[0][17] = HASH_font_impact36;                                                           ||| refplain
{7F6E60}[1][0] = HASH_conduitmditc_tt21i_korean;                                                ||| refplain
{7F6E60}[1][1] = HASH_arial;                                                                    ||| refplain
{7F6E60}[1][2] = HASH_conduitmditc_tt14i_korean;                                                ||| refplain
{7F6E60}[1][3] = HASH_lcd_let48;                                                                ||| refplain
{7F6E60}[1][16] = HASH_arial12;                                                                 ||| refplain
{7F6E60}[1][17] = HASH_font_impact36;                                                           ||| refplain
{7F6E60}[2][0] = HASH_conduitmditc_tt21i_japanese;                                              ||| refplain
{7F6E60}[2][1] = HASH_arial;                                                                    ||| refplain
{7F6E60}[2][2] = HASH_conduitmditc_tt14i_japanese;                                              ||| refplain
{7F6E60}[2][3] = HASH_lcd_let48;                                                                ||| refplain
{7F6E60}[2][8] = HASH_FONT_CONDUITMDITCTT38BI;                                                  ||| refplain
{7F6E60}[2][16] = HASH_arial12;                                                                 ||| refplain
{7F6E60}[2][17] = HASH_font_impact36;                                                           ||| refplain
{7F6E60}[3][0] = HASH_conduitmditc_tt21i_chinese;                                               ||| refplain
{7F6E60}[3][1] = HASH_arial;                                                                    ||| refplain
{7F6E60}[3][2] = HASH_conduitmditc_tt14i_chinese;                                               ||| refplain
{7F6E60}[3][3] = HASH_lcd_let48;                                                                ||| refplain
{7F6E60}[3][16] = HASH_arial12;                                                                 ||| refplain
{7F6E60}[3][17] = HASH_font_impact36;                                                           ||| refplain

{struct LanguageFileData} {7F7020}[] = \{                                                       ||| refto,refplain
	\{  0, "ENGLISH", "LANGUAGES\\ENGLISH.BIN", {7F6E60} + 0 \},                            ||| refplain
	\{  1, "FRENCH", "LANGUAGES\\FRENCH.BIN", {7F6E60} + 0 \},                              ||| refplain
	\{  2, "GERMAN", "LANGUAGES\\GERMAN.BIN", {7F6E60} + 0 \},                              ||| refplain
	\{  3, "ITALIAN", "LANGUAGES\\ITALIAN.BIN", {7F6E60} + 0 \},                            ||| refplain
	\{  4, "SPANISH", "LANGUAGES\\SPANISH.BIN", {7F6E60} + 0 \},                            ||| refplain
	\{  5, "DUTCH", "LANGUAGES\\DUTCH.BIN", {7F6E60} + 0 \},                                ||| refplain
	\{  6, "SWEDISH", "LANGUAGES\\SWEDISH.BIN", {7F6E60} + 0 \},                            ||| refplain
	\{  7, "DANISH", "LANGUAGES\\DANISH.BIN", {7F6E60} + 0 \},                              ||| refplain
	\{  8, "KOREAN", "LANGUAGES\\KOREAN.BIN", {7F6E60} + 1 \},                              ||| refplain
	\{  9, "CHINESE", "LANGUAGES\\CHINESE.BIN", {7F6E60} + 3 \},                            ||| refplain
	\{ 10, "JAPANESE", "LANGUAGES\\JAPANESE.BIN", {7F6E60} + 2 \},                          ||| refplain
	/*there is no Thai entry here?*/
};
.pop pre

In {4FF680}, {7F7020} is searched. If {570A30} is 2, the entry with id 8 is searched,           ||| ref,ref,ref
otherwise id 0 is searched.
When it's not found the game will segfault because of the code below:

.push ida
{.text:004FF6A2}                 jl      short loc_4FF693                                       ||| text
{.text:004FF6A4} loc_4FF6A4:                                                                    ||| text
{.text:004FF6A4}                 xor     edx, edx                                               ||| text
{.text:004FF6A6} loc_4FF6A6:                                                                    ||| text
{.text:004FF6A6}                 mov     ecx, [edx+{0Ch}]                                       ||| text,num
.pop ida

Then {{struct LanguageFileData}.{structLanguageFileData+C}} is read.                            ||| code,refto,refto
Its {{structLanguageStruct7F6E60+0}[0]} value is read and then a                                ||| code,refto
matching entry in {7F6DE8} is searched.                                                         ||| ref
More stuff is read is a loop and reset and I lost track.
Eventually something is called with string {LanguageMemoryPool}.                                ||| code

{7983D0 aLanguageselect db 'LanguageSelectScreen',0 TODO}                                       ||| strong

.push symbols
- {4FF680 void LoadLanguageSomething()}                                                         ||| func
  TODO

- {512520 LoadLanguageAtBoot?}                                                                  ||| func
  TODO

- {7F6DE8 {struct LanguageStruct7F6DE8} struct7F6DE8[15]}                                       ||| field,refto

- {7F6E60 {struct LanguageStruct7F6E60} struct7F6E60[4]}                                        ||| field,refto

- {7FCA00 int languageIndex}                                                                    ||| field

- {7FCA08 {struct LanguageData} languageData[15]}                                               ||| field,refto

- {7F7020 {struct LanguageFileData} languageFileData[11]}                                       ||| field,refto
.pop symbols

.pop section
.push section

{Language files}       ||| h id=language_files

The language strings are in a bin section with magic {0x39000}, and is structured like this:    ||| code

.push pre
{struct BinDataLanguage39000} header;                                                           ||| refto
char unknown[header.{structBinDataLanguage39000+8} - sizeof(header)];                           ||| refto
{struct LanguageTableEntry} tableEntries[header.{structBinDataLanguage39000+4}];                ||| refto,refto
char *strings; /*all zero-terminated strings after each other*/
.pop pre

The {tableEntries} are sorted (low hash to high hash),                                          ||| code
required because a binary search is used at lookup.

.push ida
{.text:00497766}                 push    {04B5DE3E9h} {; hash (SMS_SUBJECT_HEADER)}             ||| text,num,comment
{.text:0049776B}                 lea     eax, [esp+{104h}+{buffer}]                             ||| text,num,str
{.text:00497772}                 push    {80h}             ; {destlen}                          ||| text,num,comment
{.text:00497777}                 push    eax             ; {dest}                               ||| text,comment
{.text:00497778}                 call    {4FFA50}                                               ||| text,refplain
.pop ida

Loading is done in {5125B0}.                                                                    ||| ref
See {language_english.txt} for all {LANGUAGES/English.bin} strings by their hash.               ||| a href=language_english.txt,code
(This was generated by an early version of {nfsu2-re-binfiles/main.c})                          ||| hookfileref

The hashes seem to be made with the case insensitive hash function {43DB50}.                    ||| ref
The original labels are also stored as a language file in {LANGUAGES/Labels.bin}                ||| code

.push pre
{struct BinDataLanguage39000} \{                                                                ||| mkref
        int {field_0};                                                                          ||| mkref name=structBinDataLanguage39000+0
        int {numStrings};                                                                       ||| mkref name=structBinDataLanguage39000+4
        int {tableOffset};                                                                      ||| mkref name=structBinDataLanguage39000+8
        int {stringsOffset};                                                                    ||| mkref name=structBinDataLanguage39000+C
};

{struct LanguageTableEntry} \{                                                                  ||| mkref
	unsigned int {hash};                                                                    ||| mkref name=structLanguageTableEntry+0
	char *{string};                                                                         ||| mkref name=structLanguageTableEntry+4
};

{struct LoadedLanguage} \{                                                                      ||| mkref
        int {numStrings};                                                                       ||| mkref name=structLoadedLanguage+0
        char **{ptrStrings};                                                                    ||| mkref name=structLoadedLanguage+4
        {struct LanguageTableEntry} *{ptrTable};                                                ||| refto,mkref name=structLoadedLanguage+8
        {struct LanguageConversionTable} *{ptrConversionTable};                                 ||| refto,mkref name=structLoadedLanguage+C
};

{struct LanguageConversionTable} \{                                                             ||| mkref
        int field_0;
        wchar_t table[256]; /*size unknown*/
};
.pop pre

TODO: language files also contain bin sections with magic {0x30201}                             ||| code

.push symbols
- {4FF9D0 char* GetLanguageStringOrNull(unsigned int hash)}                                     ||| func
  Returns a string ptr or {NULL} for given hash (which is passed through {edx}).                ||| code,code
  Does a binary search over the hashes in {{8383D0}.{structLoadedLanguage+8}}                   ||| code,ref,refto

- {4FFA50 void GetLanguageStringIntoBuf(char *dst, int dstlen, unsigned int hash)}              ||| func
  Same as {4FFA80} but copy it into a buffer.                                                   ||| ref

- {4FFA80 char* GetLanguageString(unsigned int hash)}                                           ||| func
  Calls {4FF9D0} and when it returns {NULL}, call it again but with                             ||| ref,code
  {0xC01A6F63} as fallback (which results in {FENG: Default string error.})                     ||| code,code

- {4FFAA0 char* GetNumberSuffix(int number)}                                                    ||| func
  Returns, based on passed index, one of: {th, st, nd, rd, th, th, th, th, th, th th},          ||| code
  uses default string as fallback.
  TODO: xref this for fun and profit (only 2 usages?)

- {4FFAE0 int UnloadLanguageBinSection39000({struct BinSection} *section);}                     ||| func,refto
  .push pre
  if (section->{structBinSection+0}.{structBinSectionHeader+0} == 0x39000) \{                   ||| refto,refto
          {8383D0}.{structLoadedLanguage+C} = 0;                                                ||| refplain,refto
          {8383D0}.{structLoadedLanguage+0} = 0;                                                ||| refplain,refto
          {8383D0}.{structLoadedLanguage+4} = 0;                                                ||| refplain,refto
          {8383D0}.{structLoadedLanguage+8} = 0;                                                ||| refplain,refto
  }
  .pop pre

- {50D3C0 int __thiscall LanguageConversionStrcpyCharToWchar({struct LanguageConversionTable}   ||| func,refto
                                                *this, wchar_t *dest, int maxlen, char *src)}
  If a char could not be converted, it will be {_} and the func will return 1.                  ||| code

- {512530 void LanguageAwareStrcpyCharToWchar(wchar_t *dest, int maxlen, char *src)}            ||| func
  Uses {50D3C0} when {{8383D0}.{structLoadedLanguage+C}} is set, otherwise {43E000}.            ||| ref,code,ref,refto,ref

- {5125B0 int LoadLanguageBinSection39000({struct BinSection} *section)}                        ||| func,refto
  .push pre
  {struct BinDataLanguage39000} *data;                                                          ||| refto
  {struct LanguageTableEntry} *tableEntry;                                                      ||| refto
  int i;

  if (section->{structBinSection+0}.{structBinSectionHeader+0} == 0x39000) \{                                  ||| refto,refto
          data = (void*) section->{structBinSection+8};                                                        ||| refto
          {8383D0}.{structLoadedLanguage+C} = (void*) (data + (int) data->{structBinDataLanguage39000+0});     ||| refplain,refto,refto
          {8383D0}.{structLoadedLanguage+0} = data->{structBinDataLanguage39000+4};                            ||| refplain,refto,refto
          {8383D0}.{structLoadedLanguage+4} = (void*) (data + (int) data->{structBinDataLanguage39000+C});     ||| refplain,refto,refto
          {8383D0}.{structLoadedLanguage+8} = (void*) (data + (int) data->{structBinDataLanguage39000+8});     ||| refplain,refto,refto
          tableEntry = {8383D0}.{structLoadedLanguage+8};                                                      ||| refplain,refto
          for (i = 0; i < {8383D0}.{structLoadedLanguage+0}; i++) \{                                           ||| refplain,refto
                  tableEntry->{structLanguageTableEntry+4} += {8383D0}.{structLoadedLanguage+8};               ||| refto,refplain,refto
                  tableEntry++;
          }
  }
  .pop pre

- {52CD00 int LoadLanguageFontBinSection30201(struct BinData *bindata)}                         ||| func
  Something with font.

- {537290 int UnloadLanguageFontBinSection30201(struct BinData *bindata)}                       ||| func
  Something with font.

- {8383D0 {struct LoadedLanguage} loadedLanguage}                                               ||| field,refto

- {838530 int skipLanguageWcharTable}                                                           ||| field
  When 1, {50D3C0} will just zero extend char to wchar_t instead of using the conversion table  ||| ref
  in the language file.
.pop symbols

.pop section
.pop section
.push section

{Pools}  ||| h id=pools

I hooked {440B40} and collected some output: {createpoollog.txt}                                        ||| ref,a href=createpoollog.txt
This will probably help a lot when trying to figure out other things.
Note that the first time the {AUD: NFS3DMixCtl Pool} is made, it has an element amount of zero.         ||| code
The dump is from just starting the game and starting a circuit race.

Pools can be enlarged by {440BB0}, but only if {{structPool+14}} has the {{POOL_FLAG_EXTENDABLE}}       ||| ref,code,refto,code,refto
flag. When extending, the newly created pool gets added as last in the main pool's
{{structPool+8}}. The main pool's {{structPool+10}} will point to the first allocated element of        ||| code,refto,code,refto
the next pool, and the last allocated element of the new pool will point to the first element
of the main pool.

.push pre
{struct PoolLink} \{                                                                                    ||| mkref
        {struct PoolLink} *{prev};                                                                      ||| refto,mkref name=structPoolLink+0
        {struct PoolLink} *{next};                                                                      ||| refto,mkref name=structPoolLink+4
};
/*link is a circle*/

{struct PoolControl} \{                                                                                 ||| mkref
        int {inited};                                                                                   ||| mkref name=structPoolControl+0
        {struct PoolLink} {link};                                                                       ||| refto,mkref name=structPoolControl+4
};

#define {POOL_FLAG_EXTENDABLE} 1                                                                        ||| mkref
#define {POOL_FLAG_DONT_ZERO_INIT} 2 /*used in {440D40} etc*/                                           ||| mkref,ref

{struct Pool} \{                                                                                        ||| mkref
	{struct PoolLink} {__parent};                                                                   ||| refto,mkref name=structPool+0
	{struct Pool} *{nextLinkedPool};                                                                ||| refto,mkref name=structPool+8
	char* {name};                                                                                   ||| mkref name=structPool+C
	{struct PoolEntry} *{firstAvailableElement};                                                    ||| refto,mkref name=structPool+10
	int {flags};                                                                                    ||| mkref name=structPool+14
	int {usedElements};                                                                             ||| mkref name=structPool+18
	int {maxUsedElements}; /*max amount of elements used at one time*/                              ||| mkref name=structPool+1C
	int {field_20};                                                                                 ||| mkref name=structPool+20
	int {elementAmount};                                                                            ||| mkref name=structPool+24
	int {elementSize};                                                                              ||| mkref name=structPool+28
	int {elementAmountOverAllLinkedPools};                                                          ||| mkref name=structPool+2C
        /*pool entries come here*/
};

{struct PoolEntry} \{                                                                                   ||| mkref
        {struct PoolEntry} *{nextEntry};                                                                ||| refto,mkref name=structPoolEntry+0
        {struct PoolEntry} *{prevEntry?};                                                               ||| refto,mkref name=structPoolEntry+4
};

struct bFileSystemPoolEntry {

};
EXPECT_SIZE(struct bFileSystemPoolEntry, 0xF0);
.pop pre

.push symbols
- {431380 void CreateAnim_CNFSAnimBankPool()}                                                                   ||| func
  Called by {431380}                                                                                            ||| ref

- {4314E0 void CreateAnim_CAnimSkeletonPool()}                                                                  ||| func
  Called by {431380}                                                                                            ||| ref

- {431580 void CreateAnim_CAnimPartPool()}                                                                      ||| func
  Called by {431380}                                                                                            ||| ref

- {43CD40 void __thiscall Pool::Init({struct Pool} *this)}                                                      ||| func,refto
  Called once, from {440B40}.                                                                                   ||| ref
  {{Implementation}                                                                                             ||| details,summary
  .controlchars [] .push pre
  [struct Pool] *pool;                                                                                          ||| refto
  [struct PoolEntry] *entry;                                                                                    ||| refto
  [struct PoolEntry] *next;                                                                                     ||| refto
  int idx;

  pool = this;
  do {
          pool->[structPool+10] = NULL;                                                                         ||| refto
          if (pool->[structPool+24]) {                                                                          ||| refto
                  next = (void*) ((char*) pool + sizeof([struct Pool]));                                        ||| refto
                  pool->[structPool+10] = (void*) next;                                                         ||| refto
                  for (idx = pool->[structPool+24] - 1; idx >= 0; idx--) {                                      ||| refto
                          entry = next;
                          next += pool->[structPool+28];                                                        ||| refto
                          entry->[structPoolEntry+0] = next;                                                    ||| refto
                  }
                  next->[structPoolEntry+0] = 0;                                                                ||| refto
          }
          pool = pool->[structPool+8];                                                                          ||| refto
  } while (pool);
  .controlchars {} .pop pre
  }

- {43CD80 int __thiscall Pool::GetIndexOfEntry({struct Pool} *this, {struct PoolEntry} *entry)}                 ||| func,refto,refto
  -1 when not in this pool (or any linked pools).

- {43CDF0 int __thiscall Pool::UngetEntry({struct Pool} *this, {struct PoolEntry} *entry)}                      ||| func,refto,refto
  Mark the entry as free again. Returns the amount of used entries in the pool.
  Same as {43F920}, but a thiscall.                                                                             ||| ref

- {43F8F0 {struct PoolEntry} *RemoveFirstPoolEntry({struct Pool} *pool)}                                        ||| func,refto,refto

- {43F920 void UngetPoolEntry({struct Pool} *pool, {struct PoolEntry} *entry)}                                  ||| func,refto,refto
  Same as {43CDF0}, but an stdcall.                                                                             ||| ref

- {440390 void AllocateMemoryForPool?(int size, int somestring, int, int)}                                      ||| func
  TODO, seems to check the string to determine how to alloc?

- {4407B0 void __thiscall PoolControl::Init({struct PoolControl} *this)}                                        ||| func,refto
  Called by {77B670}.                                                                                           ||| ref
  .push pre
  this->{structPoolControl+4}.{structPoolLink+0} = &this->{structPoolControl+4};                                ||| refto,refto,refto
  this->{structPoolControl+4}.{structPoolLink+4} = &this->{structPoolControl+4};                                ||| refto,refto,refto
  this->{structPoolControl+0} = 1;                                                                              ||| refto
  .pop pre

- {440B40 AllocateAndInitPool(int elementSize, int elementAmount, char *name, int unknown)}                     ||| func
  Uses {440390} to allocate memory, calls {43CD40}.                                                             ||| ref,ref
  TODO, has one more XREF

- {440BB0 void __thiscall Pool::Extend({struct Pool} *this, int elementAmount)}                                 ||| func,refto
  Only called by {440D40}?                                                                                      ||| ref
  {{Implementation {nfsu2-re-hooks/replace-440BB0-Pool__Extend.c}}                                              ||| details,summary,hookfileref
  .controlchars [] .push pre
  [struct Pool] *ext;                                                                                           ||| refto
  [struct Pool] *lastPool;                                                                                      ||| refto
  char *ptr;

  ext = [440B40](this->[structPool+28], elementAmount, this->[structPool+C], this->[structPool+20]);            ||| refplain,refto,refto,refto
  ext->[structPool+14] = this->[structPool+14];                                                                 ||| refto,refto

  lastPool = this;
  while (lastPool->[structPool+8]) {                                                                            ||| refto
          lastPool = lastPool->[structPool+8];                                                                  ||| refto
  }
  lastPool->[structPool+8] = ext;                                                                               ||| refto

  ptr = (char*) ext + sizeof([struct Pool]); /*offset of first element*/                                        ||| refto
  ptr += this->[structPool+28] * (elementAmount - 1); /*now offset of last element*/                            ||| refto
  (([struct PoolEntry]*) ptr)->[structPoolEntry+0] = this->[structPool+10];                                     ||| refto,refto,refto

  this->[structPool+10] = ext->[structPool+10];                                                                 ||| refto,refto
  ext->[structPool+10] = NULL;                                                                                  ||| refto

  this->[structPool+2C] += elementAmount;                                                                       ||| refto
  .controlchars {} .pop pre
  }

- {440DF0 {struct Pool} *CreatePool(int elementSize, int elementAmount, char *name, int unknown)}               ||| func,refto
  Calls {440B40}.                                                                                               ||| ref
  {{Implementation {nfsu2-re-hooks/replace-440DF0-CreatePool.c}}                                                ||| details,summary,hookfileref
  .controlchars [] .push pre
  [struct Pool] *pool;                                                                                          ||| refto
  [struct PoolLink] *linkNext;                                                                                  ||| refto

  elementSize += 3;
  elementSize -= elementSize % 4; /*ceil to multiple of 4*/
  pool = [440B40](elementSize, elementAmount, name, unknown);                                                   ||| refplain
  if (pool && [828530].[structPoolControl+0]) {                                                                 ||| refplain,refto
          linkNext = [828530].[structPoolControl+4].[structPoolLink+4];                                         ||| refplain,refto,refto
          linkNext->[structPoolLink+0] = pool;                                                                  ||| refto
          [828530].[structPoolControl+4].[structPoolLink+4] = pool;                                             ||| refplain,refto,refto
          pool->[structPool+0].[structPoolLink+0] = [828530].[structPoolControl+4];                             ||| refto,refto,refplain,refto
          pool->[structPool+0].[structPoolLink+4] = linkNext;                                                   ||| refto,refto
  }
  return pool
  .controlchars {} .pop pre
  }

- {440D40 {struct PoolEntry} *__thiscall PoolGetNextFreeItem({struct Pool} *this)}                              ||| func,refto,refto

- {440E50 int PoolGetNextFreeItem_stdcallwrapper(void *pool)}                                                   ||| func
  {440D40} but wrapped in an stdcall.

- {440DA0 void __thiscall PoolControl::DeletePool({struct PoolControl} *this, {struct Pool} *pool)}             ||| func,refto,refto
  Frees pool and all its linked pools, remove the pool from the link in {struct PoolControl}.                   ||| refto

- {440E40 int DeletePool({struct Pool} *pool)}                                                                  ||| func,refto
  .push pre
  {828530}->{440DA0}(pool);                                                                                     ||| refplain,refplain
  .pop pre

- {57ED10 ? ??SetupPools(?,?)}                                                                                  ||| func
  Called by {57ED10}                                                                                            ||| ref

- {5EA8B0 int isUseMetricSystem()}                                                                              ||| func
  Returns {83AA1A}.                                                                                             ||| ref

- {77B670 void init_function_77B670()}                                                                          ||| func
  .push pre
  {828530}->{4407B0}()                                                                                          ||| refplain,refplain
  .pop pre

- {828530 {struct PoolControl} pools}                                                                           ||| field,refto

- {865104 p_bFileSystemPool}                                                                                    ||| field

- {81CB6C {struct Pool} *AIActionPool}                                                                          ||| field,refto
  Size 560 Amount 23
  Created by {4035D0}                                                                                           ||| ref

- {81CB70 {struct Pool} *AIGoalPool}                                                                            ||| field,refto
  Size 40 Amount 22
  Created by {4035D0}                                                                                           ||| ref

- {81CBB4 {struct Pool} *futurePointPool}                                                                       ||| field,refto
  Size 120 Amount 600
  Created by {4035D0}                                                                                           ||| ref

- {81CBB8 {struct Pool} *pathfindingNodePool}                                                                   ||| field,refto
  Size 192 Amount 161
  Created by {4035D0}                                                                                           ||| ref

- {81CBBC {struct Pool} *pathfindingNodeLitePool}                                                               ||| field,refto
  Size 12 Amount 1280
  Created by {4035D0}                                                                                           ||| ref

- {827B4C {struct Pool} *anim_CNFSAnimBankPool}                                                                 ||| field,refto
  Size 60 Amount 81
  Created by {431380} or {4348F0} (whoever is first, checked with {827B50})                                     ||| ref,ref,ref

- {827B50 int anim_CNFSAnimBankPoolCreated}                                                                     ||| field
  To make sure {827B4C} gets created just once, since two funcs can make it.                                    ||| ref

- {827B54 {struct Pool} *animCtrlPool}                                                                          ||| field,refto
  Size 128 Amount 64
  Created by {57ED10}                                                                                           ||| ref

- {827B5C {struct Pool} *anim_CAnimSkeletonPool}                                                                ||| field,refto
  Size 40 Amount 8
  Created by {4314E0} or {434E10} (whoever is first, checked with {827B60})                                     ||| ref,ref,ref

- {827B60 int anim_CAnimSkeletonPoolCreated}                                                                    ||| field
  To make sure {827B5C} gets created just once, since two funcs can make it.                                    ||| ref

- {827B64 {struct Pool} *anim_CAnimPartPool}                                                                    ||| field,refto
  Size 20 Amount 8
  Created by {431580}                                                                                           ||| ref

- {827B68 int anim_CAnimPartPoolCreated}                                                                        ||| field
  To make sure {827B64} gets created just once, although it seems like only one place creates it.               ||| ref

- {83AA1A int useMetricSystem}                                                                                  ||| field
.pop symbols

.pop section
.push section

{Speedy boot}  ||| h id=speedyboot

{I want a fast startup because I'm booting the game so many times                               ||| em
(not to mention the numerious crashes)}

During startup, with the debug string output enabled, there are a few entries
showing loading and unloading states, such as {LS_THXMovie.fng}.                                ||| code
I already sped up boot by replacing the {MOVIES/THX_logo.vp6} with                              ||| code
{MOVIES/blank.vp6}. While that skips the unskippable intro logos,                               ||| code
it still takes some time because it switches to a state where it tries loading
and it takes slightly under a second to switch to the next state.

So by following the debug prints, I found following section:

.push ida
{.data:007F65E8} off_7F65E8  dd offset {aDiscerrorpc_fn}                                        ||| comment,ident
{.data:007F65EC}             dd offset byte_783FE5                                              ||| comment
{.data:007F65F0}             dd offset {aMc_bootup_fng} {; "MC_Bootup.fng"}                     ||| comment,ident,comment
{.data:007F65F4}             dd offset byte_783FE5                                              ||| comment
{.data:007F65F8}             dd offset byte_783FE5                                              ||| comment
{.data:007F65FC}             dd offset {aLs_blankmovie_} {; "LS_BlankMovie.fng"}                ||| comment,ident,comment
{.data:007F6600}             dd offset {aLs_ealogo_fng} {; "LS_EAlogo.fng"}                     ||| comment,ident,comment
{.data:007F6604}             dd offset byte_783FE5                                              ||| comment
{.data:007F6608}             dd offset {aLs_thxmovie_fn} {; "LS_THXMovie.fng"}                  ||| comment,ident,comment
{.data:007F660C}             dd offset {aLs_psamovie_fn} {; "LS_PSAMovie.fng"}                  ||| comment,ident,comment
{.data:007F6610}             dd offset {aUg_ls_introfmv} {; "UG_LS_IntroFMV.fng"}               ||| comment,ident,comment
{.data:007F6614}             dd offset {aUg_ls_splash_f} {; "UG_LS_Splash.fng"}                 ||| comment,ident,comment
{.data:007F6618}             dd offset {aMc_background_} {; "MC_Background.fng"}                ||| comment,ident,comment
{.data:007F661C}             dd offset {aUi_main_fng}  {; "UI_Main.fng"}                        ||| comment,ident,comment
.pop ida

This very much looks like the boot states the game goes through.
{byte_783FE5} is basically an empty string, so maybe there used to                              ||| code
be more states, or some are for different game versions?


Putting all of them to a reference to an empty string makes the boot pretty speedy
but then it doesn't do much. After initial boot, there's a black screen for a
short moment, then the basic loading progressbar screen with the cars and Rachel
shows, then it goes to a black screen and you can move the cursor. So the game is
running but nothing of UI is running so you can't do much.


Only leaving {UG_LS_Splash.fng} shows the splash screen with Rachel and                         ||| code
the cars, the famous music starts playing and when the beat drops the EA TRAX message
shows and "Press enter" shows. When pressing enter, we're back to the black screen
with a moveable cursor.


Only leaving {MC_BACKGROUND.fng} shows the splash screen with Rachel and                        ||| code
the cars and the prompt if I want to create a new profile. When pressing 'no', we're
back to the black screen. When pressing 'yes' I get to enter a name but when it then
asks to save the profile, it says 'Unable to save profile' so I have to choose 'no'.
Then black screen again.


Only leaving {UI_MAIN.fng} directly jumps to the main menu where you see                        ||| code
Rachel's car after a short moment after the loading screen showed. It didn't ask
for a profile to load and when I try to load a profile it says that no profiles
were found. Scary. I can create a new profile but it says 'Unable to save'. There
is no music in the menu. Music does start when starting a race but going back to
the menus stops the music again. Going to EA TRAX in the option does suddenly
start the music in the menus.


When only leaving {LS_EALogo.fng}, the ea logo movie sound starts to play                       ||| code
while the 'loading' screen is still showing, then there's one frame of the logo movie
when it's about halfway the sound of the movie and then it goes to black screen with
cursor. Leaving {LS_BlankMovie.fng} in as well fixes that problem.                              ||| code


Leaving just {MC_Bootup.fng} doesn't seem to change much, not even timing                       ||| code
wise. It does sound important, so I tried this in combination with
{UI_MAIN.fng}. It jumps into the main menu, but when I go to the profile                        ||| code
manager now, I can load my profiles. Nice. The main menu music still doesn't load
without going to EA TRAX, but I'm okay with that. One weird thing is that the Q button
doesn't show the 'quit game' dialog. After searching a bit, it seems like
{LS_PSAMovie.fng} is the one that makes the Q to quit keybind happen. That's                    ||| code
quite interesting, definitely something to research when/if I get more into the workings
of the UI.

(Later I found the PSA screen(s) put {836494} on 1 after they're done, I'm guessing for         ||| ref
some reason they don't want us to exit while the PSA is playing, or before the intro
movies end.)

So my final setup is to only leave in {MC_Bootup} (because it makes profiles                    ||| code
work), {LS_PSAMovie} (because I like the Q button and it can be a good dialog                   ||| code
test, it means I still need to skip the PSA movie but I can handle that),
{MC_Background} (so I can load a profile at start) and                                          ||| code
{UI_Main} (obviously). Code in {nfsu2-re-hooks/speedyboot.c}.                                   ||| code, hookfileref

.pop section
.push section

{Console leftovers}  ||| h id=consoleleftover

{Note: console as in somewhere you type in, not a videogame console}            ||| em

In the hooks project, I "enabled" this console in the functions {initConsolePOC}                ||| code
in the file {nfsu2-re-hooks/faux-enable-console.c}.                                             ||| hookfileref
As it doesn't seem to be used anywhere, the only effect you can see is that whatever you
type is written into the {console_real_text} buffer (use CheatEngine or something               ||| code
you like to inspect it).

.push section

{ConsoleConsumeKey} ||| h id=console_consume_key

When looking at the {5CCD60} (which is not to hard too find because it's                        ||| ref
passed in a struct to {RegisterClassExA}), I saw a call to a function that                      ||| code
is called on every {WM_CHAR} event. The function does nothing when the value                    ||| code
in {8709BC} is zero, and there are no write references to it, so it seems                       ||| ref
like it will always be zero.

First it seems like the input is dropped if it's a {CR} (carriage return) and                   ||| code
when the value at {8709C4} is non-zero. Again, this is always zero so CR's                      ||| ref
are never dropped.

Then it has four different handlers. The first one handles a backspace character, second
one does escape, third one does tab and CR, and the last one does everything else. Basically
one character is deleted when pressing backspace and one character is added in all other
cases. I named following variables:

.push ul
- {8709B8}                                                                                      ||| ref
- {8709C0}                                                                                      ||| ref
- {8709B0}                                                                                      ||| ref
- {8709B4}                                                                                      ||| ref
- {8709BC}                                                                                      ||| ref
.pop ul

Basically, on backspace it checks if {8709B8} is bigger than zero,                              ||| ref
copies everything in {8709B0} starting from {8709B8} to a                                       ||| ref,ref
zero byte into a newly allocated buffer, decrements {8709B8} and {8709B4},                      ||| ref,ref
and copies everything from the allocated buffer back into {8709B0} at position {8709B8}.        ||| ref,ref

When inserting, it checks if {8709B4} is less than {8709C0},                                    ||| ref,ref
copies everything in {8709B0} starting from {8709B8} to a zero byte into                        ||| ref,ref
a newly allocated buffer, inserts the character in {8709B0} at position {8709B8},               ||| ref,ref
increments {8709B8} and {8709B4} by one,                                                        ||| ref,ref
and copies everything from the allocated buffer back into {8709B0} at position {8709B8}.        ||| ref,ref

.push ul
- Backspace: delete character before caret
- Escape: insert zero byte
- Tab and CR: insert LF
- Other: insert char if it's {a-z} or {A-Z} or {0-9} or,                                        ||| code,code,code
  if {80057E} is zero, {_} or {@} or {.} or                                                     ||| ref,code,code,code
  {-}. If none of these pass, do a check for more keys as described below}                      ||| code
.pop ul

.push section

{A hardcoded key check}      ||| h id=console_consume_key_check

At the end of looking if a character is valid, when it hasn't passed any of the criteria
above, it checks one last function if {8709C7} is {1}. The function                             ||| ref,code
seems to check if the key is one of 55 configured values and if so, the char is accepted.

.pop section
.pop section
.push section

{ConsoleMoveCaret} ||| h id=console_move_caret

This function is also called from {5CCD60}, this time when a                                    ||| ref
{WM_KEYDOWN} message is received. One parameter is passed based on the keycode                  ||| code
of the event:

.push ul
- {VK_LEFT}: {-1}                                                                               ||| code,code
- {VK_RIGHT}: {1}                                                                               ||| code,code
- {VK_HOME}: {-{8709C0}}                                                                        ||| code,code,refplain
- {VK_END}: {{8709C0}}                                                                          ||| code,code,refplain
.pop ul

This is the only other function that checks if {8709BC} is non-zero.                            ||| ref

.pop section

I need text here or my parser breaks.

.push symbols
- {5BF260 int ConsoleIsArgOneOfTheseHardcodedValues(char c)}                                    ||| func
  .push pre
  unsigned char values[55] = {
          ' ', '.', ',', '_', '@', '-', '`', '=', '[', ']', '\\',
          ';', '\'', '/', '<', '>', '?', ':', '"', '{', '}', '|',
          '+', '(', ')', '*', '&', '%', '#', '!', '~', 0xE5, 0xE4,
          0xE0, 0xE2, 0xEB, 0xE8, 0xE9, 0xEA, 0xEF, 0xEE, 0xF6,
          0xF4, 0xFC, 0xF9, 0xFB, 0xE7, 0x9C, 0xF2, 0xEC, 0xC5,
          0xC4, 0xD6, 0xDC, 0xA7
  };
  int i;

  for (i = 0; i < 55; i++) {
          if (values[i] == value) {
                  return 1;
          }
  }
  return 0;
  .pop pre
- {5BF3A0 void ConsoleMoveCaret(int relativePosition)}                                          ||| func

- {80057E char consoleDisallowSpecialChars}                                                     ||| field
  Never written to?

- {80057D char consoleLastCharTyped?}                                                           ||| field
  Never read from?

- {8709B0 char *consoleTextString}                                                              ||| field

- {8709B4 int consoleTextStringLength}                                                          ||| field

- {8709B8 int consoleTextCaretPosition}                                                         ||| field

- {8709BC int consoleEnabledFlag}                                                               ||| field

- {8709C0 int consoleTextStringMaxLength}                                                       ||| field

- {8709C4 int consoleIgnoreNextCR}                                                              ||| field

- {8709C5 char ??DebugUnusedLastKeyPressed}                                                     ||| field

- {8709C7 char consoleFilterSpecialChars}                                                       ||| field
.pop symbols

.pop section
.push section

{Hash functions}  ||| h id=hashfuncs

While scrolling and looking at references to some strings, I found some parts that look like
following excerpt:

.push ida
{.text:005121AE}     push    offset {aGenericdialo_2} {; "GenericDialog_Animate_SMALL.fng"}     ||| text,ident,comment
{.text:005121B3}     call    {sub_505450}                                                       ||| text,hi
{.text:005121B8}     add     esp, {4}                                                           ||| text,num
{.text:005121BB}     cmp     esi, eax                                                           ||| text
{.text:005121BD}     jz      short loc_512218                                                   ||| text
{.text:005121BF}     push    offset {aGenericdialog_} {; "GenericDialog_SMALL.fng"}             ||| text,ident,comment
{.text:005121C4}     call    {sub_505450}                                                       ||| text,hi
{.text:005121C9}     add     esp, {4}                                                           ||| text,num
{.text:005121CC}     cmp     esi, eax                                                           ||| text
{.text:005121CE}     jz      short loc_512218                                                   ||| text
{.text:005121D0}     push    offset {aGenericdialo_3} {; "GenericDialog_Animate_MED.fng"}       ||| text,ident,comment
{.text:005121D5}     call    {sub_505450}                                                       ||| text,hi
{.text:005121DA}     add     esp, {4}                                                           ||| text,num
{.text:005121DD}     cmp     esi, eax                                                           ||| text
{.text:005121DF}     jz      short loc_512218                                                   ||| text
{.text:005121E1}     push    offset {aGenericdialo_4} {; "GenericDialog_MED.fng"}               ||| text,ident,comment
{.text:005121E6}     call    {sub_505450}                                                       ||| text,hi
{.text:005121EB}     add     esp, {4}                                                           ||| text,num
{.text:005121EE}     cmp     esi, eax                                                           ||| text
{.text:005121F0}     jz      short loc_512218                                                   ||| text
{.text:005121F2}     push    offset {aGenericdialo_5} {; "GenericDialog_Animate_LARGE.fng"}     ||| text,ident,comment
{.text:005121F7}     call    {sub_505450}                                                       ||| text,hi
{.text:005121FC}     add     esp, {4}                                                           ||| text,num
{.text:005121FF}     cmp     esi, eax                                                           ||| text
{.text:00512201}     jz      short loc_512218                                                   ||| text
{.text:00512203}     push    offset {aGenericdialo_0} {; "GenericDialog_LARGE.fng"}             ||| text,ident,comment
{.text:00512208}     call    {sub_505450}                                                       ||| text,hi
{.text:0051220D}     add     esp, {4}                                                           ||| text,num
{.text:00512210}     cmp     esi, eax                                                           ||| text
{.text:00512212}     jz      short loc_512218                                                   ||| text
.pop ida

The proc {505450} doesn't look very complicated; it has one argument and                        ||| ref
doesn't perform any calls. It dereferences the given argument and increment its position,
until a zero has been found. While it's doing that, {eax} is modified based on the read value.  ||| code
So I assumed it is some hashing function and hooked it to see what kind of things are passed
through it.

As it turns out, it gets called many, many times.

.push pre
{time        input                       result}        ||| strong
53.42743683 GenericDialog_SMALL.fng     6962C0CD
53.42753220 UI_PC_Help_Bar.fng          33AC1CB4
53.42756271 OL_ICON_GROUP               2BAC0CEE
53.42758179 UI_PC_Help_Bar.fng          33AC1CB4
53.42760086 Hide                        0016A259
53.42761993 UI_Main.fng                 C343126A
53.42766190 GarageMain.fng              4CDD8B14
53.42769241 GarageMain.fng              4CDD8B14
53.42771149 GarageMain.fng              4CDD8B14
53.42773056 GenericDialog.fng           F68A7675
53.42774963 UI_GenericParts_Browser.fng AF09F84F
53.42776871 GenericDialog.fng           F68A7675
53.42779160 GenericDialog_SMALL.fng     6962C0CD
53.42781067 UI_PC_Help_Bar.fng          33AC1CB4
53.42782974 UI_Main.fng                 C343126A
53.42784882 GarageMain.fng              4CDD8B14
53.42790222 UI_MagazineBack.fng         FA8CC482
53.42796707 GenericDialog_SMALL.fng     6962C0CD
53.42798615 UI_PC_Help_Bar.fng          33AC1CB4
53.42800522 UI_Main.fng                 C343126A
53.42802429 GarageMain.fng              4CDD8B14
53.42922211 GenericDialog_SMALL.fng     6962C0CD
53.42924881 UI_PC_Help_Bar.fng          33AC1CB4
53.42926788 UI_Main.fng                 C343126A
53.42928696 GarageMain.fng              4CDD8B14
.pop pre

The excerpt above is probably from one cycle in the update loop, and is repeated a lot.

Some time later I found a very similar looking proc: {43DB50}, so I copied                      ||| ref
the previous hook for this function. This one gets called many times seemingly at startup
and when car parts or maps get loaded.

When writing this I took a better look at the procedures and saw that the only difference
really is that the first one is case insensitive while the second one is case sensitive.
In the {505450} one, it checks for every character if it is in the range                        ||| ref
{'a'-'z'} and subtracts {0x20} if so, making the character uppercase                            ||| code,code
before updating the hash.

.push nop
TODO: a directive for filesize?
{} ||| filesize file=hashes.txt
.pop nop

See {hashes.txt} (< 1MB) for list of hashes, each line is formatted                          ||| a href=hashes.txt
as {hash\tinput\tresult\tproc\n}. This file is updated at random times. 8 minutes               ||| code
of playing gives about a 277MB file, all output was piped to {sort | uniq}.                     ||| code

How I collected these can be seen in the {nfsu2-re-hooks/hook-*-hash-*.c} files.                ||| code

.push symbols
- {43DB50 unsigned int SomeHashCS43DB50(char *str)}                                             ||| func
  Case sensitive hash function.

- {43DB80 unsigned int __cdecl SomeHashCS_WithStartValue(char *str, unsigned int startValue)}   ||| func
  Like {43DB50}, but starts with given {startValue} instead of {-1}.                            ||| ref,code,code

- {505450 unsigned int SomeHashCI505450(char *str)}                                             ||| func
  Case insensitive hash function.

- {50B990 unsigned int FormatWithSinglePlaceholderAndHashCS43DB50(char *src, void *param)}      ||| func
  Delegates hashing to {43DB50}.                                                                ||| ref

- {50B9C0 unsigned int FormatWithSinglePlaceholderAndHashCI(char *src, void *param)}            ||| func
  Does its own hashing.

.pop symbols

.push section

{Messing with hash results}  ||| h id=hashmess

I had an impulse to try to return different results for certain hashes. For example, return
the result of {FIRETRUCK} when the input is {240SX}. The result is ..                           ||| code,code
difficult to describe. Here's some short points:

.push ul
- Browsing to the stock 240sx to customize shows an empty spot, no car
- Selecting the stock car to customize will suddenly swap to the firetruck model
- I can modify the firetruck, I can't select any bumpers but I can choose spoilers,
  although it does nothing
- Changing wheels/spinners/hydraulics does show
- Then going out of the customization menu crashes the game
  (this includes going to performance tuning)
.pop ul

{Hop hop skippity hop}                             ||| imgcaptioned src=FIRETRUCK.GIF alt="jumping firetruck"

.push ul
- Browsing a previously customized 240sx only shows the wheels of the car
- If the wheels were not customized, it shows black rectangles as wheels and the game
  crashes when I try to customize the wheels/spinners
- Selecting the customized car to customize doesn't change anything special, still only wheels
- Only the firetruck customization options can be selected
- Choosing a spoiler shows the spoiler in the center of the car
- When going out of a category (like Body parts),
  the car switches to the same car but the wheels at
  the position where they should be for the firetruck
- When going outside the customize menu now, the car's brand is a {*} symbol                    ||| code
- When going to a different car and back, the firetruck model shows
- Entering customization again hides the firetruck, only showing the wheels
  (the spoiler is gone?)
- After saving and undoing the swap and restarting the game, the saved car stays a firetruck
  (but the behavior is still the same as described above)
- Using the car to race makes the framerate go down significantly, except when in nose camera
  (you just see headlights driving without a vehicle body)
- It doesn't lag at all in the performance tuning
.pop ul

{Here's a dyno chart of the firetruck}                             ||| imgcaptioned src=FIRETRUCK-DYNO.JPG alt="dyno chart"

While the firetruck is unused in the game,
I also tried to do this with the taxi, but it gave the same results.
Then I tried to replace it with a "normal" car, the Mustang.

.push ul
- Browsing a stock 240sx only shows black rectangles for wheels
- When selecting the car, it gets replaced with a mustang, and now I'm customizing a mustang
- The only change I can see is that there are no headlights or taillights
- Going ingame now only shows the front bumper of the car, which is the thing I customized
- Going back to the menu now shows the car with stock headlights and taillights
- Going ingame again now shows the car fully as it should
- Selecting a customized 240sx now shows the doors of a mustang
.pop ul

{Car?}                             ||| imgcaptioned src=MUSTANG.JPG alt="driving invisible mustang"

The behavior isn't always the same, just give it a try and see for yourself.
Replacing the taxi with the ambulance just lags out the game whenever a taxi comes in sight.

Check the function {SomeHashCS43DB50Print} in the file                                          ||| code
{nfsu2-re-hooks/hook-43DB50-hash-cs.c} to see how I did this,                                   ||| hookfileref
the code to replace cars is in comments.

.pop section
.pop section
.push section

{Debug print}  ||| h id=debugprint

While scrolling through the data segment, I found these interesting strings:

.push ida
{.rdata:0079B160} {aDeletingPackag} db {'Deleting package [%s]'},{0Ah},{0}                      ||| comment,ident,str,num,num
{.rdata:0079B177}                 align {4}                                                     ||| comment,num
{.rdata:0079B178} {aUnActivateXX}   db {'Un-Activate!!! %x %x'},{0Ah},{0}                       ||| comment,ident,str,num,num
{.rdata:0079B18E}                 db {2} dup({0})                                               ||| comment, num, num
{.rdata:0079B190} {aWillBeUnloaded} db {'Will be unloaded [%s]'},{0Ah},{0}                      ||| comment,ident,str,num,num
.pop ida

Even more interesting is that these strings are using by pushing them on to the stack,
followed by a call to a specific proc that looks like this:

.push ida
{.text:0050D510} {sub_50D510  proc near}                                                        ||| text,ident
{.text:0050D510}                 xor     eax, eax                                               ||| text
{.text:0050D512}                 retn                                                           ||| text
{.text:0050D512} {sub_50D510  endp}                                                             ||| text,ident
.pop ida

It appears as if this used to be some kind of debug printf function, so I named it
{50D510}. I hooked the function and made it output to a log file,                               ||| refplain
see {nfsu2-re-hooks/replace-50D510-DebugPrint.c}.                                               ||| hookfileref

It also seems to pass data that is not a pointer to a string. I'm guessing since the
implementation of this function was removed (and now just returns zero), and there
were probably other removed functions, so some calls that are supposed to be done
to different functions may now all point to this one function that also happened to
be used for the debug print stuff. My simple solution is to check if the first passed
argument points to memory in the data section, and print if so.

I did a short session browsing customization options and performance tuning with this
enabled, the results can be seen in the log file
{debugstring50D510.txt}. Each line is formatted as                                              ||| a href=debugstring50D510.txt
{debugstr\t50D510\tcallee\tstring\n}. Here is a 'small' excerpt:                                ||| code

.push pre
DIALOG :: --------- ShowDialog -----------
DIALOG :: |_ Do you want to convert your trunk to carbon fiber?
DIALOG :: Oh shit - the control mask is zero.  This is bad.  Try to use Top Package's control mask.
DIALOG ::  |_ TopPackage = UI_GenericParts_Browser.fng, mask = 0.
DIALOG ::    |_ Crap - mask is zero, forcing to 0xff.
DIALOG :: Success : Control mask = 255, Handle = 2
DIALOG :: --------- ShowDialog Finished -----------
Init Package GenericDialog_SMALL.fng
DIALOG :: Constructor
Joy Event: FEPad_Accept[0]
Joy Event: FEPad_Accept[0]
Joy Event: FEPad_Back[1]
Joy Event: FEPad_Back[1]
DIALOG :: Tick, ReturnWithMessage Set, Dismissing: [GenericDialog_SMALL.fng] [b4623f67]
DIALOG :: DismissDialog.  Handle(2).  Current handle(2)
DIALOG ::  |_ Found, popping.
Queue popping GenericDialog_SMALL.fng
Will unload -----------GenericDialog_SMALL.fng------------------
Will be unloaded [GenericDialog_SMALL.fng]
DIALOG :: Closing, sending message (b4623f67) to (UI_GenericParts_Browser.fng).
Send message[b4623f67] to package [UI_GenericParts_Browser.fng]
Message was queued
Un-Activate!!! 37a52f0 37e69c0
Deleting package [GenericDialog_SMALL.fng]
package[GenericDialog_SMALL.fng] will unload
.pop pre

Most of the messages seem to be about dialogs, joy (keyboard) events,
FEng/fng packages (I'm guessing those are ui resources/designs?).

.pop section
.push section

{UI}  ||| h id=ui

Names with {.FNG} seem to be occuring a lot, it seems like that are UI                          ||| code
resources or some kind of UI widget descriptors.

In text strings, {^} is a line feed (but {\n} might work as well, TODO).                        ||| code,code

UI things seem to work on a {640x480} canvas.                                                   ||| code
Most things (especially when mouse is involved) seem to be positioned
{([-320,+320],[-240,+240])}.                                                                    ||| code

.push section

{Dialogs}  ||| h id=ui_dialog

Thanks to the {debugprint} discovery, my attention got grabbed                                  ||| href
by something that looked like dialog code. These leftover debug strings helped so much.

Someone left a trace here:

.push ida
{.text:005541FC}                 call    {4FF250}                                               ||| text,refplain
{.text:00554201}                 push    offset {aDialogConstruc} {; "DIALOG :: Constructor\n"} ||| text,ident,comment
{.text:00554206}                 call    {50D510}                                               ||| text,refplain
.pop ida

One of the first thing {558020} does is calling {526C40},                                       ||| ref,ref
which looks like initializes the dialog maybe? One argument is passed, seemingly the
dialog name. But then it checks something at the passed dialog name {+324h}. Conclusion:        ||| code
it's passing a struct with dialog info, of which the first member is the name.

.push section

{GetFNGForDialog}  ||| h id=ui_dialog_getfngfordialog

This function is only used once, by the {558020} function. It checks                            ||| ref
the value at {+324h}, which seems to be a pointer to a string,                                  ||| code
looks like maybe a type of dialog?
It's checked if that value is either {NULL} or empty string or equal to                         ||| code
{animating} or {3button}. I decided to reimplement that function.                               ||| code,code
Fun fact: while doing this I managed to write an infinite loop which caused a BSOD.

At the end I decided upon the name {526C40}. It returns a pointer                               ||| ref
to a string that says what FNG to display for the dialog that was passed.

The dialog info may already have the FNG set, this function will return that unless
it's not set or it's not either {animating} or {3button}.                                       ||| code,code

.push ul
- {HelpDialog_SMALL.fng} when {{structDialogInfo+32D}} and text has less than 5 linebreaks      ||| code,code,refto
- {HelpDialog_MED.fng} when {{structDialogInfo+32D}} and text has more than 4 linebreaks        ||| code,code,refto
- {GenericDialog_ThreeButton.fng} when {{structDialogInfo+324}} is {3button}                    ||| code,code,refto,code
- {GenericDialog_SMALL.fng} when text width is {< 2561.0f}                                      ||| code,code
- {GenericDialog_Animate_SMALL.fng} same as above, but when type is {animating}                 ||| code,code
- {GenericDialog_MED.fng} when text width is {< 5122.0f}                                        ||| code,code
- {GenericDialog_Animate_MED.fng} same as above, but when type is {animating}                   ||| code,code
- {GenericDialog_LARGE.fng} if the other measurements didn't pass                               ||| code
- {GenericDialog_Animate_LARGE.fng} same as above, but when type is {animating}                 ||| code,code
.pop ul

See the {nfsu2-re-hooks/replace-526C40-GetFNGForDialog.c} function                              ||| hookfileref
for the complete reimplementation.

Here's me messing with the returned value:

{{HelpDialog_SMALL.fng}}            ||| imgcaptioned src=dialoghelp.jpg alt="dialog",code
{{GenericDialog_MED.fng}}           ||| imgcaptioned src=dialoggenericmed.jpg alt="dialog",code
{{GenericDialog_ThreeButton.fng}}   ||| imgcaptioned src=dialog3button.jpg alt="dialog",code
{{GenericDialog_Animate_SMALL.fng}} ||| imgcaptioned src=dialoganimate.gif alt="dialog",code

I can't remember seeing this animate style dialog... But when adding some debug prints,
it seems like the online/LAN play uses this: {dialog 'Retrieving updated games                  ||| code
list^from the server...' has type animating} but that dialog disappears so fast
I probably never noticed it.

Then I tried replacing it with something totally different,
{UI_GenericParts_Browser.fng}. I half expected the game to crash, so I was                      ||| code
surprised when it showed me this:

{:)}             ||| imgcaptioned src=dialoggenericpartsbrowser.jpg alt="main menu ui on splash screen"

Seems like this is a nice place to test loading other screens. Some do crash, but
here's {UI_OLEAMessenger.fng}:                                                                  ||| code

{No idea why that text is .. Spanish?}             ||| imgcaptioned src=dialogoleamessenger.jpg alt="online messenger menu with placeholder text"

Printing the dialog info struct address sadly showed that it wasn't stored in the
executable itself so it's probably somewhere deep in a bin file.

.pop section

{DialogInfo} struct made by looking at all of the above and more:                               ||| code
(Especially {4FF250} helped here.)                                                              ||| ref

.push pre
{struct DialogInfo} \{                                                                          ||| mkref
	char {text}[768];                                                                       ||| mkref name=structDialogInfo+0
	unsigned int {leftButtonLanguageString};                                                ||| mkref name=structDialogInfo+300
	unsigned int {leftButtonMessage};                                                       ||| mkref name=structDialogInfo+304
	unsigned int {rightButtonLanguageString};                                               ||| mkref name=structDialogInfo+308
	unsigned int {righttButtonMessage};                                                     ||| mkref name=structDialogInfo+30C
	unsigned int {middleButtonLanguageString};                                              ||| mkref name=structDialogInfo+310
	unsigned int {middleButtonMessage};                                                     ||| mkref name=structDialogInfo+314
	int {field_318};                                                                        ||| mkref name=structDialogInfo+318
	int {field_31C};                                                                        ||| mkref name=structDialogInfo+31C
	char *{parentFNGName};                                                                  ||| mkref name=structDialogInfo+320
	char *{myFNGName};                                                                      ||| mkref name=structDialogInfo+324
	int {numButtons};                                                                       ||| mkref name=structDialogInfo+328
	char {field_32C};                                                                       ||| mkref name=structDialogInfo+32C
	char {isHelpDialog};                                                                    ||| mkref name=structDialogInfo+32D
	char {field_32E};                                                                       ||| mkref name=structDialogInfo+32E
	char {textNeedsSomeWcharConversion}; /*set to 0 in 55806D*/                             ||| mkref name=structDialogInfo+32F
	int {field_330}; /*set to 0 in 558074*/                                                 ||| mkref name=structDialogInfo+330
	int {field_334};                                                                        ||| mkref name=structDialogInfo+334
	int {field_338};                                                                        ||| mkref name=structDialogInfo+338
};
EXPECT_SIZE({struct DialogInfo}, 0x338);                                                        ||| refto
ASSERT_OFFSET({struct DialogInfo}, {structDialogInfo+324}, 0x324);                              ||| refto,refto
ASSERT_OFFSET({struct DialogInfo}, {structDialogInfo+32D}, 0x32D);                              ||| refto,refto
.pop pre

.push symbols
- {4FF250 void __thiscall Dialog__ctor({struct DialogInfo} *this)}                              ||| func,refto
  Initializes memory that was allocated to be a dialog.

- {526C40 int GetFNGforDialog({struct DialogInfo} *dialog)}                                     ||| func,refto
  Returns a pointer to a string that says what FNG to display for the dialog that was passed.
  See {ui_dialog_getfngfordialog}                                                               ||| href

- {540A60 void DismissDialog(int dialogIdToDismiss)}                                            ||| func

- {54C050 int __thiscall DialogFNGMessageHandler(struct DialogFNGObject *this, int, int, int, int)}                     ||| func

- {5542A0 DialogFNGInitHandler}                                                                                         ||| func

- {558020 int ShowDialog({struct DialogInfo} *info)}                                                                    ||| func,refto
  Returns the new dialog id for it (value in {838974}) or zero when                                                     ||| ref
  it didn't show because of some override.

- {5582A0 int ShowButtonlessFormattedDialogPtr(char *dialogParentFNGName,                                               ||| func
                                               char *dialogFNGName,
                                               char *textFormat,
                                               void *textParameterPtr)}
  Calls {558020}.                                                                                                       ||| ref

- {558310 int ShowButtonlessFormattedDialog(char *dialogParentFNGName,                                                  ||| func
                                            char *dialogFNGName,
                                            char *textFormat,
                                            int textParameter)}
  Delegates to {5582A0}.                                                                                                ||| ref

- {558330 int ShowButtonlessFormattedLanguageDialog(char *dialogParentFNGName,                                          ||| func
                                                    char *dialogFNGName,
                                                    unsigned int textLanguageString,
                                                    int textParameter)}
  Delegates to {5582A0}.                                                                                                ||| ref

- {558390 int ShowStandardFormattedErrorDialog(char *dialogParentFNGName,                                               ||| func
                                               char *dialogFNGName,
                                               char *textFormat,
                                               void *textParameterPtr)}
  Calls {558020}.                                                                                                       ||| ref
  Uses {0x639(OK)} for {structDialogInfo+310}, {0x34DC1BEC} for {structDialogInfo+314},                                 ||| code,refto,code,refto
  {0xB4EDEB6D} for {structDialogInfo+318}, {0} for {structDialogInfo+31C},                                              ||| code,refto,code,refto
  {1} for {structDialogInfo+328} and {structDialogInfo+32C}.                                                            ||| code,refto,refto

- {558430 int ShowStandardFormattedLanguageErrorDialog(char *dialogParentFNGName,                                       ||| func
                                                       char *dialogFNGName,
                                                       unsigned int textFormatLanguageString,
                                                       int textParameter)}
  Delegates to {558390}.                                                                                                ||| ref

- {558490 int ShowSingleButtonFormattedDialog318_32C(char *dialogParentFNGName,                                         ||| func
                                                     char *dialogFNGName,
                                                     unsigned int middleButtonLanguageString,
                                                     unsigned int middleButtonMessage,
                                                     int dialogField318,
                                                     char byteDialogField32C,
                                                     char *textFormat,
                                                     void *textParameterPtr)}
  Calls {558020}.                                                                                                       ||| ref
  Uses {0} for {structDialogInfo+31C} and {1} for {structDialogInfo+328}.                                               ||| code,refto,code,refto

- {558540 int ShowSingleButtonFormattedDialog318(char *dialogParentFNGName,                                             ||| func
                                                 char *dialogFNGName,
                                                 unsigned int middleButtonLanguageString,
                                                 unsigned int middleButtonMessage,
                                                 int dialogField318,
                                                 char *textFormat,
                                                 int textParameter)}
  Delegates to {558490}.                                                                                                ||| ref
  Uses {1} for {structDialogInfo+32C}.                                                                                  ||| code,refto

- {558570 int ShowSingleButtonFormattedLanguageDialog318(char *dialogParentFNGName,                                     ||| func
                                                         char *dialogFNGName,
                                                         unsigned int middleButtonLanguageString,
                                                         unsigned int middleButtonMessage,
                                                         int dialogField318,
                                                         unsigned int textLanguageString,
                                                         int textParameter)}
  Delegates to {558490}.                                                                                                ||| ref
  Uses {1} for {structDialogInfo+32C}.                                                                                  ||| code,refto

- {5585E0 int ShowSingleButtonFormattedDialog(char *dialogParentFNGName,                                                ||| func
                                              char *dialogFNGName,
                                              unsigned int middleButtonLanguageString,
                                              unsigned int middleButtonMessage,
                                              char *textFormat,
                                              int textParameter)}
  Delegates to {558490}.                                                                                                ||| ref
  Uses {0} for {structDialogInfo+318} and {structDialogInfo+32C}.                                                       ||| code,refto,refto

- {558610 int ShowSingleButtonFormattedLanguageDialog(char *dialogParentFNGName,                                        ||| func
                                                      char *dialogFNGName,
                                                      unsigned int middleButtonLanguageString,
                                                      unsigned int middleButtonMessage,
                                                      unsigned int textLanguageString,
                                                      int textParameter)}
  Delegates to {558490}.                                                                                                ||| ref
  Uses {0} for {structDialogInfo+318} and {structDialogInfo+32C}.                                                       ||| code,refto,refto

- {558680 int ShowTwoButtonFormattedDialog318_31C_32C(char *dialogParentFNGName,                                        ||| func
                                                      char *dialogFNGName,
                                                      unsigned int leftButtonLanguageString,
                                                      unsigned int rightButtonLanguageString,
                                                      unsigned int leftButtonMessage,
                                                      unsigned int rightButtonMessage,
                                                      int dialogField318,
                                                      char dialogField_32C,
                                                      int dialogField_31C,
                                                      char *textFormat,
                                                      void *textParameterPtr)}
  Calls {558020}.                                                                                                       ||| ref

- {558750 int ShowTwoButtonFormattedDialog318_31C(char *dialogParentFNGName,                                            ||| func
                                                  char *dialogFNGName,
                                                  unsigned int leftButtonLanguageString,
                                                  unsigned int rightButtonLanguageString,
                                                  unsigned int leftButtonMessage,
                                                  unsigned int rightButtonMessage,
                                                  int dialogField318,
                                                  int dialogField31C,
                                                  char *textFormat,
                                                  int textParameter)}
  Delegates to {558680} with {1} for {structDialogInfo+32C}.                                                            ||| ref,code,refto

- {558790 int ShowTwoButtonFormattedLanguageDialog318_31C(char *dialogParentFNGName,                                    ||| func
                                                          char *dialogFNGName,
                                                          unsigned int leftButtonLanguageString,
                                                          unsigned int rightButtonLanguageString,
                                                          unsigned int leftButtonMessage,
                                                          unsigned int rightButtonMessage,
                                                          int dialogField318,
                                                          int dialogField31C,
                                                          unsigned int textFormatLanguageString,
                                                          int textParameter)}
  Delegates to {558680} with {1} for {structDialogInfo+32C}.                                                            ||| ref,code,refto

- {558820 int ShowTwoButtonFormattedDialog31C(int dialogParentFNGName,                                                  ||| func
                                              int dialogFNGName,
                                              unsigned int leftButtonLanguageString,
                                              unsigned int rightButtonLanguageString,
                                              unsigned int leftButtonMessage,
                                              unsigned int rightButtonMessage,
                                              int dialogField31C,
                                              char *textFormat,
                                              int textParameter)}
  Delegates to {558680} with {0} for {structDialogInfo+318} and {structDialogInfo+32C}.                                 ||| ref,code,refto,refto

- {558860 int ShowTwoButtonFormattedLanguageDialog31C(char *dialogParentFNGName,                                        ||| func
                                                      char *dialogFNGName,
                                                      unsigned int leftButtonLanguageString,
                                                      unsigned int rightButtonLanguageString,
                                                      unsigned int leftButtonMessage,
                                                      unsigned int rightButtonMessage,
                                                      int dialogField31C,
                                                      char *textFormat,
                                                      int textParameter)}
  Delegates to {558680} with {0} for {structDialogInfo+318} and {structDialogInfo+32C}.                                 ||| ref,code,refto,refto

- {5588F0 int ShowThreeButtonFormattedDialog318_31C(char *dialogParentFNGName,                                          ||| func
                                                    char *dialogFNGName,
                                                    unsigned int leftButtonLanguageString,
                                                    unsigned int rightButtonLanguageString,
                                                    unsigned int middleButtonLanguageString,
                                                    unsigned int leftButtonMessage,
                                                    unsigned int rightButtonMessage,
                                                    unsigned int middleButtonMessage,
                                                    int dialogField318,
                                                    int dialogField31C,
                                                    char *textFormat,
                                                    void *textParameterPtr)}
  Calls {558020} with {3} for {structDialogInfo+328}, {1} for {structDialogInfo+32C}.                                   ||| ref,code,refto,code,refto

- {5589D0 int ShowThreeButtonFormattedDialog318_31C(char *dialogParentFNGName,                                          ||| func
                                                    char *dialogFNGName,
                                                    unsigned int leftButtonLanguageString,
                                                    unsigned int rightButtonLanguageString,
                                                    unsigned int middleButtonLanguageString,
                                                    unsigned int leftButtonMessage,
                                                    unsigned int rightButtonMessage,
                                                    unsigned int middleButtonMessage,
                                                    int dialogField318,
                                                    int dialogField31C,
                                                    char *textFormat,
                                                    int textParameter)}
  Delegates to {5588F0}.                                                                                                ||| ref

- {558A20 int ShowThreeButtonFormattedLanguageDialog318_31C(char *dialogParentFNGName,                                  ||| func
                                                            char *dialogFNGName,
                                                            unsigned int leftButtonLanguageString,
                                                            unsigned int rightButtonLanguageString,
                                                            unsigned int middleButtonLanguageString,
                                                            unsigned int leftButtonMessage,
                                                            unsigned int rightButtonMessage,
                                                            unsigned int middleButtonMessage,
                                                            int dialogField318,
                                                            int dialogField31C,
                                                            unsigned int textFormatLanguageString,
                                                            int textParameter)}
  Delegates to {5588F0}.                                                                                                ||| ref

- {558AC0 int ShowHelpDialog(char *dialogParentFNGName, char *dialogFNGName, unsigned int textLanguageString)}          ||| func
  Calls {558020} with {1} for {structDialogInfo+328}, {structDialogInfo+32C}, {structDialogInfo+32D}.                   ||| ref,code,refto,refto,refto
  Uses {0x639(OK)} for {structDialogInfo+310}, {0x34DC1BEC} for {structDialogInfo+314},                                 ||| code,refto,code,refto
  {0xB4EDEB6D} for {structDialogInfo+318}, {0} for {structDialogInfo+31C}.                                              ||| code,refto,code,refto

- {7F6DE0 int nextDialogId}                                                                     ||| field
  When {558020} is called, value is put into {838974} and incremented.                          ||| ref,ref

- {838640 {struct DialogInfo} shownDialogData}                                                  ||| field,refto
  Dialog info passed to {558020} is copied into here, TODO xrefs                                ||| ref

- {838960 char* shownDialogParent}                                                              ||| field
  Example value: {UI_PerformanceTuning_Setting.fng}.                                            ||| code

- {838964 char* shownDialogType}                                                                ||| field
  Example value: {GenericDialog_MED.fng}.                                                       ||| code

- {838970 int dialogDismissedByOtherDialogMsg}                                                  ||| field
  Unsure yet.

- {838974 int shownDialogId}                                                                    ||| field
  Zero when none.
.pop symbols

.pop section
.push section

{FNG things}  ||| h id=fngthings

Thanks to {558020} code, following things were discovered:                                      ||| ref

.push pre
{struct FNGShowData} \{                                                                         ||| mkref
	char *fngname;
	int arg1;
	unsigned int helpTextLanguageString; /*set to {structFNGData+8}*/
	unsigned int helpBarMask; /*set to {structFNGData+C}*/
	int arg2;
};
EXPECT_SIZE(struct FNGMessage, 0x14);

typedef int ({fnginithandler})({struct FNGShowData} *msg);                                      ||| mkref,refto

{struct FNGData} \{                                                                             ||| mkref
	char *name;
	{fnginithandler} *initializeHandler;                                                    ||| refto
	unsigned int {helpTextLanguageString};                                                  ||| mkref name=structFNGData+8
	unsigned int {helpBarMask};                                                             ||| mkref name=structFNGData+C
	int field_10;
	int field_14;
	int field_18;
};
EXPECT_SIZE(struct FNGData, 0x1C);

{struct FNGInfo} \{                                                                             ||| mkref
        int field_0;
        {struct FNGInfo} *{child};                                                              ||| refto,mkref name=structFNGInfo+4
        int field_8;
        char *{fngName};                                                                        ||| mkref name=structFNGInfo+C
        unsigned int {hash};                                                                    ||| mkref name=structFNGInfo+10
        int field_14;
        int field_18;
        int controlMask;
        int field_20;
        int field_24;
        int field_28;
        int field_2C;
        int field_30;
        int field_34;
        int field_38;
        int field_3C;
        int field_40;
        int field_44;
        int field_48;
        {struct UIElement} *{rootUIElement};                                                    ||| refto,mkref name=structFNGInfo+4C
};

{struct UIData} \{                                                                              ||| mkref
        /*TODO*/
        {struct UIData_Field8} *{field_8};                                                      ||| refto,mkref name=structUIData+8
};


{struct UIData_Field8} \{                                                                       ||| mkref
        /*incomplete*/
        /*+E4*/
        {struct FNGInfo} *{topPackage};                                                         ||| refto,mkref name=structUIData_Field8+E4
};

struct FNGData {7F7DC8}[] = \{                                                                  ||| refplain
{{collapsed data} ||| details,summary
.controlchars []
/*7F7DC8*/{ "UI_Main.fng", // 0
            0x4ED6B0,
            HELP_MAIN_MENU,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE,
            0x0, 0x100, 0x0 },

/*7F7DE4*/{ "UI_OptionsMain.fng", // 1
            0x4EFDE0,
            HELP_OPTIONS_MAIN,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK,
            0x0, 0x80, 0x0 },

/*7F7E00*/{ "UI_Options.fng", // 2
            0x4E3710,
            HELP_OPTIONS,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_BACK,
            0x0, 0x1CA, 0x0 },

/*7F7E1C*/{ "UI_Wheel_Options.fng", // 3
            0x4E3770,
            HELP_WHEEL,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_BACK,
            0x0, 0x1CA, 0x0 },

/*7F7E38*/{ "UI_PC_Customize_Options.fng", // 4
            0x4E36B0,
            0,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_BACK,
            0x0, 0x1CA, 0x0 },

/*7F7E54*/{ "UI_Options_PC_Controller.fng", // 5
            0x4F92E0,
            0,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_BACK | BUTTON_DYNO_RESET_OR_PC_NAV_RESET_KEYS,
            0x0, 0x1CA, 0x0 },

/*7F7E70*/{ "UI_PC_LAN_ServerSelect.fng", // 6
            0x4FD4B0,
            0,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK | BUTTON_OL_HOST_LAN_SERVER,
            0x0, 0x1CA, 0x0 },

/*7F7E8C*/{ "UI_PC_LAN.fng", // 7
            0x4D6C90,
            0,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK,
            0x0, 0x1CA, 0x0 },

/*7F7EA8*/{ "UI_PC_Help_Bar.fng", // 8
            0x552280,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F7EC4*/{ "UI_Trailers.fng", // 9
            0x4CFB20,
            HELP_OPTIONS_TRAILERS,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_BACK,
            0x0, 0x80, 0x0 },

/*7F7EE0*/{ "Credits.fng", // 10
            0x4B8720,
            HELP_OPTIONS_CREDITS,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_BACK,
            0x0, 0x80, 0x0 },

/*7F7EFC*/{ "ScreenPrintf.fng", // 11
            0x0,
            0,
            0,
            0x0, 0x100, 0x1 },

/*7F7F18*/{ "loading_boot.fng", // 12
            0x0,
            0,
            0,
            0x0, 0x80, 0x2 },

/*7F7F34*/{ "UI_CareerCrib.fng", // 13
            0x4ED780,
            HELP_CRIB,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK,
            0x0, 0xC0, 0x0 },

/*7F7F50*/{ "UI_CribRewardOptionsMain.fng", // 14
            0x4ED7E0,
            HELP_CRIB_REWARD_OPTIONS,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK,
            0x0, 0xC0, 0x0 },

/*7F7F6C*/{ "UI_CareerCarSelect.fng", // 15
            0x4FC110,
            HELP_CRIB_CAR_SELECT,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK,
            0x0, 0xC0, 0x0 },

/*7F7F88*/{ "UI_StartCareer.fng", // 16
            0x4ED710,
            HELP_CAREER_OPTIONS,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK,
            0x0, 0xC0, 0x0 },

/*7F7FA4*/{ "UI_MagazineBack.fng", // 17
            0x554E60,
            0,
            0,
            0x0, 0xC0, 0x0 },

/*7F7FC0*/{ "UI_MagazineReward.fng", // 18
            0x56B140,
            0,
            0,
            0x0, 0xC0, 0x0 },

/*7F7FDC*/{ "UI_MagazineSelect.fng", // 19
            0x55B520,
            HELP_CRIB_MAGAZINE,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK,
            0x0, 0xC0, 0x0 },

/*7F7FF8*/{ "UI_MagazineView.fng", // 20
            0x554EC0,
            0,
            0,
            0x0, 0xC0, 0x0 },

/*7F8014*/{ "UI_RewardsSponsor.fng", // 21
            0x4ED840,
            HELP_CRIB_REWARD_SPONSORS,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_BACK,
            0x0, 0xC0, 0x0 },

/*7F8030*/{ "UI_CareerWorldMap.fng", // 22
            0x4F9D30,
            HELP_CRIB_WORLD_MAP,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_BACK | LAYOUT_WORLDMAP_POSITION,
            0x0, 0x80, 0x0 },

/*7F804C*/{ "UI_Status_Master.fng", // 23
            0x4E1B80,
            0,
            BUTTON_PC_NAV_BACK | LAYOUT_WORLDMAP_POSITION | LAYOUT_ONE_LINE_NO_BG,
            0x0, 0x80, 0x0 },

/*7F8068*/{ "UI_Status_Career.fng", // 24
            0x4EEB10,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F8084*/{ "UI_Status_Region.fng", // 25
            0x4B1C90,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F80A0*/{ "UI_Status_DVD.fng", // 26
            0x4B1D90,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F80BC*/{ "EA_Trax_Jukebox.fng", // 27
            0x554F20,
            HELP_OPTIONS_EATRAX,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_BACK,
            0x0, 0x80, 0x0 },

/*7F80D8*/{ "UI_Menu_Asset_Reputation.fng", // 28
            0x553B00,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F80F4*/{ "UI_CareerCarLot.fng", // 29
            0x4FC0B0,
            HELP_CAREER_CARLOT,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK,
            0x0, 0xC0, 0x0 },

/*7F8110*/{ "UI_EngageEventDialog.fng", // 30
            0x4CE650,
            0,
            0,
            0x0, 0xC0, 0x0 },

/*7F812C*/{ "UI_EngageRaceDialog.fng", // 31
            0x4E34A0,
            0,
            0,
            0x0, 0xC0, 0x0 },

/*7F8148*/{ "UI_EngageShopDialog.fng", // 32
            0x4CE6B0,
            0,
            0,
            0x0, 0xC0, 0x0 },

/*7F8164*/{ "UI_Showcase_Preview.fng", // 33
            0x4E3500,
            0,
            0,
            0x0, 0xC0, 0x0 },

/*7F8180*/{ "UI_Showcase_DPAD.fng", // 34
            0x4CF5C0,
            0,
            0,
            0x0, 0xC0, 0x0 },

/*7F819C*/{ "IG_PlayMovie.fng", // 35
            0x554E00,
            0,
            0,
            0x0, 0xC0, 0x0 },

/*7F81B8*/{ "UI_Pause.fng", // 36
            0x4F4790,
            0,
            BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK | LAYOUT_ONE_LINE_NO_BG | LAYOUT_PAUSEMENU_POSITION,
            0x0, 0xC0, 0x0 },

/*7F81D4*/{ "UI_PauseOptionsMain.fng", // 37
            0x4F47F0,
            0,
            BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK | LAYOUT_ONE_LINE_NO_BG | LAYOUT_PAUSEMENU_POSITION,
            0x0, 0x80, 0x0 },

/*7F81F0*/{ "UI_PauseOptions.fng", // 38
            0x4EB650,
            0,
            BUTTON_PC_NAV_BACK | LAYOUT_ONE_LINE_NO_BG,
            0x0, 0x440, 0x0 },

/*7F820C*/{ "UI_ReplayControl.fng", // 39
            0x4D7AD0,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F8228*/{ "HUD_SingleRace.fng", // 40
            0x0,
            0,
            0,
            0x0, 0x168, 0x1 },

/*7F8244*/{ "HUD_Drift.fng", // 41
            0x0,
            0,
            0,
            0x0, 0x80, 0x1 },

/*7F8260*/{ "HUD_Drag.fng", // 42
            0x0,
            0,
            0,
            0x0, 0x80, 0x1 },

/*7F827C*/{ "UI_InGame_WorldMap.fng", // 43
            0x4F9C10,
            0,
            BUTTON_PC_NAV_BACK | LAYOUT_WORLDMAP_POSITION | LAYOUT_ONE_LINE_NO_BG,
            0x0, 0x80, 0x0 },

/*7F8298*/{ "UI_EngageMessageDialog.fng", // 44
            0x4B2240,
            0,
            BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK | LAYOUT_WORLDMAP_POSITION | LAYOUT_ONE_LINE_NO_BG,
            0x0, 0x80, 0x0 },

/*7F82B4*/{ "UI_SMS_Mailbox.fng", // 45
            0x4E2050,
            0,
            BUTTON_PC_NAV_READ_MESSAGE | BUTTON_PC_NAV_BACK | BUTTON_PC_NAV_DELETE | LAYOUT_WORLDMAP_POSITION | LAYOUT_ONE_LINE_NO_BG,
            0x0, 0x80, 0x0 },

/*7F82D0*/{ "GarageMain.fng", // 46
            0x4EB130,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F82EC*/{ "DiscError.fng", // 47
            0x5522D0,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F8308*/{ "GenericDialog.fng", // 48
            0x0,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F8324*/{ "GenericDialog_LARGE.fng", // 49
            0x0,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F8340*/{ "GenericDialog_MED.fng", // 50
            0x0,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F835C*/{ "GenericDialog_SMALL.fng", // 51
            0x0,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F8378*/{ "GenericDialog_Animate_LARGE.fng", // 52
            0x0,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F8394*/{ "GenericDialog_Animate_MED.fng", // 53
            0x0,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F83B0*/{ "GenericDialog_Animate_SMALL.fng", // 54
            0x0,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F83CC*/{ "GenericDialog_ThreeButton.fng", // 55
            0x0,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F83E8*/{ "IG_GenericDialog_LARGE.fng", // 56
            0x0,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F8404*/{ "IG_GenericDialog_MED.fng", // 57
            0x0,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F8420*/{ "IG_GenericDialog_SMALL.fng", // 58
            0x0,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F843C*/{ "HelpDialog_LARGE.fng", // 59
            0x0,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F8458*/{ "HelpDialog_MED.fng", // 60
            0x0,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F8474*/{ "HelpDialog_SMALL.fng", // 61
            0x0,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F8490*/{ "GenericerDialog.fng", // 62
            0x0,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F84AC*/{ "MU_QRTransmissionSelect.fng", // 63
            0x0,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F84C8*/{ "MU_QuickRaceCarSelect.fng", // 64
            0x4EB1A0,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F84E4*/{ "Chyron_FE.fng", // 65
            0x4CB180,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F8500*/{ "Chyron_IG.fng", // 66
            0x4CB180,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F851C*/{ "UI_DebugTest.fng", // 67
            0x4B89B0,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F8538*/{ "UI_InGameDialog.fng", // 68
            0x0,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F8554*/{ "UI_VirtualKeyboard.fng", // 69
            0x4EFD40,
            HELP_VIRTUAL_KEYBOARD,
            0,
            0x0, 0x258, 0x0 },

/*7F8570*/{ "UI_QRModeSelect.fng", // 70
            0x4EF280,
            HELP_QR_MODE_SELECT,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK,
            0x0, 0x80, 0x0 },

/*7F858C*/{ "UI_QRModeOptions.fng", // 71
            0x4FA550,
            HELP_QR_MODE_OPTIONS,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK,
            0x0, 0x200, 0x0 },

/*7F85A8*/{ "UI_QRTrackSelect.fng", // 72
            0x4EF9B0,
            HELP_TRACK_SELECT,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK,
            0x0, 0x80, 0x0 },

/*7F85C4*/{ "UI_QRCarSelect.fng", // 73
            0x4FC190,
            HELP_QR_CAR_SELECT,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK | BUTTON_PC_NAV_CUSTOMIZE,
            0x0, 0x100, 0x0 },

/*7F85E0*/{ "UI_OLCarSelect.fng", // 74
            0x4FC190,
            HELP_OL_CAR_SELECT,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK | BUTTON_PC_NAV_CUSTOMIZE,
            0x0, 0x100, 0x0 },

/*7F85FC*/{ "2P_PressStart.fng", // 75
            0x4CCED0,
            0,
            0,
            0x0, 0x100, 0x0 },

/*7F8618*/{ "UI_DebugCarCustomize.fng", // 76
            0x554A00,
            0,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK,
            0x0, 0x80, 0x0 },

/*7F8634*/{ "UI_ChooseCustomizeCategory.fng", // 77
            0x5591E0,
            HELP_SHOP_SELECT,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK,
            0x0, 0x80, 0x0 },

/*7F8650*/{ "UI_ChoosePerformanceCategory.fng", // 78
            0x559C30,
            HELP_PERFORMANCE_SHOP_MAIN,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK,
            0x0, 0x80, 0x0 },

/*7F866C*/{ "UI_GenericParts_Browser.fng", // 79
            0x566430,
            HELP_CRIB_CHANGEPARTS_MAIN,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK,
            0xFFFFFFFF, 0x80, 0x0 },

/*7F8688*/{ "UI_ChoosePaintCategory.fng", // 80
            0x55A400,
            HELP_GRAPHICS_SHOP_MAIN,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE | BUTTON_CANCEL_CHANGES | BUTTON_PC_NAV_BACK,
            0x0, 0x80, 0x0 },

/*7F86A4*/{ "UI_ChoosePerformancePackage.fng", // 81
            0x55C8D0,
            HELP_PERFORMANCE_SHOP_MAIN,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_INSTALL_PACKAGE | BUTTON_PC_NAV_BACK,
            0x0, 0x80, 0x0 },

/*7F86C0*/{ "UI_BuyPerformanceParts.fng", // 82
            0x56C150,
            HELP_PERFORMANCE_SHOP_PART_SELECT,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_INSTALL_PART | BUTTON_PC_NAV_BACK,
            0x0, 0x80, 0x0 },

/*7F86DC*/{ "UI_PerformanceBrandSelect.fng", // 83
            0x554B80,
            0,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE,
            0x0, 0x80, 0x0 },

/*7F86F8*/{ "UI_Paint.fng", // 84
            0x56C1B0,
            HELP_GRAPHICS_SHOP_PAINT_SELECT,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK,
            0x0, 0x80, 0x0 },

/*7F8714*/{ "UI_ChooseVinylLayer.fng", // 85
            0x555440,
            HELP_GRAPHICS_SHOP_VINYL_LAYER_SELECT,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK,
            0x0, 0x80, 0x0 },

/*7F8730*/{ "UI_ChooseUniquePart.fng", // 86
            0x554B20,
            HELP_UNIQUES_BROWSER,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_INSTALL_PART | BUTTON_PC_NAV_BACK,
            0x0, 0x80, 0x0 },

/*7F874C*/{ "UI_DecalMain.fng", // 87
            0x554AC0,
            HELP_GRAPHICS_SHOP_DECAL_SELECT_CATEGORY,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK,
            0x0, 0x80, 0x0 },

/*7F8768*/{ "UI_DecalsOverlay.fng", // 88
            0x56B900,
            0,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK,
            0x0, 0x80, 0x0 },

/*7F8784*/{ "UI_DecalsOverlayInvis.fng", // 89
            0x56B900,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F87A0*/{ "UI_ChooseCustomHUD.fng", // 90
            0x554DA0,
            HELP_CHANGE_HUD_COLOR,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK,
            0x0, 0x80, 0x0 },

/*7F87BC*/{ "UI_ChooseRimBrand.fng", // 91
            0x554A60,
            HELP_BODY_SHOP_MAIN,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK,
            0x0, 0x80, 0x0 },

/*7F87D8*/{ "UI_Rims_Browser.fng", // 92
            0x56B350,
            HELP_BODY_SHOP_MAIN,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK,
            0x0, 0x80, 0x0 },

/*7F87F4*/{ "UI_ChooseSpinner.fng", // 93
            0x56C0F0,
            HELP_BODY_SHOP_MAIN,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK,
            0x0, 0x80, 0x0 },

/*7F8810*/{ "UI_PerformanceDyno_MAIN.fng", // 94
            0x55D7F0,
            0,
            BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK,
            0x0, 0x100, 0x0 },

/*7F882C*/{ "UI_PerformanceTuning_Master.fng", // 95
            0x55D8B0,
            0,
            BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK,
            0x0, 0x80, 0x0 },

/*7F8848*/{ "UI_PerformanceTuning_Graph.fng", // 96
            0x55DB70,
            0,
            BUTTON_PC_NAV_BACK | BUTTON_DYNO_RESET_OR_PC_NAV_RESET_KEYS | BUTTON_DYNO_TIP,
            0x0, 0x100, 0x0 },

/*7F8864*/{ "UI_PerformanceTuning_NOS.fng", // 97
            0x55DB70,
            0,
            BUTTON_PC_NAV_BACK | BUTTON_DYNO_RESET_OR_PC_NAV_RESET_KEYS | BUTTON_DYNO_TIP,
            0x0, 0x100, 0x0 },

/*7F8880*/{ "UI_PerformanceTuning_Sliders.fng", // 98
            0x55DB10,
            0,
            BUTTON_PC_NAV_BACK | BUTTON_DYNO_RESET_OR_PC_NAV_RESET_KEYS,
            0x0, 0x100, 0x0 },

/*7F889C*/{ "UI_PerformanceTuning_Drivetrain.fng", // 99
            0x55DB10,
            0,
            BUTTON_PC_NAV_BACK | BUTTON_DYNO_RESET_OR_PC_NAV_RESET_KEYS | BUTTON_DYNO_TIP,
            0x0, 0x100, 0x0 },

/*7F88B8*/{ "UI_PerformanceTuning_Setting.fng", // 100
            0x55D850,
            0,
            BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK,
            0x0, 0x100, 0x0 },

/*7F88D4*/{ "UI_PerformanceDyno_Chart.fng", // 101
            0x55AF20,
            0,
            BUTTON_PC_NAV_CONTINUE,
            0x0, 0x100, 0x0 },

/*7F88F0*/{ "UI_PerformanceDyno_Results.fng", // 102
            0x55AF80,
            0,
            BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK,
            0x0, 0x100, 0x0 },

/*7F890C*/{ "UI_ICEMAIN.fng", // 103
            0x560550,
            HELP_CARSPECIALTIES_SHOP_MAIN,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK,
            0x0, 0x100, 0x0 },

/*7F8928*/{ "UI_IcePartsOverlay.fng", // 104
            0x56C3C0,
            0,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_INSTALL_PART | BUTTON_PC_NAV_BACK,
            0x0, 0x100, 0x0 },

/*7F8944*/{ "UI_CustomNeonMain.fng", // 105
            0x554C40,
            0,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK,
            0x0, 0x100, 0x0 },

/*7F8960*/{ "UI_NeonPartsOverlay.fng", // 106
            0x554BE0,
            0,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_INSTALL_PART | BUTTON_PC_NAV_BACK,
            0x0, 0x100, 0x0 },

/*7F897C*/{ "UI_CustomHUDOverlay.fng", // 107
            0x56C420,
            HELP_HUD_SELECT,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_INSTALL_PART | BUTTON_PC_NAV_BACK,
            0x0, 0x100, 0x0 },

/*7F8998*/{ "UI_PostRaceResults.fng", // 108
            0x4FBB60,
            0,
            BUTTON_PC_NAV_CONTINUE | LAYOUT_ONE_LINE_NO_BG | LAYOUT_RIGHT_POSITION,
            0x0, 0x80, 0x0 },

/*7F89B4*/{ "UI_PostRaceReward.fng", // 109
            0x4D72F0,
            0,
            BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK,
            0x0, 0x80, 0x0 },

/*7F89D0*/{ "UI_SponsorPopup.fng", // 110
            0x4C1280,
            0,
            BUTTON_PC_NAV_BACK,
            0x0, 0x80, 0x0 },

/*7F89EC*/{ "UI_Sponsorship_new.fng", // 111
            0x4F4730,
            0,
            BUTTON_PC_NAV_BACK,
            0x0, 0x80, 0x0 },

/*7F8A08*/{ "UI_PostRace_TournResults.fng", // 112
            0x4FBF00,
            0,
            BUTTON_PC_NAV_CONTINUE | LAYOUT_ONE_LINE_NO_BG | LAYOUT_RIGHT_POSITION,
            0x0, 0x80, 0x0 },

/*7F8A24*/{ "UI_PostRace_TournStandings.fng", // 113
            0x4FBF60,
            0,
            BUTTON_PC_NAV_CONTINUE,
            0x0, 0x80, 0x0 },

/*7F8A40*/{ "UI_PostRaceStats.fng", // 114
            0x4FD6C0,
            0,
            BUTTON_PC_NAV_BACK | LAYOUT_ONE_LINE_NO_BG,
            0x0, 0x80, 0x0 },

/*7F8A5C*/{ "UI_PostRace.fng", // 115
            0x4F3940,
            0,
            BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK | LAYOUT_ONE_LINE_NO_BG | LAYOUT_PAUSEMENU_POSITION,
            0x0, 0x80, 0x0 },

/*7F8A78*/{ "MU_PostRaceConfirm.fng", // 116
            0x0,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F8A94*/{ "LS_BlankMovie.fng", // 117
            0x4A8AD0,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F8AB0*/{ "LS_EALogo.fng", // 118
            0x4A89D0,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F8ACC*/{ "MW_LS_IntroFMV.fng", // 119
            0x4C52D0,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F8AE8*/{ "MW_LS_Splash.fng", // 120
            0x4C5500,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F8B04*/{ "UG_LS_IntroFMV.fng", // 121
            0x4C52D0,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F8B20*/{ "UG_LS_Splash.fng", // 122
            0x4C5500,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F8B3C*/{ "LS_THXMovie.fng", // 123
            0x4A8D90,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F8B58*/{ "LS_PSAMovie.fng", // 124
            0x4A8C60,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F8B74*/{ "LS_Demo_Legal.fng", // 125
            0x4C50C0,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F8B90*/{ "LS_Demo_PSA.fng", // 126
            0x4A8EC0,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F8BAC*/{ "LS_Demo_ESRB.fng", // 127
            0x4A8F50,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F8BC8*/{ "LS_Demo_Warning.fng", // 128
            0x4A9080,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F8BE4*/{ "UI_EngageMessageDialog.fng", // 129
            0x4B2240,
            0,
            BUTTON_PC_NAV_BACK | BUTTON_PC_NAV_DELETE | LAYOUT_ONE_LINE_NO_BG,
            0x0, 0x80, 0x0 },

/*7F8C00*/{ "", // 130
            0x4D9480,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F8C1C*/{ "LS_LangSelect.fng", // 131
            0x4F48A0,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F8C38*/{ "LS_Chinese_Health.fng", // 132
            0x4A87E0,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F8C54*/{ "UI_OL_Disconnect.fng", // 133
            0x4D0390,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F8C70*/{ "UI_OL_Disconnect_BG.fng", // 134
            0x4D03F0,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F8C8C*/{ "UI_OL_WebOffer.fng", // 135
            0x49D550,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F8CA8*/{ "UI_OL_WebOffer2.fng", // 136
            0x4B9E80,
            0,
            0,
            0x0, 0x0, 0x0 },

/*7F8CC4*/{ "UI_OL_News.fng", // 137
            0x49D4F0,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F8CE0*/{ "UI_OLLobbyRoom.fng", // 138
            0x4FA990,
            HELP_OL_LOBBY,
            0,
            0x0, 0x200, 0x0 },

/*7F8CFC*/{ "UI_OLGameRoom.fng", // 139
            0x4F1820,
            HELP_OL_GAMEROOM,
            0,
            0x0, 0x200, 0x0 },

/*7F8D18*/{ "UI_OLGameRoom_host.fng", // 140
            0x4F1880,
            0,
            0,
            0x0, 0x200, 0x0 },

/*7F8D34*/{ "UI_OLGameRoom_client.fng", // 141
            0x4F18E0,
            0,
            0,
            0x0, 0x200, 0x0 },

/*7F8D50*/{ "UI_OLPreRaceStart.fng", // 142
            0x4D3430,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F8D6C*/{ "UI_OL_ViewCar.fng", // 143
            0x4FB260,
            HELP_OL_VIEWCAR,
            BUTTON_PC_NAV_BACK,
            0x0, 0x100, 0x0 },

/*7F8D88*/{ "UI_OL_ViewTrack.fng", // 144
            0x4FB2C0,
            HELP_OL_VIEWTRACK,
            BUTTON_PC_NAV_BACK,
            0x0, 0x80, 0x0 },

/*7F8DA4*/{ "UI_OLCarLot.fng", // 145
            0x4FD450,
            HELP_OL__TRADECAR_MAIN,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK,
            0x0, 0x80, 0x0 },

/*7F8DC0*/{ "UI_OLMAIN.fng", // 146
            0x4F1940,
            HELP_OL_MAIN_MENU,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK | BUTTON_PC_NAV_EA_MESSENGER,
            0x0, 0x80, 0x0 },

/*7F8DDC*/{ "UI_OLFilters.fng", // 147
            0x4E6530,
            0,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK | BUTTON_PC_NAV_EA_MESSENGER,
            0x0, 0x80, 0x0 },

/*7F8DF8*/{ "PC_OL_Lobby.fng", // 148
            0x4FA990,
            0,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_BACK | BUTTON_PC_NAV_EA_MESSENGER,
            0x0, 0x80, 0x0 },

/*7F8E14*/{ "PC_OL_GameRoom.fng", // 149
            0x4F1820,
            HELP_OL_GAME_ROOM,
            BUTTON_PC_NAV_BACK | BUTTON_PC_NAV_EA_MESSENGER,
            0x0, 0x200, 0x0 },

/*7F8E30*/{ "UI_OLPassword.fng", // 150
            0x4E42C0,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F8E4C*/{ "UI_OLRankings_Personal.fng", // 151
            0x4F1BC0,
            HELP_OL_PERSONAL_RANK,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_BACK | BUTTON_PC_NAV_EA_MESSENGER,
            0x0, 0x80, 0x0 },

/*7F8E68*/{ "UI_OLRankings_Overall.fng", // 152
            0x4FB1A0,
            HELP_OL_OVERALL_RANK,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK | BUTTON_PC_NAV_EA_MESSENGER,
            0x0, 0x80, 0x0 },

/*7F8E84*/{ "UI_OLRankings_Monthly.fng", // 153
            0x4E64D0,
            HELP_OL_MONTHLY_RANK,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_BACK | BUTTON_PC_NAV_EA_MESSENGER,
            0x0, 0x80, 0x0 },

/*7F8EA0*/{ "UI_OLEAMessenger.fng", // 154
            0x4F22F0,
            HELP_OL_MESSENGER,
            0,
            0x0, 0x80, 0x0 },

/*7F8EBC*/{ "PC_OL_SEARCH.fng", // 155
            0x4D5070,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F8ED8*/{ "UI_OL_FriendDialogue.fng", // 156
            0x4FB200,
            0,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK,
            0x0, 0x80, 0x0 },

/*7F8EF4*/{ "UI_OLX_Message.fng", // 157
            0x4F24E0,
            0,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK,
            0x0, 0x80, 0x0 },

/*7F8F10*/{ "UI_OLRankings.fng", // 158
            0x4F2540,
            HELP_OL_RANKINGS_MENU,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK | BUTTON_PC_NAV_EA_MESSENGER,
            0x0, 0x80, 0x0 },

/*7F8F2C*/{ "UI_OLX_FindResults.fng", // 159
            0x4F25A0,
            0,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK,
            0x0, 0x80, 0x0 },

/*7F8F48*/{ "UI_OL_Feedback.fng", // 160
            0x4F27E0,
            HELP_OL_MESSENGER_FEEDBACK,
            0,
            0x0, 0x80, 0x0 },

/*7F8F64*/{ "UI_OL_Challenge.fng", // 161
            0x4D6940,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F8F80*/{ "UI_OLViewCareer.fng", // 162
            0x4E88C0,
            0,
            BUTTON_PC_NAV_BACK,
            0x0, 0x80, 0x0 },

/*7F8F9C*/{ "UI_OLISPConnect.fng", // 163
            0x4B9750,
            0,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK,
            0x0, 0x0, 0x0 },

/*7F8FB8*/{ "UI_OLSelectPersona.fng", // 164
            0x4E3CD0,
            HELP_OL_PS2_PERSONA_SELECT,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK | BUTTON_PC_NAV_DELETE,
            0x0, 0x100, 0x0 },

/*7F8FD4*/{ "UI_OLCreateUser.fng", // 165
            0x4E3D50,
            HELP_OL_PS2_CREATEACCOUNT,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_BACK,
            0x0, 0x0, 0x0 },

/*7F8FF0*/{ "UI_OLCreateUser_2.fng", // 166
            0x4BAA60,
            0,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_BACK,
            0x0, 0x0, 0x0 },

/*7F900C*/{ "UI_OLAgeVerif.fng", // 167
            0x4E3DD0,
            0,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK,
            0x0, 0x0, 0x0 },

/*7F9028*/{ "UI_OLAgeTooYoung.fng", // 168
            0x49E780,
            0,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK,
            0x0, 0x0, 0x0 },

/*7F9044*/{ "UI_OLUseExisting.fng", // 169
            0x4E3E30,
            HELP_OL_PS2_USEEXISTING,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK,
            0x0, 0x100, 0x0 },

/*7F9060*/{ "UI_OLForgotAccountName.fng", // 170
            0x4E3BD0,
            0,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK,
            0x0, 0x100, 0x0 },

/*7F907C*/{ "UI_OLEALogin.fng", // 171
            0x4E3C50,
            HELP_OL_PS2_EALOGIN,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK,
            0x0, 0x100, 0x0 },

/*7F9098*/{ "UI_DateEntry.fng", // 172
            0x552720,
            HELP_OL_PS2_DATEWIDGET,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK,
            0x0, 0x0, 0x0 },

/*7F90B4*/{ "DiscErrorPC.fng", // 173
            0x4D97A0,
            0,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK,
            0x0, 0x80, 0x0 },

/*7F90D0*/{ "UI_ProfileManager.fng", // 174
            0x4F4900,
            HELP_OPTIONS_MAIN,
            BUTTON_PC_NAV_QUIT | BUTTON_PC_NAV_CONTINUE | BUTTON_PC_NAV_BACK,
            0x0, 0x80, 0x0 },

/*7F90EC*/{ "UI_Deleteprofile.fng", // 175
            0x4F4960,
            HELP_OPTIONS_MAIN,
            0,
            0x0, 0x80, 0x0 },

/*7F9108*/{ "MC_Bootup.fng", // 176
            0x4F32B0,
            0,
            0,
            0x0, 0x80, 0x0 },

/*7F9124*/{ "MC_List.fng", // 177
            0x4D7070,
            HELP_LOAD_PROFILE_BOOT,
            BUTTON_PC_NAV_QUIT,
            0x0, 0x80, 0x0 },

/*7F9140*/{ "MC_Main.fng", // 178
            0x4F3320,
            0,
            BUTTON_PC_NAV_QUIT,
            0x0, 0x80, 0x0 },

/*7F915C*/{ "MC_Background.fng", // 179
            0x4A8740,
            0,
            0,
            0x0, 0x80, 0x0 },
.controlchars {}
}\};

{struct PCHelpBarFNGObject} \{                                                                                  ||| mkref
        // todo
}
.pop pre

{{Short excerpt from hooking {50B790}}                                                          ||| details,summary,ref

{arg2} for the dialogs are a pointer to the text string                                         ||| code

.push pre
ShowFNG(AB447B38 (""), 037864A0, 00000000) = 00000000
ShowFNG(33AC1CB4 ("UI_PC_Help_Bar.fng"), 0378BD30, 00000000) = 03D7EB60
ShowFNG(E503D390 ("MC_Bootup.fng"), 0379ADE0, 00000000) = 03786140
ShowFNG(23F4270A ("LS_PSAMovie.fng"), 03786120, 00000000) = 03787AD0
ShowFNG(F774ED37 ("MC_Background.fng"), 03786120, 00000000) = 03786290
ShowFNG(801E019C ("MC_Main.fng"), 03787F40, 00000000) = 0379F4B0
ShowFNG(136E3C13 ("MC_List.fng"), 0379C8C0, 00000000) = 037A86F0
ShowFNG(4CDD8B14 ("GarageMain.fng"), 037AE470, 00000000) = 037AFD70
ShowFNG(C343126A ("UI_Main.fng"), 037A8EC0, 00000000) = 037AE880
ShowFNG(8E2B101E ("UI_QRCarSelect.fng"), 037879D0, 00000000) = 0379D3B0
ShowFNG(887BBEA7 ("UI_ChooseCustomizeCategory.fng"), 0379BF40, 00000000) = 03787570
ShowFNG(DF3D7763 ("UI_Menu_Asset_Reputation.fng"), 03789730, 00000000) = 0378A940
ShowFNG(AF09F84F ("UI_GenericParts_Browser.fng"), 0378A860, 00000000) = 037BBBB0
ShowFNG(887BBEA7 ("UI_ChooseCustomizeCategory.fng"), 037B9F40, 00000000) = 037BE620
ShowFNG(8E2B101E ("UI_QRCarSelect.fng"), 037BE4A0, 00000000) = 03787660
ShowFNG(C343126A ("UI_Main.fng"), 0378A570, 00000000) = 0379F260
ShowFNG(F6C99F4D ("UI_QRModeSelect.fng"), 0379F0F0, 00000000) = 03788380
ShowFNG(8E2B101E ("UI_QRCarSelect.fng"), 0378BF40, 00000000) = 0379B7C0
ShowFNG(6962C0CD ("GenericDialog_SMALL.fng"), 0379B620, 00838640) = 037A80E0
ShowFNG(6962C0CD ("GenericDialog_SMALL.fng"), 037AE720, 00838640) = 037ABA50
ShowFNG(6962C0CD ("GenericDialog_SMALL.fng"), 037AE720, 00838640) = 037ABA50
ShowFNG(AB447B38 (""), 03767010, 00000000) = 00000000
ShowFNG(0EB1F7E5 ("HUD_SingleRace.fng"), 037A45B0, 00000000) = 00000000
ShowFNG(26691D4A ("Chyron_IG.fng"), 03793AE0, 00000000) = 03D7EBF0
ShowFNG(33AC1CB4 ("UI_PC_Help_Bar.fng"), 037B8870, 00000000) = 03D7EB60
ShowFNG(32124083 ("UI_Pause.fng"), 03796280, 00000000) = 037B8B90
ShowFNG(33AC1CB4 ("UI_PC_Help_Bar.fng"), 037C7D30, 00000000) = 03D7EB60
ShowFNG(73F51C74 ("UI_PauseOptionsMain.fng"), 037C3EF0, 00000000) = 037C6080
ShowFNG(AEA9078F ("UI_PauseOptions.fng"), 037BAE10, 00000000) = 037D8430
ShowFNG(73F51C74 ("UI_PauseOptionsMain.fng"), 037D8F40, 00000000) = 037DE0C0
ShowFNG(33AC1CB4 ("UI_PC_Help_Bar.fng"), 037DFF40, 00000000) = 03D7EB60
ShowFNG(32124083 ("UI_Pause.fng"), 037DDF40, 00000000) = 037DE2B0
ShowFNG(AA469286 ("UI_InGameDialog.fng"), 037C1120, 00838640) = 037C2AB0
.pop pre
}

.push pre
{struct FERenderObject} \{                                                                                      ||| mkref
        {struct PoolEntry} {__parent};                                                                          ||| refto,mkref name=structFERenderObject+0
        int field_8;
        int field_C;
        int field_10;
        int field_14;
        {struct ObjectLink} {FERenderEPolyLink};                                                                ||| refto,mkref name=structFERenderObject+18
        /*size 0xA0*/
};
.pop pre

.push pre
TODO:
.rdata:0079C118 aIconscroller_5 db 'IconScrollerMenu : Switch/Pop/Direct Pop called on me (0x%x).',0Ah
.rdata:0079C118                                         ; DATA XREF: sub_543D40+3E9?o
.rdata:0079C118                 db 0
.rdata:0079C157                 align 4
.rdata:0079C158 aIconscroller_4 db 'IconScrollerMenu : EXIT/INIT_COMPLETE called on me (0x%x).',0Ah,0
.rdata:0079C158                                         ; DATA XREF: sub_543D40+38B?o
.rdata:0079C194 aIconscroller_2 db 'IconScrollerMenu : UNDIM_COMPLETE.',0Ah,0
.pop pre

.push ul
- {4B2240 int FNGINIT_UI_EngageMessageDialog_fng(void *arg)}                                    ||| func
  Calls {497850} and passes the arg and freshly allocated memory as {this}.                     ||| ref,code
  TODO

- {50B840 {struct FNGData}* GetFNGDataForHash(unsigned int hash)}                               ||| func,refto
  Goes through all the fng data above and returns the one with matching hash.

- {50B8E0 int SetInitializeHandlerForFNG(char *fng, {fnginithandler} *func)}                    ||| func,refto
  Goes through all the fng data above and set the handler for {43DCC0} matching fng names.      ||| ref

- {50B790 ShowFNG(int fnghash, int arg1, int arg2)}                                             ||| func
  See {nfsu2-re-hooks/replace-50B790-ShowFNG.c} for a reimplementation.                         ||| hookfileref

- {50C550 void FreeFNGFeRenderObjects({struct FNGInfo} *fng)}                                   ||| func,refto
  Frees all {{struct UIElement}::{structUIElement+58}} objects by calling {504880}              ||| code,refto,refto,ref
  using a visitor that has {5374F0} as its {{structUIElementVisitor$vtable+4}}.                 ||| ref,code,refto

- {50CE30 char *FindTopPackage(unsigned int *hashes, int numHashes)}                            ||| func
  Checks if any of the given hashes conform with
  {{8384C4}->{structUIData+8}->{structUIData_Field8+E4}->{structFNGInfo+10}}                    ||| code,refplain,refto,refto,refto
  and return its {{structFNGInfo+C}}.                                                           ||| code,refto

- {519E50 {struct FNGInfo} *__thiscall GetFNGInfoByNameByHierarchy(void *thisUnused,            ||| func,refto
                                                                   char *str,
                                                                   {struct FNGInfo} *fnginfo)}  ||| refto
  Goes through {{structFNGInfo+4}} until the next one is null or its                            ||| code,refto
  {{structFNGInfo+C}} and {{structFNGInfo+10}} matches.                                         ||| code,refto,code,refto
  {this} is unused.                                                                             ||| code

- {51CCD0 {struct FNGInfo} *__thiscall UIData::GetFNGInfoForName({struct UIData} *this, char *fngName)}                 ||| func,refto,refto
  Searches through levelSlotPool.

- {52C390 void __thiscall FERenderObject::FreeAllRenderEPolys({struct FERenderObject} *this)}   ||| func,refto

- {52C3A0 void __thiscall FERenderObject::FreeAllRenderEPolys_0({struct FERenderObject} *this,  ||| func,refto
                                                                void *unused)}

- {52CEF0 {struct FNGInfo} *GetFNGInfoByName(char *fngName)}                                    ||| func,refto
  TODO, this probably searches everything instead of the hierarchy like {519E50}                ||| ref

- {5374F0 int __thiscall UIElementVisitor_ClearFNGCache::acceptElement(struct UIElementVisitor_ClearFNGCache *this,     ||| func
                                                                       {struct UIElement} *element)                     ||| refto
  Frees {{struct UIElement}::{structUIElement+58}} and its EPoly objects.                                               ||| code,refto,refto

- {5379A0 void RemoveFNGFromUIObject(char *fngName)}                                            ||| func

- {555E80 void AddFngToUIObject_1(char *fngName, void *data)}                                   ||| func
  Does more stuff.

- {555F10 int AddFngToUIObjectWrapper(char *fngName, char *parentFngName, char controlMask, void *data)}        ||| func
  Wraps {555D00}.                                                                                               ||| ref
  {parentFngName} may be null.                                                                                  ||| code

- {555D00 int __thiscall AddFNGToUIObject({struct UIData} *this, int flagsMaybe, char *fngName,                 ||| func,refto
                                          char *parentFngName, int controlMask, void *data)}
  {parentFngName} may be null.                                                                                  ||| code

- {558B70 void __thiscall UIConsumeKey(void *this, int keyCode)}                                ||| func
  probably used for Q, but what else?

- {55DBD0 void UIHandleKey(int keyCode)}                                                        ||| func
  Called from {WM_CHAR} messages in {5CCD60},                                                   ||| code,ref
  only used to type/press enter in a textbox and Q to quit.
  Navigating menus seems unaffected

- {55DC20 __thiscall void SendSomethingToFNG?(void *this, char *fng, int data)}                 ||| func
  Called when menus change.

- {7F7DC8 {struct FNGData} fngdata[180]}                                                        ||| field,refto

- {8384E0 gCallingScreenPackageName}                                                            ||| field
  {{Thx to}                                                                                     ||| details,summary
  .push ida
  {.text:00551F0A}      push    offset {8384E0}                                                              ||| text,refplain
  {.text:00551F0F}      push    esi                                                                          ||| text
  {.text:00551F10}      push    offset {aGcallingscreen} {; "gCallingScreenPackageName SETTING %s.  Previously : %s."}    ||| text,ident,comment
  {.text:00551F15}      call    {50D510}                                                                     ||| text,refplain
  {.text:00551F1A}      mov     edx, [ebp+4]                                                                 ||| text
  {.text:00551F1D}      push    edx             {; src}                                                      ||| text,comment
  {.text:00551F1E}      push    offset {8384E0} {; dest}                                                     ||| text,refplain,comment
  {.text:00551F23}      call    {43DBD0}                                                                     ||| text,refplain
  .pop ida
  }

- {83A9C0 int isTextboxFocused}                                                                 ||| field

- {83A9C4 void *focusedTextbox}                                                                 ||| field
.pop ul

.pop section
.push section

{Some FNG screens} ||| h id=some_fng_screens

This was done by putting pointers to their strings into the boot flow entries (see {speedyboot}).               ||| href

{{2P_PressStart.fng}                            ||| details,summary
{2P_PressStart.fng}                             ||| imgcaptioned src=2P_PRESS_START.JPG alt="2player press start"
}

{{loading_boot.fng}                             ||| details,summary
{loading_boot.fng}                              ||| imgcaptioned src=LOADING_BOOT.JPG alt="alternative loading screen with nfsu2 logo"
}

.push section

{Replacing the loading screen}  ||| h id=replace_loading_screen

I found {loading_boot.fng} pretty cool, so I wondered if that could be used instead for         ||| code
the loading screens (on boot, when loading race, going into freeroam, ..).

I've seen lots of places refer to a string with content {PC_Loading.fng}, so I thought maybe    ||| code
replacing that with {loading_boot.fng} will just work. And it does.                             ||| code

.push pre
strcpy((char*) 0x790734, "loading_boot.fng");
.pop pre

Since the string is longer, it will override this string with an empty string though:

.push ida
{.rdata:00790744} {aLoadingTipsFng} db {'Loading_Tips.fng'},{0}                                 ||| comment,ident,str,num
.pop ida

It seems unused, so I guess it's fine. That made me wonder if that one could be used as loading
screen, maybe it shows tips? But when trying it just shows a black screen. Maybe it's a cut
feature?

.pop section

{{UI_DebugTest.fng}                             ||| details,summary
{UI_DebugTest.fng}                              ||| imgcaptioned src=UI_DEBUGTEST.JPG alt="pulsing text and different colored circles"
}

{{UI_OLAgeTooYoung.fng}                         ||| details,summary
{UI_OLAgeTooYoung.fng}                          ||| imgcaptioned src=UI_OLAGETOOYOUNG.JPG alt="age too young"
}

{{UI_OLMAIN.fng}                                ||| details,summary
{UI_OLMAIN.fng}                                 ||| imgcaptioned src=UI_OLMAIN.JPG alt="online main menu"
}

{{UI_OL_Feedback.fng}                           ||| details,summary
{UI_OL_Feedback.fng}                            ||| imgcaptioned src=UI_OL_FEEDBACK.JPG alt="online player feedback menu"
}

{{UI_OL_FriendDialogue.fng}                     ||| details,summary
{UI_OL_FriendDialogue.fng}                      ||| imgcaptioned src=UI_OL_FRIENDDIALOGUE.JPG alt="online friend dialogue"
}

{{UI_OL_Voice_Chat.fng}                         ||| details,summary
{UI_OL_Voice_Chat.fng}                          ||| imgcaptioned src=UI_OL_VOICE_CHAT.JPG alt="online voice chat"
}

.pop section
.push section

{ScreenPrintf.fng} ||| h id=screenprintf

So this is an interesting name, but doesn't really seem used (it makes sense, it shouldn't be used in a
release build of the game). Though now with the few functions I documented maybe I can make it show?

I tried following code:

.push pre
static
void hook_on_msg_WM_CHAR(int wparam)
{
	if (wparam == 121) { // y
		{555E80}("ScreenPrintf.fng", 0);                                                                        ||| refplain
	}
}
.pop pre

It didn't crash, so that was a win already. The second parameter for that func is what I suspect some data to
initialize the fng screen. It fortunately seems like either the ScreenPrintf one doesn't initialize anything or it has
a null check. for the passed data It doesn't seem to show anything though. Then I thought of the UI elements and their
visitor methods (like {504880}). So I tried to print all the UI elements that are on screen.                            ||| ref

{{Code {nfsu2-re-hooks/debug-custom-uielementvisitor.c}}                                                                ||| details,summary,hookfileref
.controlchars [] .push pre
static
void debug_custom_uielementvisitor_visit_element([struct UIElement] *element, char *prefix)                             ||| refto
{
	[struct UIElement] *containerchild;                                                                             ||| refto
	[struct UILabel] *label;                                                                                        ||| refto
	char locbuf\[100\];
	char locbuf2\[100\];

	sprintf(locbuf, "%s    ", prefix);
	while (element) {
		locbuf2\[0\] = 0;
		if (element->[structUIElement+18] == 2) {                                                               ||| refto
			label = (void*) element;
			if (label->[structUILabel+64].[structWideCharString+0]) {                                       ||| refto,refto
				locbuf2\[0\] = ' ';
				wchar2char(locbuf2 + 1, label->[structUILabel+64].[structWideCharString+0]);            ||| refto,refto
			}
		}
		log(buf, sprintf(buf, "%selement type %d hash %08X flags %8X:%s",
			prefix, element->[structUIElement+18], element->[structUIElement+10],                           ||| refto,refto
			element->[structUIElement+1C], locbuf2));                                                       ||| refto
		if (element->[structUIElement+18] == 5) {                                                               ||| refto
			containerchild = (([struct UIContainer]*) element)->[structUIContainer+64];                     ||| refto,refto
			debug_custom_uielementvisitor_visit_element(containerchild, locbuf);
		}
		element = element->[structUIElement+4];                                                                 ||| refto
	}
}

static
void debug_custom_uielementvisitor_visit_fng([struct FNGInfo] *fng, char *prefix)                                       ||| refto
{
	char locbuf\[100\];
	[struct UIElement] *element;                                                                                    ||| refto

	sprintf(locbuf, "%s    ", prefix);
	do {
		log(buf, sprintf(buf, "%sfng %s:", prefix, fng->[structFNGInfo+C]));                                    ||| refto
		element = fng->[structFNGInfo+4C];                                                                      ||| refto
		debug_custom_uielementvisitor_visit_element(element, locbuf);
		fng = fng->[structFNGInfo+4];                                                                           ||| refto
	} while (fng);
}
.controlchars {} .pop pre
}

And here's the output when in the options menu in the pause menu while in career freeroam:

{{Output}                                                                                                               ||| details,summary
.push pre
fng UI_PauseOptionsMain.fng:
    element type 5 hash 8D7E0C53 flags 40000000:
        element type 2 hash 42ADB44C flags 40000000: Pause Options Main
        element type 1 hash B62648B1 flags 40000000:
        element type 1 hash 7CA40D0F flags 40000000:
        element type 5 hash 371F1C93 flags 40000000:
            element type 1 hash 0A570002 flags 40000000:
            element type 1 hash A67C3FE2 flags 40000000:
            element type 1 hash A67C3FE2 flags 40000000:
            element type 1 hash A67C3FE2 flags 40000000:
            element type 1 hash 5E11FBFB flags 40000000:
        element type 5 hash DE2F4E52 flags 40000000:
            element type 1 hash A67C3FE2 flags 40000000:
            element type 1 hash C8C5F8A6 flags 40000000:
            element type 1 hash C8C5F8A6 flags 40000000:
            element type 1 hash A67C3FE2 flags 40000000:
            element type 1 hash A67C3FE2 flags 40000000:
        element type 2 hash 5E7B09C9 flags 40000000: Option title
        element type 1 hash 687FDA31 flags 40000000:
        element type 1 hash DF422345 flags 43800000:
        element type 5 hash 02DDF58C flags 40000041:
            element type 5 hash 02DDF58C flags 40000001:
            element type 5 hash 812A09D4 flags 40000001:
                element type 2 hash 1C7FCF8B flags 40000001: Back
                element type 2 hash B02B46B7 flags 40000001: $JOY_EVENT_FENG_CANCEL$
            element type 5 hash 6A218478 flags 40000001:
                element type 2 hash 93B5083A flags 40000001: Select
                element type 2 hash 9D752086 flags 40000001: $JOY_EVENT_FENG_SELECT$
        element type 5 hash 0DE769B5 flags 40000000:
            element type 1 hash 5E1208DF flags 40000000:
            element type 1 hash 0894389E flags 40000000:
            element type 1 hash A67C3FE2 flags 40000000:
            element type 1 hash A67C3FE2 flags 40000000:
            element type 1 hash 5E11FBFB flags 40000000:
            element type 1 hash 0A570002 flags 40000000:
            element type 1 hash 0A570002 flags 40000000:
        element type 5 hash 52BDEE1D flags 40000000:
            element type 1 hash 39CC2F66 flags 40000000:
            element type 1 hash DDE4A5E5 flags 40000000:
            element type 1 hash DDE4A5E8 flags 40000000:
            element type 1 hash BE9AB445 flags 40000000:
            element type 1 hash 39CC2F45 flags 40000000:
            element type 1 hash DDE4A5E7 flags 40000000:
            element type 1 hash 39CC2F24 flags 40000000:
            element type 1 hash DDE4A5E6 flags 40000000:
    element type 1 hash B51549B8 flags 50080000:
    element type 1 hash 4B4E3890 flags 50080000:
    element type 1 hash 4B4E388F flags 50080000:
    element type 1 hash 4B4E388E flags 50080000:
    element type 1 hash 4B4E388D flags 50080000:
    element type 1 hash 4B4E388C flags 50080000:
    element type 1 hash 4B4E388B flags 57C80001:
    element type 1 hash 4B4E388A flags 57C80001:
    element type 1 hash 4B4E3889 flags 57C80000:
    element type 2 hash 47FF4E7C flags 40000000: EVENT HANDLER

    element type 1 hash 444969FE flags 40000000:
    element type 1 hash 444969FD flags 40000001:
    element type 1 hash 3FBB7A4E flags 40000000:
    element type 1 hash 688A1551 flags 40000000:
    element type 5 hash BE77206B flags 40000000:
        element type 5 hash 550E571C flags 48000000:
            element type 1 hash 1F3B164E flags 40000000:
    element type 1 hash B04669E3 flags        1:
    element type 1 hash 4B4E3888 flags 53C80000:
fng UI_PC_Help_Bar.fng:
    element type 2 hash 47FF4E7C flags 40000000: Event Handler
    element type 2 hash B8A7C6CF flags 50080001: WWWWWWWWWWWWW
    element type 1 hash 62376D1B flags 40000001:
    element type 2 hash B8A7C6CE flags 10080001: WWWWWWWWWWWWW
    element type 1 hash 62376D1A flags        1:
    element type 1 hash 62376D19 flags        0:
    element type 2 hash B8A7C6CD flags 10080000: WWWWWWWWWWWWW
    element type 2 hash B8A7C6CC flags 10080000: WWWWWWWWWWWWW
    element type 1 hash 62376D18 flags        0:
    element type 2 hash B8A7C6D0 flags 50080001: WWWWWWWWWWWWW
    element type 1 hash 62376D1C flags 40000001:
    element type 1 hash 62376D1D flags 40000001:
    element type 2 hash B8A7C6D1 flags 50080001: WWWWWWWWWWWWW
    element type 1 hash A444D171 flags 40000000:
    element type 1 hash A444D172 flags 40000000:
    element type 1 hash A444D170 flags 40000000:
    element type 1 hash A444D16F flags        0:
    element type 1 hash A444D16E flags 40000000:
    element type 1 hash E0AE8220 flags        0:
    element type 5 hash A22ED3B7 flags 40000000:
        element type 5 hash 2BAC0CEE flags 40000000:
            element type 1 hash E8E1E298 flags 40000001:
            element type 1 hash E8E1E29A flags 40000001:
            element type 1 hash E8E1E297 flags 40000001:
            element type 5 hash 12DF3004 flags 40000000:
                element type 1 hash 5145A2BF flags 40000000:
                element type 1 hash 5145A2BD flags 40000000:
                element type 1 hash 5145A2BC flags 40000000:
        element type 5 hash 3B949CD0 flags 40000001:
            element type 5 hash 84EB1500 flags 40000001:
                element type 2 hash EB406FEC flags 42800003: AA
                element type 2 hash EB3A688A flags 43800003: 0
                element type 5 hash 2253BC50 flags 40000001:
                    element type 1 hash A67C3FE2 flags 40000001:
                    element type 1 hash A67C3FE2 flags 40000001:
                element type 5 hash 6D2A1AE9 flags 40000001:
                    element type 1 hash D253B8F3 flags 40000001:
                    element type 1 hash 0894449B flags 40000001:
                element type 5 hash 22534096 flags 40000001:
                    element type 1 hash D6B3DA2D flags 40000001:
                    element type 1 hash A67C3FE2 flags 40000001:
fng HUD_SingleRace.fng:
    element type 1 hash 79498F08 flags 40000001:
    element type 1 hash 79498F07 flags 40000001:
    element type 1 hash 79498F06 flags 40000001:
    element type 5 hash 697D2BCA flags 40000001:
        element type 1 hash 4F649313 flags 43800001:
        element type 1 hash 4F649314 flags 43800001:
    element type 2 hash 77CE0364 flags 40000001: Disconnect in 15s
    element type 2 hash 192F96D9 flags        1: Bank Cash
    element type 2 hash 49106CE2 flags        1: Cash Reward: 333
    element type 2 hash 2A37A685 flags 40000001: DEFAULT STRING
    element type 2 hash 2A37A684 flags 40000001: DEFAULT STRING
    element type 5 hash 29F0A455 flags 40000001:
    element type 2 hash 2A37A683 flags 40000001: DEFAULT STRING
    element type 2 hash 2A37A682 flags 40000001: DEFAULT STRING
    element type 2 hash 2A37A681 flags 40000001: DEFAULT STRING
    element type 2 hash 2A37A680 flags 40000001: DEFAULT STRING
    element type 1 hash EB24E169 flags 40000001:
    element type 1 hash A71E35FB flags 40000001:
    element type 1 hash 62451575 flags 40000001:
    element type 1 hash B65634BC flags 40000001:
    element type 1 hash 84C55E14 flags 40000001:
    element type 1 hash C11804C6 flags 40000001:
    element type 1 hash 409C6EF0 flags 40000001:
    element type 1 hash 9E59FCF0 flags 40000001:
    element type 1 hash 79498F05 flags 40000001:
    element type 1 hash F7EC30B2 flags 40000001:
    element type 1 hash E24C838B flags 40000001:
    element type 1 hash 19EF4E89 flags 40000001:
    element type 1 hash 6E8333B0 flags 40000001:
    element type 1 hash 2C225885 flags 40000001:
    element type 1 hash 9E59FCEF flags 40000001:
    element type 1 hash 79498F04 flags 40000001:
    element type 1 hash F7EC30B1 flags 40000001:
    element type 1 hash E24C838A flags 40000001:
    element type 1 hash 19EF4E88 flags 40000001:
    element type 1 hash 6E8333AF flags 40000001:
    element type 1 hash 2C225884 flags 40000001:
    element type 2 hash 668C9CD6 flags        1: x3
    element type 1 hash 9E59FCEE flags 40000001:
    element type 1 hash 9E59FCED flags 40000001:
    element type 1 hash 9E59FCEC flags 40000001:
    element type 1 hash 9E59FCEB flags 40000001:
    element type 1 hash 79498F03 flags 40000001:
    element type 1 hash 79498F02 flags 40000001:
    element type 1 hash 79498F01 flags 40000001:
    element type 1 hash 79498F00 flags 40000001:
    element type 1 hash F7EC30B0 flags 40000001:
    element type 1 hash F7EC30AF flags 40000001:
    element type 1 hash F7EC30AE flags 40000001:
    element type 1 hash F7EC30AD flags 42400001:
    element type 1 hash E24C8389 flags 40000001:
    element type 1 hash 19EF4E87 flags 40000001:
    element type 1 hash 6E8333AE flags 40000001:
    element type 1 hash 2C225883 flags 40000001:
    element type 2 hash 8EB730A7 flags        3: Fort Union
    element type 1 hash 18DDF914 flags 40000001:
    element type 1 hash FE2467E3 flags 40000001:
    element type 2 hash 407919AF flags        1:
    element type 1 hash A71E35FA flags 40000001:
    element type 1 hash A71E35F9 flags 40000001:
    element type 1 hash A71E35F8 flags 40000001:
    element type 1 hash A71E35F7 flags 40000001:
    element type 1 hash A71E35F6 flags 40000001:
    element type 1 hash 1149C7DA flags 40000001:
    element type 1 hash 62451574 flags 40000001:
    element type 1 hash B65634BB flags 40000001:
    element type 1 hash 84C55E13 flags 40000001:
    element type 1 hash C11804C5 flags 40000001:
    element type 1 hash 409C6EEF flags 40000001:
    element type 1 hash 62451573 flags 40000001:
    element type 1 hash B65634BA flags 40000001:
    element type 1 hash 84C55E12 flags 40000001:
    element type 1 hash C11804C4 flags 40000001:
    element type 1 hash 409C6EEE flags 40000001:
    element type 1 hash 62451572 flags 40000001:
    element type 1 hash B65634B9 flags 40000001:
    element type 1 hash 84C55E11 flags 40000001:
    element type 1 hash C11804C3 flags 40000001:
    element type 1 hash 409C6EED flags 40000001:
    element type 1 hash 62451571 flags 40000001:
    element type 1 hash B65634B8 flags 40000001:
    element type 1 hash 84C55E10 flags 40000001:
    element type 1 hash C11804C2 flags 40000001:
    element type 1 hash 409C6EEC flags 40000001:
    element type 1 hash 62451570 flags 40000001:
    element type 1 hash B65634B7 flags 40000001:
    element type 1 hash 84C55E0F flags 40000001:
    element type 1 hash C11804C1 flags 40000001:
    element type 2 hash 565F28AE flags 40000001: TIME
    element type 2 hash 22465E2B flags 40000001: LAPY TIMER
    element type 2 hash 27754C7F flags 40000001: HANGY TIMEY!
    element type 2 hash 15D0E247 flags 40000001: + 25
    element type 1 hash 409C6EEB flags 42400001:
    element type 1 hash F2A54430 flags 42400001:
    element type 1 hash 7AF1CA63 flags 40000001:
    element type 1 hash E24C8388 flags 40000001:
    element type 1 hash 7AF1CA62 flags 40000001:
    element type 1 hash E24C8387 flags 40000001:
    element type 1 hash 19EF4E86 flags 40000001:
    element type 1 hash 19EF4E85 flags 40000001:
    element type 1 hash 6E8333AD flags 40000001:
    element type 1 hash 6E8333AC flags 40000001:
    element type 1 hash 2C225882 flags 40000001:
    element type 1 hash 2C225881 flags 40000001:
    element type 1 hash E24C8386 flags 40000001:
    element type 1 hash 7AF1CA61 flags 40000001:
    element type 1 hash 19EF4E84 flags 42400001:
    element type 1 hash 6E8333AB flags 42400001:
    element type 1 hash 2C225880 flags 42400001:
    element type 1 hash 024C680E flags 40000001:
    element type 1 hash 024C680B flags 40000001:
    element type 1 hash 024C680C flags 40000001:
    element type 1 hash 024C680D flags 40000001:
    element type 1 hash 024C680A flags 40000001:
    element type 1 hash 024C6809 flags 40000001:
    element type 1 hash 024C6808 flags 40000001:
    element type 1 hash EB24E168 flags 40000001:
    element type 1 hash EB24E165 flags 40000001:
    element type 1 hash EB24E166 flags 40000001:
    element type 1 hash EB24E167 flags 40000001:
    element type 1 hash EB24E164 flags 40000001:
    element type 1 hash EB24E163 flags 40000001:
    element type 1 hash EB24E162 flags 40000001:
    element type 1 hash 1B259972 flags 40000001:
    element type 1 hash C1347E2F flags 42400001:
    element type 1 hash 40CDC515 flags 42400001:
    element type 5 hash 382D2FC9 flags 40000001:
        element type 1 hash 142EDB6C flags 40000001:
        element type 1 hash 99EBA9C7 flags 40000001:
        element type 1 hash 142EDA64 flags 40000001:
        element type 1 hash 92A75587 flags 40000001:
    element type 1 hash 90FE80F3 flags 42400001:
    element type 2 hash 2DA220AA flags 40000001: +9999
    element type 2 hash 29AF04FD flags 40000001: 9.99
    element type 2 hash C18C12FE flags 40000001: 9.99
    element type 2 hash C18C12FD flags 40000001: WWWWWWWWWWWW DISCONNECTED
    element type 1 hash 411301E3 flags 40000001:
    element type 2 hash F59D909F flags 40000001: xxx:xxx:xxx
    element type 1 hash C82FA200 flags 40000001:
    element type 5 hash E8434EB4 flags 40000001:
        element type 2 hash 9C183BF8 flags 40000001: 8
        element type 2 hash 44F24239 flags 40000001: nd
        element type 2 hash 3BBD6268 flags 40000001: /8
    element type 5 hash 035B0E22 flags 40000001:
    element type 5 hash AFFD0354 flags 40000001:
    element type 5 hash 02DDF58C flags 40000001:
    element type 5 hash 5164D4EA flags 40000001:
        element type 1 hash 05D19F25 flags 40000001:
        element type 1 hash 61D30442 flags 40000001:
        element type 2 hash C1D5FF50 flags 40000003:   0
        element type 2 hash C3383B63 flags 40000003: KM/H
        element type 1 hash F0250DAC flags 40000001:
        element type 2 hash B84589BE flags 40000003: 1
        element type 5 hash C5D551B7 flags 40000001:
            element type 1 hash 6D5FE871 flags 40000001:
            element type 1 hash 19C99185 flags 40000001:
            element type 1 hash 1A33CBB5 flags 40000001:
            element type 1 hash 1A33CBB6 flags 40000001:
            element type 1 hash 6D5ECE44 flags 40000001:
            element type 1 hash 00B78D9E flags 40000001:
            element type 1 hash 19C97422 flags 40000001:
        element type 1 hash 25CF2F74 flags 42800001:
        element type 1 hash 1D9051AA flags 40000001:
        element type 1 hash 11495CD6 flags 40000001:
        element type 1 hash 11461255 flags 40000001:
        element type 1 hash 39E180C4 flags 40000001:
    element type 5 hash 84CCAB08 flags 40000001:
    element type 2 hash A7806DDB flags 40000001: Race Over Message
Goes Here
    element type 1 hash 4E4566E5 flags 40000001:
    element type 5 hash 3345911D flags 40000001:
        element type 1 hash A206A0B4 flags 43800001:
        element type 1 hash 0A729B1B flags 43800001:
        element type 1 hash 99F665F4 flags 40000001:
        element type 1 hash B996A84C flags 40000001:
        element type 1 hash 3B1B624A flags 43800001:
        element type 1 hash 50910822 flags 43800001:
        element type 5 hash ED16ECE6 flags 40000001:
    element type 5 hash 54BE67BC flags 40000001:
        element type 2 hash 05092833 flags 40000001: Time:
        element type 2 hash 30D9802E flags 40000001: 99999999
        element type 1 hash A86C3C9C flags 40000001:
    element type 5 hash 5ED609A1 flags 40000001:
        element type 1 hash FA3D7B71 flags 40000001:
        element type 1 hash FA3D7B72 flags 40000001:
        element type 1 hash FA3D7B73 flags 40000001:
        element type 1 hash FA3D7B74 flags 40000001:
        element type 1 hash 4FDDD64C flags 40000001:
        element type 1 hash 4FDDD64D flags 40000001:
        element type 1 hash 4FDDD64E flags 40000001:
        element type 1 hash 4FDDD64F flags 40000001:
        element type 2 hash 4183E0A1 flags 40000001: 1
        element type 2 hash 4183E0A2 flags 40000001: 2
        element type 2 hash 4183E0A3 flags 40000001: 3
        element type 2 hash 4183E0A4 flags 40000001: 4
        element type 2 hash 2AF89FD7 flags 40000001: wwwwwwwwwww
        element type 2 hash 2AF89FD8 flags 40000001: wwwwwwwwwww
        element type 2 hash 2AF89FD9 flags 40000001: wwwwwwwwwww
        element type 2 hash 2AF89FDA flags 40000001: wwwwwwwwwww
    element type 5 hash 70F90BD4 flags 40000001:
        element type 2 hash 8B7E6EA1 flags 40000001: Laps
        element type 1 hash A86C3C9B flags 40000001:
        element type 2 hash F2685238 flags 40000001: /80
        element type 2 hash 57F0E3A5 flags 40000001: 10
    element type 5 hash 8CA76279 flags C0000001:
        element type 1 hash 238F4B29 flags 40000001:
        element type 1 hash C81A81F5 flags 40000001:
        element type 1 hash ACBAF9EF flags 40000001:
        element type 2 hash 92CDC512 flags 40000001: + 500
        element type 2 hash BCEA10CE flags 40000001: Meters
    element type 5 hash 30D59B88 flags C0000001:
        element type 1 hash 9A4E84A9 flags 40000001:
        element type 2 hash CD3A501F flags 40000001: 00:00:00
        element type 2 hash F7CFC1FC flags 40000001: Forhanosgranska
        element type 2 hash 6BF40D64 flags 40000001: Time:
    element type 1 hash 4B9B8F5A flags 42800001:
    element type 5 hash D292009B flags C0000001:
        element type 1 hash F11AFFD1 flags 40000001:
        element type 1 hash 9C355B23 flags 40000001:
        element type 1 hash F11AFFD2 flags 40000001:
        element type 1 hash 9C355B24 flags 40000001:
        element type 1 hash F11AFFD3 flags 40000001:
        element type 1 hash 9C355B25 flags 40000001:
        element type 1 hash B2D2E745 flags 40000001:
        element type 2 hash 7121F270 flags 40000001: Circuit Stats
        element type 2 hash C8D50791 flags 40000001: Best Lap:
        element type 2 hash C8D50792 flags 40000001: Current G's:
        element type 2 hash C8D50793 flags 40000001: Maximum G's:
        element type 2 hash F3828848 flags 40000001: 00000
        element type 2 hash F3828849 flags 40000001: 00000
        element type 2 hash F382884A flags 40000001: 00000
        element type 5 hash 29F0A455 flags 40000001:
            element type 2 hash 4635CA2C flags 40000001: Time:
            element type 2 hash E1FA0DA7 flags 40000001: 99999999
            element type 1 hash 9C355B26 flags 40000001:
        element type 1 hash B2751131 flags 40000001:
        element type 5 hash 0B470B80 flags 40000001:
            element type 1 hash 968971D0 flags 40000001:
            element type 1 hash 968971D3 flags 40000001:
            element type 1 hash 718D020B flags 40000001:
            element type 1 hash 718D0209 flags 40000001:
            element type 1 hash 718D020A flags 40000001:
            element type 1 hash 968971D2 flags 40000001:
            element type 1 hash 718D020C flags 40000001:
            element type 1 hash 968971D1 flags 40000001:
    element type 5 hash D80C97E1 flags 40000001:
        element type 1 hash 053A5193 flags 40000001:
        element type 1 hash BF9CC87C flags 40000001:
        element type 2 hash 0D94B769 flags 40000001: Filter
    element type 5 hash 06254D8A flags 40000001:
        element type 1 hash EED72BCE flags 40000001:
        element type 2 hash 0FBA78C2 flags 40000001: Searching
Connection
        element type 2 hash 06012887 flags 43800001:
        element type 5 hash E2848973 flags 40000001:
            element type 1 hash 4F649313 flags 43800001:
            element type 1 hash 4F649314 flags 43800001:
    element type 5 hash 3F8644CA flags C0000001:
        element type 2 hash 1930B057 flags 40000003: 0
        element type 2 hash 31B0D166 flags 40000001: Bank:
fng ScreenPrintf.fng:
    element type 2 hash B9D457DE flags 42000000: DEFAULT STRING
    element type 2 hash B9D457DF flags 42000000: DEFAULT STRING
    element type 2 hash B9D457F7 flags 42000000: DEFAULT STRING
    element type 2 hash B9D457F8 flags 42000000: DEFAULT STRING
    element type 2 hash B9D457F9 flags 42000000: DEFAULT STRING
    element type 2 hash B9D457FA flags 42000000: DEFAULT STRING
    element type 2 hash B9D457FB flags 42000000: DEFAULT STRING
    element type 2 hash B9D457FC flags 42000000: DEFAULT STRING
    element type 2 hash B9D457FD flags 42000000: DEFAULT STRING
    element type 2 hash B9D457FE flags 42000000: DEFAULT STRING
    element type 2 hash B9D457FF flags 42000000: DEFAULT STRING
    element type 2 hash B9D45800 flags 42000000: DEFAULT STRING
    element type 2 hash B9D45818 flags 42000000: DEFAULT STRING
    element type 2 hash B9D45819 flags 42000000: DEFAULT STRING
    element type 2 hash B9D4581A flags 42000000: DEFAULT STRING
    element type 2 hash B9D4581B flags 42000000: DEFAULT STRING
    element type 2 hash B9D457B7 flags 42000000: DEFAULT STRING
    element type 2 hash B9D457B8 flags 42000000: DEFAULT STRING
    element type 2 hash B9D457B9 flags 42000000: DEFAULT STRING
    element type 2 hash B9D457BA flags 42000000: DEFAULT STRING
    element type 2 hash B9D457BB flags 42000000: DEFAULT STRING
    element type 2 hash B9D457BC flags 42000000: DEFAULT STRING
    element type 2 hash B9D457BD flags 42000000: DEFAULT STRING
    element type 2 hash B9D457BE flags 42000000: DEFAULT STRING
    element type 2 hash B9D457D6 flags 42000000: DEFAULT STRING
    element type 2 hash B9D457D7 flags 42000000: DEFAULT STRING
    element type 2 hash B9D457D8 flags 42000000: DEFAULT STRING
    element type 2 hash B9D457D9 flags 42000000: DEFAULT STRING
    element type 2 hash B9D457DA flags 42000000: DEFAULT STRING
    element type 2 hash B9D457DB flags 42000000: DEFAULT STRING
    element type 2 hash B9D457DC flags 42000000: DEFAULT STRING
    element type 2 hash B9D457DD flags 42000000: DEFAULT STRING
    element type 2 hash 5334FAE2 flags 42000000: DEFAULT STRING
    element type 2 hash 5334FAE3 flags 42000000: DEFAULT STRING
    element type 2 hash 5334FAE4 flags 42000000: DEFAULT STRING
    element type 2 hash 5334FAE5 flags 42000000: DEFAULT STRING
    element type 2 hash 5334FAE6 flags 42000000: DEFAULT STRING
    element type 2 hash 5334FAE7 flags 42000000: DEFAULT STRING
    element type 2 hash 5334FAE8 flags 42000000: DEFAULT STRING
    element type 2 hash 5334FAE9 flags 42000000: DEFAULT STRING
    element type 2 hash 5334FAEA flags 42000000: DEFAULT STRING
    element type 2 hash 5334FAEB flags 42000000: DEFAULT STRING
    element type 2 hash B9D45773 flags 42000000: DEFAULT STRING
    element type 2 hash B9D45774 flags 42000000: DEFAULT STRING
    element type 2 hash B9D45775 flags 42000000: DEFAULT STRING
    element type 2 hash B9D45776 flags 42000000: DEFAULT STRING
    element type 2 hash B9D45777 flags 42000000: DEFAULT STRING
    element type 2 hash B9D45778 flags 42000000: DEFAULT STRING
    element type 2 hash B9D45779 flags 42000000: DEFAULT STRING
    element type 2 hash B9D4577A flags 42000000: DEFAULT STRING
    element type 2 hash B9D4577B flags 42000000: DEFAULT STRING
    element type 2 hash B9D4577C flags 42000000: DEFAULT STRING
    element type 2 hash B9D45794 flags 42000000: DEFAULT STRING
    element type 2 hash B9D45795 flags 42000000: DEFAULT STRING
    element type 2 hash B9D45796 flags 42000000: DEFAULT STRING
    element type 2 hash B9D45797 flags 42000000: DEFAULT STRING
    element type 2 hash B9D45798 flags 42000000: DEFAULT STRING
    element type 2 hash B9D45799 flags 42000000: DEFAULT STRING
    element type 2 hash B9D4579A flags 42000000: DEFAULT STRING
    element type 2 hash B9D4579B flags 42000000: DEFAULT STRING
    element type 2 hash B9D4579C flags 42000000: DEFAULT STRING
    element type 2 hash B9D4579D flags 42000000: DEFAULT STRING
    element type 2 hash B9D457B5 flags 42000000: DEFAULT STRING
    element type 2 hash B9D457B6 flags 42000000: DEFAULT STRING
.pop pre
}

At the end we can see all the elements of the {ScreenPrintf.fng} package. Seems like it just has a bunch of labels.     ||| code
But this is a nice confirmation that my previous code to load it, did actually work. From the other elements, I guessed
that flag {2} means it should be visible, so I tried adding that.                                                       ||| code

{Cool.}                          ||| imgcaptioned src=SCREENPRINTF_1.JPG alt="default string"

Then the text can be changed easily by one of the many funcs, for example:

.push pre
{537B80}("ScreenPrintf.fng", 0xB9D457DE, "0xB9D457DE", "");                                                             ||| refplain
.pop pre

{Nice.}                          ||| imgcaptioned src=SCREENPRINTF_2.JPG alt="custom strings"

A quick search of all the label hashes did not give any result, so it seems like there is no code left in the program
where it would set any of the labels' text.

.pop section
.push section

{PC help bar} ||| h id=pc_help_bar

This is the button bar at the bottom of the screen, with the player name and money text. It also has some elements
that are only shown when you're connected online (TODO).

Buttons are changed by using {54E6E0}. Buttons are predetermined, you can only specify which buttons you want and       ||| ref
not set an arbitrary text label. The positions are shown below. See {54E6E0} for the button masks. The lowest matching  ||| ref
mask gets placed on button1, and so on.

{Normal bar}                                                            ||| imgcaptioned src=PCHELPBAR.JPG alt="two line button bar with 6 buttons"

{{LAYOUT_ONE_LINE_NO_BG}}                                               ||| imgcaptioned src=PCHELPBAR10000.JPG alt="wide button bar with 3 buttons",code

{{LAYOUT_ONE_LINE_NO_BG | LAYOUT_WORLDMAP_POSITION}}                    ||| imgcaptioned src=PCHELPBAR10000-8000.JPG alt="wide button bar with 3 buttons, slighty up",code

{{LAYOUT_ONE_LINE_NO_BG | LAYOUT_PAUSEMENU_POSITION}}                   ||| imgcaptioned src=PCHELPBAR10000-20000.JPG alt="wide button bar with 3 buttons, up",code

{{LAYOUT_ONE_LINE_NO_BG | LAYOUT_RIGHT_POSITION}}                       ||| imgcaptioned src=PCHELPBAR10000-80000000.JPG alt="right aligned button bar with 2 buttons",code

.push symbols
- {50CF10 int __thiscall PCHelpBarFNGObject::IsSomethingStillAnimating({struct PCHelpBarFNGObject} *this)}                      ||| func,refto

- {52D330 unsigned int __thiscall PCHelpBarFNGObject::GetButtonLanguageKey({struct PCHelpBarFNGObject} *this, int mask)}        ||| func,refto
  See {54E6E0} for mask. {BUTTON_PC_NAV_CONTINUE} is returned if it's not any of the other {BUTTON_} masks.                     ||| ref,code,code

- {52D4F0 void __thiscall PCHelpBarFNGObject::OnCursorMoved({struct PCHelpBarFNGObject} *this)}                                 ||| func,refto
  Called from {55DFA0}.                                                                                                         ||| ref

- {542990 void __thiscall PCHelpBarFNGObject::SetVisible({struct PCHelpBarFNGObject} *this, int show)}                          ||| func,refto

- {54E6A0 void __thiscall PCHelpBarFNGObject::Show({struct PCHelpBarFNGObject} *this)}                                          ||| func,refto

- {54E6B0 void __thiscall PCHelpBarFNGObject::Hide({struct PCHelpBarFNGObject} *this)}                                          ||| func,refto

- {54E6E0 void __thiscall PCHelpBarFNGObject::SyncByMask({struct PCHelpBarFNGObject} *this, int someMask, char *fngName)}       ||| func,refto
  Sets buttons and background of the help bar, updates profile name display.
  mask:
  .push pre
  -        1: BUTTON_PC_NAV_QUIT: Quit Game
  -        2: BUTTON_PC_NAV_LOGOFF: Logoff
  -        4: BUTTON_PC_NAV_CONTINUE: Continue
  -        8: BUTTON_PC_NAV_INSTALL_PART: Install Part
  -       10: BUTTON_PC_NAV_INSTALL_VINYL: Install Vinyl
  -       20: BUTTON_PC_NAV_INSTALL_DECAL: Install Decal
  -       40: BUTTON_PC_NAV_INSTALL_PACKAGE: Install Package
  -       80: BUTTON_PC_NAV_INSTALL_PAINT: Install Paint
  -      100: BUTTON_PC_NAV_READ_MESSAGE: Read Message
  -      200: BUTTON_CANCEL_CHANGES: Cancel Changes
  -      400: BUTTON_PC_NAV_BACK: Back
  -      800: if {89E7E6}                                                                                                       ||| refplain
              BUTTON_DYNO_RESET: Reset to default
              else
              BUTTON_PC_NAV_RESET_KEYS: Reset Keys To Default
  -     1000: BUTTON_PC_NAV_CUSTOMIZE: Customize
  -     2000: BUTTON_PC_NAV_DELETE: Delete
  -     4000: BUTTON_PC_NAV_EA_MESSENGER: EA Messenger
  -     8000: LAYOUT_WORLDMAP_POSITION: moves the button bar up slightly, three buttons, only has an effect when 10000 is set
  -    10000: LAYOUT_ONE_LINE_NO_BG: used for pause options (display settings etc)/world map/pause menu
  -    20000: LAYOUT_PAUSEMENU_POSITION: moves the button bar up, three buttons, only has an effect when 10000 is set
  -    40000: BUTTON_DELETE_TUNED_CAR: Delete Tuned Car
  -    80000: BUTTON_ICE_TEST_NOS_PURGE: Test N20 Purge
  -   100000: BUTTON_ICE_OPEN_CLOSE_HOOD: Open/Close Hood
  -   200000: BUTTON_ICE_OPEN_CLOSE_DOORS: Open/Close Doors
  -   400000: BUTTON_DYNO_TIP: Tip
  -   800000: if (in UI_ChooseVinylLayer.fng)
              BUTTON_DECAL_COLOR: Decal Color
              else
              BUTTON_FE_REPAINT: Repaint
  -  1000000: BUTTON_MU_PAUSE_RESTART: Restart
  -  2000000: BUTTON_STRING_WORLD_MAP_SELECT: Select Event
  -  4000000: BUTTON_FILTER_EVENT_OFF: Hide on World Map
  -  8000000: BUTTON_FILTER_EVENT_ON: Show on World Map
  - 10000000: BUTTON_ACTIVATE_GPS: Activate GPS
  - 20000000: BUTTON_DEACTIVATE_GPS: Deactivate GPS
  - 40000000: BUTTON_OL_HOST_LAN_SERVER: Host LAN Server
  - 80000000: LAYOUT_RIGHT_POSITION: puts buttons at the right, two buttons, only has an effect when 10000 is set
  .pop pre

  Mask gets adjusted based on {850078} and {8654A4}:                                                                            ||| ref,ref
  .controlchars [] .push pre
  if (([850078] == 8 || [850078] == 0x100) && [8654A4] == 3 && (mask & BUTTON_PC_NAV_QUIT)) {                                   ||| refplain,refplain,refplain
          mask = (mask & ~PC_NAV_QUIT) | BUTTON_PC_NAV_LOGOFF;
  }
  if ([850078] == 0x200 && (mask & BUTTON_PC_NAV_EA_MESSENGER)) {                                                               ||| refplain
          mask &= ~BUTTON_PC_NAV_EA_MESSENGER;
  }
  .controlchars {} .pop pre

- {55DE00 void __thiscall PCHelpBarFNGObject::OnPrimaryCursorJustPressed({struct PCHelpBarFNGObject} *this)}                    ||| func,refto
  Called from {55DFA0}.                                                                                                         ||| ref

- {55DFA0 int __thiscall PCHelpBarFNGObject::MessageHandler({struct PCHelpBarFNGObject} *this, unsigned int message, int, int, int)}    ||| func,refto

- {8384D8 {struct PCHelpBarFNGObject} *pcHelpBarFNGObject}                                                                      ||| field,refto
.pop symbols

.pop section

Stuff

UI keys seem to be hashed with the case insensitive hash.

.push pre
{struct U2RECT} \{                                                                                              ||| mkref
        float {left};                                                                                           ||| mkref name=structU2RECT+0
        float {top}                                                                                             ||| mkref name=structU2RECT+04
        float {right}                                                                                           ||| mkref name=structU2RECT+08
        float {bottom}                                                                                          ||| mkref name=structU2RECT+0C
};

#define UIELEMENT_FLAG_HIDDEN 0x1
#define UIELEMENT_FLAG_USE_CUSTOM_TEXT 0x2
#define UIELEMENT_FLAG_TEXT_CHANGED 0x400000

{struct UIElement} \{                                                                                           ||| mkref
        void *vtable;
        {struct UIElement} *{nextSibling};                                                                      ||| refto,mkref name=structUIElement+4
        int field_8;
        int field_C;
        unsigned int {hash};                                                                                    ||| mkref name=structUIElement+10
        int field_14;
        int {type};                                                                                             ||| mkref name=structUIElement+18
        int {someFlags};                                                                                        ||| mkref name=structUIElement+1C
        int field_20;
        int field_24;
        int field_28;
        int ptrField_2C; /*maybe something size related*/
        int field_30;
        int field_34;
        int field_38;
        int field_3C;
        int field_40;
        int field_44;
        int field_48;
        int field_4C;
        int field_50;
        int field_54;
        void *{FERenderObject};                                                                                 ||| mkref name=structUIElement+58
        /*TODO how big is this base struct??*/
};

{struct UIElementType1} \{                                                                                      ||| mkref
        {struct UIElement} __parent; /*__parent.type = 1*/                                                      ||| refto
        /*TODO how big is the base struct?*/
};

{struct UILabel} \{                                                                                             ||| mkref
        {struct UIElement} __parent; /*__parent.type = 2*/                                                      ||| refto
        /*TODO how big is the base struct?*/
        /*+60*/
        unsigned int {textLanguageString};                                                                      ||| mkref name=structUILabel+60
        {struct WideCharString} {string}; /*ignored when {structUILabel+60} is set*/                            ||| refto,mkref name=structUILabel+64,refto
};

{struct UIElementType3} \{                                                                                      ||| mkref
        {struct UIElement} __parent; /*__parent.type = 3*/                                                      ||| refto
        /*TODO how big is the base struct?*/
};

{struct UIElementType4} \{                                                                                      ||| mkref
        {struct UIElement} __parent; /*__parent.type = 4*/                                                      ||| refto
        /*TODO how big is the base struct?*/
};

{struct UIContainer} \{                                                                                         ||| mkref
        {struct UIElement} __parent; /*__parent.type = 5*/                                                      ||| refto
        /*TODO how big is the base struct?*/

        /*incomplete*/

        /*+0x60*/
        int {numChildren};                                                                                      ||| mkref=structUIContainer+60
        {struct UIElement} *{children};                                                                         ||| refto,mkref name=structUIContainer+64
};

{struct UIElementType6} \{                                                                                      ||| mkref
        {struct UIElement} __parent; /*__parent.type = 6*/                                                      ||| refto
        /*TODO how big is the base struct?*/
};

{struct UIElementType7} \{                                                                                      ||| mkref
        {struct UIElement} __parent; /*__parent.type = 7*/                                                      ||| refto
        /*TODO how big is the base struct?*/
};

{struct UIElementType8} \{                                                                                      ||| mkref
        {struct UIElement} __parent; /*__parent.type = 8*/                                                      ||| refto
        /*TODO how big is the base struct?*/
};

{struct UIElementType9} \{                                                                                      ||| mkref
        {struct UIElement} __parent; /*__parent.type = 9*/                                                      ||| refto
        /*TODO how big is the base struct?*/
};

{struct UIElementVisitor} \{                                                                                    ||| mkref
        {struct UIElementVisitor$vtable} *{vtable};                                                             ||| refto,mkref name=structUIElementVisitor+0
};

{struct UIElementVisitor$vtable} \{                                                                             ||| mkref
        void *{func_0};                                                                                         ||| mkref name=structUIElementVisitor$vtable+0
        int (*{acceptElement})({struct UIElementVisitor}*,{struct UIElement}*); /*return 0 to stop visiting*/   ||| mkref name=structUIElementVisitor$vtable+4,refto,refto
};

{struct UIElementVisitor_FindByHash} \{                                                                         ||| mkref
        {struct UIElementVisitor} {__parent};                                                                   ||| refto,mkref name=structUIElementVisitor_FindByHash+0
        unsigned int {searchingHash};                                                                           ||| mkref name=structUIElementVisitor_FindByHash+4
        {struct UIElement} *{foundUIelement};                                                                   ||| refto,mkref name=structUIElementVisitor_FindByHash+8
};
.pop pre

.push symbols
- {4953C0 {struct UILabel} *FindUILabelByName(char *fngName, char *str)}                                        ||| func,refto
  Hashes {str} and delegates to {537A10}.                                                                       ||| code,ref

- {4953E0 {struct UIElementType1} *FindUIElementType1ByName(char *fngName, char *str)}                          ||| func,refto

- {495460 int SetUILabelByHashLanguageString(char *fngName, unsigned int hash, unsigned int languageString)}    ||| func

- {495490 int SetUILabelByNameLanguageString(char *fngName, char *name, unsigned int languageString)}           ||| func
  Uses {505450}.                                                                                                ||| ref

- {4954C0 int HideUIElementAndChildrenByName(char *fngName, char *name)}                                        ||| func
  Uses {505450}.                                                                                                ||| ref

- {4954E0 void HideUIElementAndChildrenByHash(char *fngName, unsigned int hash)}                                ||| func

- {495500 int ShowUIElementAndChildrenByName(char *fngName, char *name)}                                        ||| func
  Uses {505450}.                                                                                                ||| ref

- {495520 void ShowUIElementAndChildrenByHash(char *fngName, unsigned int hash)}                                ||| func

- {4FDAD0 void __thiscall U2RECT::Add({struct U2RECT} *this, {struct U2RECT} *rect)}                            ||| func,refto,refto
  Sums {this} and {rect} into {this}.                                                                           ||| code,code,code

- {504830 int __thiscall FNGInfo::VisitContainerRecursively({struct FNGInfo} *this,             ||| func,refto
                                                            {struct UIContainer} *container,    ||| refto
                                                            {struct UIElementVisitor} *visitor)}||| refto
  Starts at {container->{structUIContainer+64}},                                                                        ||| code,refto
  iterates through all children by traversing {{structUIElement+4}},                                                    ||| code,refto
  calls {visitor->{structUIElementVisitor+0}->{structUIElementVisitor$vtable+4}} for every child,                       ||| code,refto,refto
  calls {504830} (itself) for every child that is of type 5 ({{struct UIContainer}}),                                   ||| ref,code,refto
  returns 0 when either calls return 0.

- {504880 int __thiscall FNGInfo::VisitUIRecursively(struct FNGInfo *this, {struct UIElementVisitor} *visitor)}         ||| func,refto
  Starts at {this->{structFNGInfo+4C}},                                                                                 ||| code,refto
  iterates through all children by traversing {{structUIElement+4}},                                                    ||| code,refto
  calls {visitor->{structUIElementVisitor+0}->{structUIElementVisitor$vtable+4}} for every child,                       ||| code,refto,refto
  calls {504830} for every child that is of type 5 ({{struct UIContainer}}),                                            ||| ref,code,refto
  returns 0 when either calls return 0.

- {5048D0 int __thiscall UIElementVisitor_FindByHash::acceptElement({struct UIElementVisitor_FindByHash} *this, ||| func,refto
                                                                    {struct UIElement} *element)}               ||| refto
  If {element->{structUIElement+10} == this->{structUIElementVisitor_FindByHash+4}},                            ||| code,refto,refto
  set {this->{structUIElementVisitor_FindByHash+8}} to {element} and return 0.                                  ||| code,refto,code

- {5048F0 int __thiscall UIElementVisitor_FindByFieldC::acceptElement(struct UIElementVisitor_FindByFieldC *this,       ||| func
                                                                      {struct UIElement} *element)}                     ||| refto

- {50B460 int RenderCursor(int x, int y)}                                                                       ||| func

- {50C900 int SetUILabelLanguageString({struct UILabel} *label, unsigned int languageString)}                   ||| func,refto

- {50CA00 void HideUIElementAndChildren({struct UIElement} *uielement)}                                         ||| func,refto

- {50CA50 void ShowUIElementAndChildren({struct UIElement} *uielement)}                                         ||| func,refto

- {50CD00 int IsPointInRect(float x, float y, struct \{ float x; float y\} *pos,                                ||| func
  struct \{ float width; float height; \} *size)}
  Only seen this being called when there's a list on screen so far.

- {517F80 {struct UIElement} *__thiscall FNGInfo::FindUIElementByHash({struct FNGInfo} *this,   ||| func,refto,refto
                                                                      unsigned int hash)}
  .controlchars [] .push pre
  [struct UIElementVisitor_FindByHash] visitor;                                                 ||| refto

  visitor.[structUIElementVisitor_FindByHash+0].[structUIElementVisitor+0] = &[79AAF4];                                 ||| refto,refto,refplain
  visitor.[structUIElementVisitor_FindByHash+4] = hash;                                                                 ||| refto
  visitor.[structUIElementVisitor_FindByHash+8] = 0;                                                                    ||| refto
  [504880](this, visitor);                                                                                              ||| refplain
  return visitor.[structUIElementVisitor_FindByHash+8];                                                                 ||| refto
  .controlchars {} .pop pre

- {517FE0 int __thiscall FNGInfo::FindElementByFieldC({struct FNGInfo} *this, int searchingUIElementFieldC)}            ||| func,refto

- {51D070 void GetUIElementTopLeft({struct UIElement} *element, float *top, float *left)}                               ||| func,refto
  TODO

- {51D170 void GetUIElementRightBottom({struct UIElement} *element, float *right, float *bottom)}                       ||| func,refto
  TODO

- {51D9F0 int GetUIElementRect({struct UIElement} *element, {struct U2RECT} *out)}                                      ||| func,refto,refto
  Returns 1 on success.

- {52C570 {struct UIElement} *__thiscall GetUIElementByHashInFngName({struct UIData_Field8} *this,                      ||| func,refto,refto
                                                                     unsigned int hash,
                                                                     char *fngName)}
  When {fngName} is null, searches every FNG in {this->{structUIData_Field8+E4}} for the given hash.                    ||| code,code,refto
  Otherwise, limit the search to the FNG that is in the hierarchy of {this->{structUIData_Field8+E4}}                   ||| code,refto
  (by using {519E50}).                                                                                                  ||| ref

- {52D020 int IsPointInUIElement(float x, float y, {struct UIElement} *element)}                                        ||| func,refto

- {535FE0 void __thiscall UILabel::setString({struct UILabel} *this, char *str)}              ||| func,refto
  Only seems to be used for dynamic things such as: money, player name, sms messages, track length...

- {5372E0 {struct UIData} *__thiscall UIData::ctor({struct UIData} *this)}                                      ||| func,refto,refto
  Called from {57ED10}.                                                                                         ||| ref

- {537750 void __thiscall UIData::PopPackage({struct UIData} *this, char *fngName)}                             ||| func,refto

- {537830 void CreateUI()}                                                                                      ||| func
  Called from {57ED10}.                                                                                         ||| ref

- {5379C0 {struct UIElement} *FindUIElementByHash(char *fngName, unsigned int hash)}                            ||| func,refto

- {537A10 {struct UILabel} *FindUILabelByHash(char *fngName, unsigned int hash)}                                ||| func,refto

- {537A60 {struct UIElementType1} *FindUIElementType1ByHash(char *fngName, unsigned int hash)}                  ||| func,refto

- {537B30 int SetUILabelFormattedString({struct UILabel} *label, char *format, void *param)}                    ||| func,refto
  Delegates to {535FE0}. Also makes the element visible.                                                        ||| ref

- {537B80 int SetUILabelByHashFormattedString(char *fngName, unsigned int hash, char *format, int parameter)}   ||| func
  Only used for a few things, such as: sms 'from', sms 'subject', part name in customize..
  Delegates to {537B30}                                                                                         ||| ref

- {542600 int SetUILabelByNameFormattedString(char *fngName, char *uiElementName, char *format, int parameter)} ||| func
  Uses {4953C0}, then {537B30}.                                                                                 ||| ref,ref

- {537BE0 int SetNullableUILabelFormattedString({struct UILabel} *label, char *format, char param)}             ||| func,refto
  Same as {537B30} but checks if {label} is not null first.                                                     ||| ref,code

- {5663B0 void DoUI()}                                                                                          ||| func
  TODO document this and go in the last unresolved func.

- {78DA30 float canvasHeight2}                                                                                  ||| field
  Canvas height divided by 2.

- {797D50 float canvasWith2}                                                                                    ||| field
  Canvas width divided by 2.

- {797D54 float canvasHeight}                                                                                   ||| field

- {797D58 float canvasWidth}                                                                                    ||| field

- {79AAF4 {struct UIElementVisitor_FindByHash} vtable_UIElementVisitor_FindByHash}                              ||| field,refto
  vtable for {517F80},                                                                                          ||| ref
  {vtable->{structUIElementVisitor$vtable+0} = {5047C0};}                                                       ||| code,refto,ref
  {vtable->{structUIElementVisitor$vtable+4} = {5048D0};}                                                       ||| code,refto,ref

- {79BCD8 vtable_UIData}                                                                                        ||| field

- {836494 char canUseQToExit}                                                                                   ||| field
  When 1, pressing Q is allowed to bring up a dialog to exit the game.

- {8384C4 {struct UIData} *pUIData}                                                                             ||| field,refto

- {838528 char someThingKeyboardInput}                                                                          ||| field
  Seems keyboard related due to:
  {{collapsed code}                                                                                             ||| details,summary
  .controlchars [] .push pre
  //551E84
  if (!strcmp(x,"UI_OLEAMessenger.fng") ||
          !strcmp(x, "GarageMain.fng") ||
          !strcmp(x, "Keyboard.fng") ||
          !strcmp(x, "UI_VirtualKeyboard.fng))
  {
          [838528] = 1;                                                                                         ||| refplain
  } else {
          [838528] = 0;                                                                                         ||| refplain
  }
  .controlchars {} .pop pre
  }
.pop symbols

.pop section
.push section

{Mouse input}  ||| h id=mouseinput

While the canvas is {640x480}, mouse position seems to be handled mostly                        ||| code
as {([-320,+320],[-240,+240])}.                                                                 ||| code

.push pre
{struct MouseData} \{                                                                           ||| mkref
	void /*DInputDevice8*/ *{dinputdevice};                                                 ||| mkref name=structMouseData+0
	int cursorX; // on 640x480 canvas
	int cursorY; // on 640x480 canvas
	int previousCursorX; // on 640x480 canvas
	int previousCursorY; // on 640x480 canvas
	int deltaCursorX; // on 640x480 canvas
	int deltaCursorY; // on 640x480 canvas
	int mousestate_lZ; // scrollwheel data
	char areMouseButtonsSwapped; // result of GetSystemMetrics(SM_SWAPBUTTON);
	char button0State; // left mouse button
	char button0JustPressed;
	char button0JustReleased;
	char button1State; // right mouse button
	char button1JustPressed;
	char button1JustReleased;
	char button2State; // middle mouse button
	char button2JustPressed;
	char button2JustReleased;
};

struct MouseData *_mouseData = (struct MouseData*) 0x8763D0;
.pop pre

.push symbols
- {50CD70 void GetMousePositionFromMiddle(float *cursorX, float *cursorY)}                      ||| func
  .push pre
  *cursorX = _mouseData.cursorX - canvasWidth/2;
  *cursorY = _mouseData.cursorY - canvasHeight/2;
  .pop pre

- {50C860 void StoreMousePosButtonsIntoArg(void *arg)}                                          ||| func
  .push pre
  *((short*) arg_0 + 0) = _mouseData.cursorX - canvasWidth / 2;
  *((short*) arg_0 + 1) = _mouseData.cursorY - canvasHeight / 2;
  *((short*) arg_0 + 2) = _mouseData.button0State << 1 | _mouseData.button1State; (or swapped)
  .pop pre

- {50CDA0 void GetMouseWheel(float *mouseWheelData)}                                            ||| func
  .push pre
  *mouseWheelData = _mouseData.mousestate.lz;
  .pop pre

- {50CDB0 int DidCursorPressInRect(struct \{ float x; float y; \} *pos,                         ||| func
  struct \{ float width; float height; \} *size)}
  Gets called in one location, but still haven't actually seen it being called. TODO

- {52D090 DidCursorPressIn??SomethingUI(void *somethingui)}                                     ||| func
  Delegates to {52D020}                                                                         ||| ref

- {52D100 DidCursorPressIn??SomethingUI_2(void *something2)}                                    ||| func
  same as above, probably for some other type UI element

- {5BF6E0 int __thiscall CreateDinputDevice({struct MouseData} *this)}                          ||| func,refto
  Creates and sets {{8763D0}.{structMouseData+0}}                                               ||| code,ref,refto

- {5BF750 int __thiscall UpdateCursorPosition({struct MouseData} *this)}                        ||| func,refto

- {5BF860 void __thiscall UpdateMouseState({struct MouseData} *this)}                           ||| func,refto
  Calls {5BF750} and then updates button states.                                                ||| ref

- {5BF940 int __thiscall HaveCursorActivity({struct MouseData} *this)}                          ||| func,refto
  called once, from {5663B0}. returns 1 if position deltas or scrollwheel or                    ||| ref
  any of the JustPressed/JustReleased fields are not zero. Always returning 0 here has the
  effect that ui hover does not work, left click acts as right click (go back) except when
  clicking on the active ui element (like main menu bar). Dialog box buttons still work
  somehow. The car showroom can still be rotated with mmb. Mouse still moves.

- {5C8600 int __thiscall MouseData::ctor({struct MouseData} *this)}                             ||| func,refto
  Called once, from {77E580}.                                                                   ||| ref

- {8763D0 struct MouseData _mouseData}                                                          ||| field
.pop symbols

.pop section
.push section

{Cheats}  ||| h id=cheats

.push pre
{struct CheatScreenData} \{                                                                     ||| mkref
	void **ppFunc;
	char {doCheatCheck}; // only 1 when in the 'press enter key' screen                     ||| mkref name=structCheatScreenData+4
	char field5;
	char field6;
	char field7;
	int field2CofLastCheatActivated;
	struct CheatData *cheats; /*0x7FB960*/
	int numCheats; // 20
	char cheatString[32]; // typed string
	int typedCheatLength; // characters typed
	int field38;
};

#define CHEAT_TYPE_VISUALS 1
#define CHEAT_TYPE_PERFORMANCE 2
#define CHEAT_TYPE_CAREER 5
#define CHEAT_TYPE_SPONSOR_CAR 6 // shows up when doing quick race
#define CHEAT_TYPE_VINYL 7

{struct CheatData} \{                                                                           ||| mkref
	char cheat[32];
	int cheatType;
	int cheatData; // hash when cheatType is sponsor car or vinyl
	int {field28};                                                                          ||| mkref name=structCheatData+28
	int field2C;
	char {hasBeenTriggered};                                                                ||| mkref name=structCheatData+30
	char field31;
	char cheatEnabled;
	char field33;
};
EXPECT_SIZE(struct CheatData, 0x34);

struct CheatScreenData {865930}; // partially initialized by {575770}                           ||| ref,ref
struct CheatData {7FB960}[20] = \{                                                              ||| ref
	{ "needperformance1",	2, 1, 0, 0, 0, 1, 1, 0 }, // 0
	{ "needperformance2",	2, 2, 0, 0, 0, 1, 1, 0 }, // 1
	{ "gimmevisual1",	1, 2, 0, 0, 0, 1, 1, 0 }, // 2
	{ "gimmevisual2"	1, 2, 0, 0, 0, 1, 1, 0 }, // 3
	{ "gimmechingy"		6, 0, 0, 0, 0, 0, 0, 0 }, // 4
	{ ""			0, 0, 0, 0, 0, 0, 0, 0 }, // 5
	{ ""			0, 0, 0, 0, 0, 0, 0, 0 }, // 6
	{ ""			0, 0, 0, 0, 0, 0, 0, 0 }, // 7
	{ ""			0, 0, 0, 0, 0, 0, 0, 0 }, // 8
	{ ""			0, 0, 0, 0, 0, 0, 0, 0 }, // 9
	{ ""			0, 0, 0, 0, 0, 0, 0, 0 }, // 10
	{ ""			0, 0, 0, 0, 0, 0, 0, 0 }, // 11
	{ ""			0, 0, 0, 0, 0, 0, 0, 0 }, // 12
	{ ""			0, 0, 0, 0, 0, 0, 0, 0 }, // 13
	{ ""			0, 0, 0, 0, 0, 0, 0, 0 }, // 14
	{ ""			0, 0, 0, 0, 0, 0, 0, 0 }, // 15
	{ ""			0, 0, 0, 0, 0, 0, 0, 0 }, // 16
	{ ""			0, 0, 0, 0, 0, 0, 0, 0 }, // 17
	{ ""			0, 0, 0, 0, 0, 0, 0, 0 }, // 18
	{ ""			0, 0, 0, 0, 0, 0, 0, 0 }, // 19
};
// after {575770} was called, it looks like this:                                               ||| ref
// hashes are done with case sensitive hash
struct CheatData {7FB960}[20] = \{                                                              ||| ref
	{ "needperformance1",	2, 0x00000001, 0, 0, 0, 1, 1, 0 }, //
	{ "needperformance2",	2, 0x00000002, 0, 0, 0, 1, 1, 0 }, //
	{ "gimmevisual1",	1, 0x00000002, 0, 0, 0, 1, 1, 0 }, //
	{ "gimmevisual2"	1, 0x00000002, 0, 0, 0, 1, 1, 0 }, //
	{ "gimmechingy"		6, 0x3EE7D094, 0, 0, 0, 1, 1, 0 }, // "SPONSOR_CHINGY"
	{ "wannacapone"		6, 0x3E6D00C8, 0, 0, 0, 1, 1, 0 }, // "SPONSOR_CAPONE"
	{ "wantmyd3"		6, 0x54E32D29, 0, 0, 0, 1, 1, 0 }, // "SPONSOR_D3"
	{ "shinestreetbright"	6, 0xE57B6400, 0, 0, 0, 1, 1, 0 }, // "SPONSOR_SHINESTREET"
	{ "davidchoeart"	6, 0x7760C479, 0, 0, 0, 1, 1, 0 }, // "SPONSOR_DAVIDCHOE"
	{ "tunejapantuning"	6, 0x002F98F1, 0, 0, 0, 1, 1, 0 }, // "SPONSOR_JAPANTUNING"
	{ "yodogg"		6, 0x007090A1, 0, 0, 0, 1, 1, 0 }, // "SPONSOR_SNOOP_DOGG"
	{ "opendoors"		6, 0x4BAECE79, 0, 0, 0, 1, 1, 0 }, // "SPONSOR_THE_DOORS"
	{ "needmybestbuy"	7, 0x9E52EAC1, 0, 0, 0, 1, 1, 0 }, // "AD_BESTBUY"
	{ "goforoldspice"	7, 0x5FD7B956, 0, 0, 0, 1, 1, 0 }, // "AD_OLDSPICE"
	{ "gottaedge"		7, 0x44C47B98, 0, 0, 0, 1, 1, 0 }, // "AD_EDGE"
	{ "gottahavebk"		7, 0xCF5F6873, 0, 0, 0, 1, 1, 0 }, // "AD_BURGERKING"
	{ "gotmycingular"	7, 0x7C504338, 0, 0, 0, 1, 1, 0 }, // "AD_CINGULAR"
	{ "regmybank"		5, 0x00000002, 0, 0, 0, 1, 1, 0 }, //
	{ "regmebaby"		5, 0x00000003, 0, 0, 0, 1, 1, 0 }, //
	{ "ordermebaby"		5, 0x00000004, 0, 0, 0, 1, 1, 0 }, //
};

void __thiscall {575770}(struct CheatScreenData *data)                                          ||| ref
{
	int i;

	cheatScreenData.ppFunc = (void*) 0x7A0604;
	cheatScreenData.doCheatCheck = 0;
	cheatScreenData.cheats = cheatData;
	cheatScreenData.numCheats = 20;
	cheatScreenData.typedCheatLength = 0;
	cheatScreenData.field38 = 0;

	for (i = 0; i < 20; i++) {
		if (cheatData[i].cheatType == CHEAT_TYPE_VINYL &&
			cheatData[i].someHash == hashCS43DB50("AD_BESTBUY") &&
			_gameRegion != 0 /*REGION_US*/)
		{
			cheatData[i].cheatEnabled = 0;
		}
	}
}
.pop pre

Cheats can only be inserted at the 'press enter key' screen at boot. (I remember
this from looking up cheats in my childhood), but toggling sponsor car cheats when
ingame has immediate effect.

.push symbols
- {575770 void __thiscall InitCheats_({struct CheatScreenData} *this)}                          ||| func,refto
  Initializes {865930} and {7FB960}.                                                            ||| ref,ref

- {576050 void __thiscall UndoCheat__({struct CheatScreenData} *this, int cheatdata_field28)}   ||| func,refto
  Weird one, is called on each cheat entry and all cheats with a matching
  {{structCheatData+28}} has zero written to its {{structCheatData+30}} field.                  ||| code,refto,code,refto

- {576090 int GetExtraCheatedCareerMoney()}                                                     ||| func
  Basically {return {86512C} + {865130};}                                                       ||| code,refplain,refplain

- {5760A0 int __thiscall DoCareerCheat({struct CheatScreenData} *this, int careerCheatIdx)}     ||| func,refto

- {579CB0 void __thiscall CheatMatched({struct CheatScreenData} *this, int cheat_index)}        ||| func,refto
  Called from {57B8B0} when a cheat matched.                                                    ||| ref

- {57B8B0 void __thiscall CheatCheck(void *this, int keyCode)}                                  ||| func
  Called from {55DBD0} when {{865930}.{structCheatScreenData+4}} is non-zero.                   ||| ref,code,ref,refto

- {7FB960 {struct CheatData} cheatData[20]}                                                     ||| field,refto

- {8383C8 cheatCareerNeverPossible}                                                             ||| field
  This gets only set to one when a career cheat with {7FB960} zero is entered,                  ||| ref
  but all career cheats have a value of 2-4.
  It has one XREF, surrounded by some language stuff? TODO

- {86512C cheatExtraCareerMoney200}                                                             ||| field
  Set to 200 when the {regmybank} cheat was entered.                                            ||| em

- {865130 cheatExtraCareerMoney1000}                                                            ||| field
  Set to 1000 when the {ordermebaby} cheat was entered.                                         ||| em

- {865930 {struct CheatScreenData} cheatScreenData}                                             ||| field,refto
.pop symbols

.pop section
.push section

{Car model data}  ||| h id=carmodeldata

When jumping around XREFs I stumbled upon a function that I named {511E60}.                     ||| ref
It uses a lot of strings that are manufacturers and stuff like {CARSELECT_MANUFACTURER_%s}.     ||| code
There are two parameters, the first seems to be the index of the car and the second is if
the caller wants the manufacturer logo or the brand logo.
The function gave some nice information:

.push ul
- {8A1CCC} is a pointer to something that's probably car model data                             ||| ref
- That data is an array with component size {0x890}                                             ||| code
- At {+0x0}, there is a brand name                                                              ||| code
- At {+0xC0}, there is a manufacturer name                                                      ||| code
- (returning zero from this func will show a star image for the manufacturer/brand)
.pop ul

After hooking and printing addresses, some more obvious data could be seen:

.push ul
- At {+0x20} is a the brand name again                                                          ||| code
- At {+0x40} is a geometry path (example {CARS\A3\GEOMETRY.BIN})                                ||| code, code
- At {+0x60} is a geometry path (example {CARS\A3\GEOMETRY.LZC})                                ||| code, code
.pop ul

.push symbols
- {511E60 void *GetLogoForCarModel(int car_model_index, char get_manufacturer_logo)}            ||| func
  TODO: what is the return type?
.pop symbols

.pop section
.push section

{Sound}  ||| h id=sound

.push symbols
- {458520 void __thiscall PlaySound_(void *this, void *sound)}                                  ||| func

- {51DE60 int PlayUISoundEffect(void *unknownUnused, int soundID)}                              ||| func
  Discovered when looking at cheats. 8 is some choose sound, 9 too, .. TODO other IDs.

- {82B884 pSoundEffectSystem?}                                                                  ||| field
  pointer to what is used as {this} for calls to {458520}                                       ||| code, ref
.pop symbols

.pop section
.push section

{Career}  ||| h id=career

{83648C} is a weird variable. It changes the boot process so when {UI_Main.fng} is loaded,      ||| ref,code
the game immediately goes in career freeroam after loading a profile.
Except, you're in Rachel's car. When entering a shop, you're back in your own car,
but when exiting the GPS is set to the crib. When arriving at the crib though, you can't
enter it. However, you can enter the crib if that first shop you entered was the car lot.

Doing this on a finished career profile will put you in Rachel's car at the airport parking,
just like when starting a new career. The end of game sms will be open. When driving, the
phonecalls from the start of the game come in (friends telling Rachel where the races are
going on), but they don't appear on the map.

My best guess is that this 'load into career' option is a cut/unfinished feature.

.push section

{Markers}  ||| h id=markers

The money pickup/info pickup(engage sms messages)/race/shop/garage markers.
They are in bin section {0x3414A}, which is in bin section {0x80034147}, in {TRACKS\ROUTESL4R%c\Paths%d.bin}.           ||| code,code,code
Bin section {0x80034147} is loaded in {5D9A90}.                                                                         ||| code,ref

Not loading bin section {0x3414A} results in no career markers at all, and no traffic (but other racers do still spawn).||| code

.push pre
{struct Markers} \{                                                                                                     ||| mkref

};

#define MARKER_TYPE_BODYSHOP_AREA 0x4 /*marks the entrance, ie where the road goes into private property, not the entrace aura itself*/
#define MARKER_TYPE_NEIGHBOURHOOD 0x10
#define MARKER_TYPE_ENGAGE_TIP 0x12
#define MARKER_TYPE_MONEY_PICKUP 0x13

{struct Marker} \{                                                                                                      ||| mkref
        char {type};                                                                                                    ||| mkref name=structMarker+0
        char field_1;
        char field_2;
        char field_3;
        int field_4;
        int field_8;
        int field_C;
        int field_10;
        int field_14;
        int field_18;
        int field_1C;
        int field_20;
        int field_24;
        int field_28;
        int field_2C;
        unsigned int {hash}; /*for neighbourhood: hash of name, for engage: hash of sms name*/                          ||| mkref name=structMarker+30
        int field_34;
        int field_38;
        int field_3C;
        short {radius?};                                                                                                ||| mkref name=structMarker+40
        short {markerStructSize};                                                                                       ||| mkref name=structMarker+42
        float {pos_x};                                                                                                  ||| mkref name=structMarker+44
        float {pos_y};                                                                                                  ||| mkref name=structMarker+48
};

{struct NeighbourhoodName} \{                                                                                           ||| mkref
        char *{name};                                                                                                   ||| mkref name=structNeighbourhoodName+0
        unsigned int {hash};                                                                                            ||| mkref name=structNeighbourhoodName+4
};
.pop pre

.push symbols
- {5D3DE0 {struct NeighbourhoodName} *GetNeighbourhoodNameForHash(unsigned int hash)}                                   ||| func,refto
  On first call (checked with {883D9C}), calculate all the hashes in {800C38}.                                          ||| ref,ref

- {5D9A90 int __thiscall Markers::InitFromBinData({struct Markers} *this, {struct BinSection} *binsection)}             ||| func,refto,refto

- {5D9BF0 {struct Marker} *__thiscall Markers::FindAtPosWithTypeAfterIndex({struct Markers} *this,                      ||| func,refto,refto
                                                                           float *atPosition,
                                                                           int type,
                                                                           {struct Marker} *after)}                     ||| refto
  {atPosition} can be null, then it'll just return the first marker. When {after} is not null, the search starts        ||| code,code
  after that specific marker.

- {88F298 {struct Markers} markerData}                                                                                  ||| field,refto

- {800C38 struct NeighbourhoodName neighbourhoodNames[13]}                                                              ||| field

- {883D9C char neighbourhoodHashesCalculatedAlready}                                                                    ||| field

.pop symbols

.pop section
.push section

{SMS stuff}  ||| h id=sms_stuff

Dump of all sms message data: {smsdump.txt}.                                                            ||| a href=smsdump.txt
This data is in bin section {0x34A17} (which is inside bin section {0x80034A10},                        ||| code,code
which is in file {GLOBAL/GLOBALB.BUN}).                                                                 ||| code

.push pre
#define {SMS_TYPE_END_OF_GAME} 1                                                                        ||| mkref
/*      ^ 1 msg:
        SMS_END_OF_GAME_MESSAGE
*/
#define {SMS_TYPE_CAREER_START} 2                                                                       ||| mkref
/*      ^ 3 msgs:
        SMS_LOC_GO_TO_GARAGE
        SMS_LOC_EVENTS_OUT_THERE
        SMS_GPS_INTRO
*/
#define {SMS_TYPE_INSTRUCTIONS} 3                                                                       ||| mkref
/*      ^ 4 msgs:
        SMS_INSTRUCTION
        SMS_MINIMAP_INTRUCTION
        SMS_MINIMAP_LEGEND_BLURB
        SMS_STEERING_CONTROLS
*/
#define {SMS_TYPE_OUTRUN_INFO} 4                                                                        ||| mkref
/*      ^ 1 msg:
        SMS_OUTRUN_INFO
*/
#define {SMS_TYPE_OUTRUN_VICTORY} 5                                                                     ||| mkref
/*      ^ 1 msg:
        SMS_OUTRUN_VICTORY
*/
#define {SMS_TYPE_OUTRUN_DEFEAT} 6                                                                      ||| mkref
/*      ^ 1 msg:
        SMS_OUTRUN_DEFEAT
*/
#define {SMS_TYPE_UNLOCK_9} 9                                                                           ||| mkref
/*      ^ 5 part unlock msgs*/
#define {SMS_TYPE_UNLOCK_10} 10                                                                         ||| mkref
/*      ^ part unlock/region unlock/car unlock msgs
        SMS_LOC_TEXT_JACKSON_HEIGHTS
        SMS_LOC_TEXT_COAL_HARBOR
        SMS_LOC_TEXT_COAL_HARBOR_WEST
*/
#define {SMS_TYPE_UNLOCK_12} 12                                                                         ||| mkref
/*      ^ part unlock/region unlock/angry Rachel/sponsor msgs
        SMS_LOC_TEXT_BEACON_HILL
        SMS_LOC_GO_TO_CAR_LOT_NOW
        SMS_LOC_X_SPONSOR
*/
#define {SMS_TYPE_MAGS_AND_UNIQUES} 13                                                                  ||| mkref
/*      ^ magazine/unqiue parts msgs*/
#define {SMS_TYPE_DVD_COVER} 14                                                                         ||| mkref
/*      ^ 10 dvd cover msgs*/
#define {SMS_TYPE_ENGAGE_TIP} 15                                                                        ||| mkref
/*      ^ 42 tip msgs, from the ingame markers you have to drive through*/
.pop pre

.push pre
{struct Mailbox} \{                                                                                     ||| mkref
        int field_0;
        int field_4;
        int field_8;
        int field_C;
        int field_10;
        int field_14;
        int {mailboxId}; /*1 inbox, 2 game tips, 3 special events, 4 Rachel, 5 unlocks*/                ||| mkref name=structMailbox+18
};

{struct MailboxFNGObject} \{                                                                            ||| mkref
        /*TODO*/

        /*+0x120*/
        {struct Mailbox} *{currentBrowsingMailbox};                                                     ||| refto,mkref name=structMailboxFNGObject+120
};

{struct SmsData} \{                                                                                     ||| mkref
	/*offset in language table {838428}*/                                                           ||| refplain
	short {careerTextLanguageTableOffset};                                                          ||| mkref name=structSmsData+0
	char {type};                                                                                    ||| mkref name=structSmsData+2
	char {mailboxId}; /*1 inbox, 2 game tips, 3 special events, 4 Rachel, 5 unlocks*/               ||| mkref name=structSmsData+3
	int field_4;
	int {field_8};                                                                                  ||| mkref name=structSmsData+8
	int {moneyReward};                                                                              ||| mkref name=structSmsData+C
	unsigned int {senderLanguageLabel};                                                             ||| mkref name=structSmsData+10
};

{struct SmsMessage} \{                                                                                  ||| mkref
	{struct SmsData} *{data};                                                                       ||| refto,mkref name=structSmsMessage+0
	char {read};                                                                                    ||| mkref name=structSmsMessage+4
	char field_5;
	char {deleted};                                                                                 ||| mkref name=structSmsMessage+6
	char {movedToCorrectInbox};                                                                     ||| mkref name=structSmsMessage+7
	unsigned int {bodyFormatLanguageLabel};                                                         ||| mkref name=structSmsMessage+8
	unsigned int {subjectAndBodyParameterLanguageLabel};                                            ||| mkref name=structSmsMessage+C
	unsigned int {subjectFormatLanguageLabel};                                                      ||| mkref name=structSmsMessage+10
};

{struct SmsMessageList} \{                                                                              ||| mkref
        {struct SmsMessage} {messages}[256];                                                            ||| refto,mkref name=structSmsMessageList+0
        int {numMessages};                                                                              ||| mkref name=structSmsMessageList+1400
        int {numUnreadMessages};                                                                        ||| mkref name=structSmsMessageList+1404
        int field_1408;
        char field_140C;
        char field_140D;
        char field_140E;
        char field_140F;
        int field_1410;
};

{struct SmsListEntry} \{                                                                                ||| mkref
        void *vtable;
        int field_4;
        int field_8;
        {struct ObjectLink} *{link};                                                                    ||| refto,mkref name=structSmsListEntry+C
        char field_14;
        char field_15;
        char field_16;
        char field_17;
        {struct SmsMessage} *{sms};                                                                     ||| refto,mkref name=structSmsListEntry+18
};
.pop pre

.push symbols
- {4976B0 void __cdecl ShowMailboxOrSingleUnreadSms()}                                                  ||| func
  TODO check where this is called, it will be the carreer game state's keyhandler.
  TODO has some references to unknown fields
  When {514D30} returns {1}, immediately open that message. Show mailbox otherwise.                     ||| ref,code

- {497760 void GetSmsMessageSubjectHeader({struct SmsMessage} *sms, char *dest, int maxLength)}         ||| func,refto
  Gets the subject from {5149C0} and prepends {Subject: } to it (based on language).                    ||| ref,code
  Used by {4CC7C0} and {497850}.                                                                        ||| ref,ref
  {{Implementation {nfsu2-re-hooks/replace-497760-GetSmsMessageSubjectHeader.c}}                        ||| details,summary,hookfileref
  .push pre
  char *subjectFormat;
  char subject[100];

  subjectFormat = {4FF9D0}(0x4B5DE3E9/*SMS_SUBJECT_HEADER*/);                                           ||| refplain
  {5149C0}(sms, subject, sizeof(subject));                                                              ||| refplain
  sprintf(dest, subjectFormat, subject);
  .pop pre
  }

- {4977C0 void HideSmsMailbox()}                                                                        ||| func

- {497850 int __thiscall ShowSmsMessage(void *this, void *arg)}                                         ||| func
  TODO, called from {4B2240}                                                                            ||| ref

- {4CBB60 void __thiscall SmsListEntry::dtor({struct SmsListEntry} *this, char doFreeMem)}              ||| func,refto

- {4CC7C0 {struct SmsListEntry} *__thiscall SmsListEntry::ctor({struct SmsListEntry} *this,             ||| func,refto,refto
                                                               {struct SmsMessage} *sms)}               ||| refto

- {4CC900 void __thiscall ShowSmsList({struct MailboxFNGObject} *this)}                                 ||| func,refto

- {4E1BF0 void __thiscall MailboxFNGObject::ctor(struct MailboxFNGObject *this, void *fnginitarg)}      ||| func

- {4E2050 FNGINIT_UI_SMS_Mailbox_fng}                                                                   ||| func
  Allocates memory and calls {4E1BF0}.                                                                  ||| ref
  TODO

- {5012F0 void storeSmsDatas(char *data, int size)}                                                     ||| func
  Called from {512C00}. Data is a bin section with magic {0x34A17} (which is inside bin section         ||| ref,code
  {80034A10}).                                                                                          ||| code
  .push pre
  {838454} = (void*) data;                                                                              ||| refplain
  {838450} = size / 20;                                                                                 ||| refplain
  .pop pre

- {501310 {struct SmsData} *__cdecl GetSmsDataForHash(int hash)}                                        ||| func,refto
  Goes through all {838454} and returns the one that has a matching                                     ||| ref
  {cshash({838428} + {structSmsData+0})}.                                                               ||| code,refplain,refto

- {501470 unsigned int __thiscall GetSmsSenderLanguageHash({struct SmsMessage} *this)}                  ||| func,refto
  Returns the hash for the language string that is the sms sender.
  Used once in {497850}.                                                                                ||| ref
  .push pre
  return this->{structSmsMessage+0}.{structSmsData+10};                                                 ||| refto,refto
  .pop pre

- {5014A0 {struct SmsMessage} *__thiscall SmsMessageList::GetAtIndex({struct SmsMessageList} *this,     ||| func,refto,refto
                                                                     int index)}
  TODO: check xrefs

- {5014C0 void __thiscall SmsMessageList::MarkMessageDeletedAndRead({struct SmsMessageList} *this,      ||| func,refto
                                                                    {struct SmsMessage} *sms)}          ||| refto
  .controlchars [] .push pre
  if (!sms->[structSmsMessage+6] && !sms->[structSmsMessage+4]) {                                       ||| refto,refto
        this->[structSmsMessageList+1404]--;                                                            ||| refto
  }
  sms->[structSmsMessage+6] = 1;                                                                        ||| refto
  sms->[structSmsMessage+4] = 1;                                                                        ||| refto
  .controlchars {} .pop pre

- {5149C0 void __thiscall GetSmsMessageSubject({struct SmsMessage} *this, char *dest, int maxlen)}      ||| func,refto
  {{Implementation {nfsu2-re-hooks/replace-5149C0-GetSmsMessageSubject.c}}                              ||| details,summary,hookfileref
  .controlchars [] .push pre
  char *format;
  char *parameter;
  char *str;
  char buffer\[50\];

  if (this->[structSmsMessage+10]) {                                                                    ||| refto
          format = [4FFA80](this->[structSmsMessage+10]);                                               ||| refplain,refto
          parameter = [4FFA80](this->[structSmsMessage+C]);                                             ||| refplain,refto
          sprintf(dest, format, parameter);
          // example format: %s cover opportunity
          // example param: AutoMaxx Magazine
          return;
  }

  str = getCareerString(this->[structSmsMessage+0].[structSmsData+0]);                                  ||| refto,refto
  if (![43DC60](str, "SMS_CAR_UNLOCK_", [43DBB0]("SMS_CAR_UNLOCK_"))) {                                 ||| refplain,refplain
          str = [4FFA80](0xF81E6031/*SMS_CAR_UNLOCK_1_SUBJECT*/);                                       ||| refplain
          [43DBD0](dest, str);                                                                          ||| refplain
          // example: SMS_CAR_UNLOCK_17
          // example: SMS_CAR_UNLOCK_16
          return;
  }

  [50B990](dest, "%s_SUBJECT", str);                                                                    ||| refplain
  // example: ENGAGE_TIP_CAREER_PROG_SUBJECT
  // example: SMS_DVD_COVER_10_SUBJECT
  .controlchars {} .pop pre
  }

- {514B00 void __thiscall GetSmsMessageBody({struct SmsMessage} *this, char *dest, int maxlen)}         ||| func,refto
  Used once in {497850}.                                                                                ||| ref
  {{Implementation {nfsu2-re-hooks/replace-514B00-GetSmsMessageBody.c}}                                 ||| details,summary,hookfileref
  .controlchars [] .push pre
  char *format;
  char *parameter;
  char *str;
  char buffer\[128\];
  
  if (this->[structSmsMessage+8]) {                                                                     ||| refto
          format = [4FFA80](this->[structSmsMessage+8]);                                                ||| refplain,refto
          parameter = [4FFA80](this->[structSmsMessage+C]);                                             ||| refplain,refto
          sprintf(dest, format, parameter);
          // example format: One of my contacts has just called to let me know that a photographer
                             from %s is in town looking for hot cars for next month's cover.
                             Head to the star on the map and I'll call you with more details when
                             you get there.
          // example param: Street Tuner
          return;
  }
  
  str = getCareerString(this->[structSmsMessage+0].[structSmsData+0]);                                  ||| refto,refto
  if (![43DC60](str, "SMS_CAR_UNLOCK_", strlen("SMS_CAR_UNLOCK_"))) {                                   ||| refplain
          str = [4FFA80](cihash("SMS_CAR_UNLOCK_1_BODY"));                                              ||| refplain
          [43DBD0](dest, str);                                                                          ||| refplain
          // example: SMS_CAR_UNLOCK_17
          // example: SMS_CAR_UNLOCK_16
          return;
  }
  
  if (![43DC60](str, "ENGAGE_TIPS_AUTO", strlen("ENGAGE_TIPS_AUTO"))) {                                 ||| refplain
          str = [4FFA80](cihash("ENGAGE_TIPS_AUTO_BODY"));                                              ||| refplain
          [43DBD0](dest, str);                                                                          ||| refplain
          // Could not find any of these?
          // This is a single message about the autosave feature
          // This func probably prevents ENGAGE_TIPS_AUTO_XBOX from showing
          return;
  }
  
  sprintf(buffer, "%s_BODY", str);
  str = [4FFA80](cihash(buffer));                                                                       ||| refplain
  [43DBD0](dest, str);                                                                                  ||| refplain
  // example: SMS_OUTRUN_DEFEAT_BODY
  // example: SMS_END_OF_GAME_MESSAGE_BODY
  .controlchars {} .pop pre
  }

- {514CB0 int __thiscall SmsMessageList::IsMessageAlreadyReceived({struct SmsMessageList} *this,        ||| func,refto
                                                                  {struct SmsData} *smsdata)}           ||| refto

- {514CF0 {struct SmsMessage} *__thiscall GetFirstUnreadSmsMessage({struct SmsMessageList} *this)}      ||| func,refto,refto

- {514D30 int __thiscall GetNumUnreadSmsMessages({struct SmsMessageList} *this, int useCachedFlag)}     ||| func,refto
  When {useCachedFlag}, just return {{860A60}.{structSmsMessageList+1404}}, otherwise count all         ||| code,code,refplain,refto
  {{860A60}.{structSmsMessageList+0}} that have both {{structSmsMessage+4}} and                         ||| code,refplain,refto,code,refto
  {{structSmsMessage+6}} on {0}.                                                                        ||| code,refto,code
  TODO check other xref, probably for displaying icon ingame

- {514D80 void __thiscall SetReadMessagesMovedToCorrectInbox({struct SmsMessageList} *this)}            ||| func,refto
  For every message, set flag {{structSmsMessage+7}} when flag {{structSmsMessage+4}} is set.           ||| code,refto,code,refto

- {514E10 int __thiscall SmsMessageList::IsEngageTipUncollected({struct SmsMessageList} *this, void *engageTip)}                ||| func,refto

- {5295F0 {struct SmsMessage} *__thiscall SmsMessageList::SendMessage({struct SmsMessageList} *this,                            ||| func,refto,refto
                                                                      {struct SmsData} *smsdata)}                               ||| refto
  Checks with {514CB0} first.                                                                                                   ||| ref

- {529670 {struct SmsMessage} *__thiscall SmsMessageList::SendMessageFormatted({struct SmsMessageList} *this,                   ||| func,refto,refto
                                                                               {struct SmsData} *smsdata,                       ||| refto
                                                                               unsigned int bodyFormatLanguageLabel,
                                                                               unsigned int subjectFormatLanguageLabel,
                                                                               unsigned int subjectParameterLanguageLabel)}
  Checks with {514CB0} first.                                                                                                   ||| ref

- {529860 int __thiscall SmsMessageList::SendSomeCareerStartMsgs?({struct SmsMessageList} *this, void *arg0)}                   ||| func,refoto
  Goes through all {838454} and send all unreceived messages with {{structSmsData+2}} 8 (My game files do not have any messages ||| ref,code,refto
  with that type)? Also checks for type {{SMS_TYPE_CAREER_START}}, then does more checks with {arg0} before sending.            ||| code,refto,code

- {5299B0 void __thiscall SmsMessageList::SendDVDCoverSmsWithIndex({struct SmsMessageList} *this, int index)}                   ||| func,refto
  Goes through all {838454} and send every one that hasn't been received yet and has {{structSmsData+2} ==                      ||| ref,code,refto
  {SMS_TYPE_DVD_COVER}} and {{structSmsData+8} == index} by using {5295F0}                                                      ||| refto,code,refto,ref
  (which already has a check for if it was already received...).

- {529B50 void __thiscall SmsMessageList::SendOutrunInfoSms({struct SmsMessageList} *this)}                                     ||| func,refto
  Goes through all {838454} and send every one that hasn't been received yet and has {{structSmsData+2} ==                      ||| ref,code,refto
  {SMS_TYPE_OUTRUN_INFO}} by using {5295F0} when it wasn't received yet.                                                        ||| refto,ref
  (which already has a check for if it was already received...).
  This only matches the {SMS_OUTRUN_INTRO} SMS.                                                                                 ||| code

- {529BD0 void __thiscall SmsMessageList::SendOutrunVictoryOrDefeatSms({struct SmsMessageList} *this, int didWin)}              ||| func,refto
  Goes through all {838454}. When {didWin} is 1, send all with {{structSmsData+2} == {SMS_TYPE_OUTRUN_VICTORY}}, else send      ||| ref,code,code,refto,refto
  all with {{structSmsData+2} == {SMS_TYPE_OUTRUN_DEFEAT}}. Uses {5295F0}.                                                      ||| code,refto,refto,ref

- {529C40 {struct SmsData} *__thiscall SmsMessageList::SendEngageTipSmsMessage({struct SmsMessageList} *this,                   ||| func,refto,refto
                                                                               void *engageMarker)}
  Returns null when it was already received.

- {533890 {struct SmsMessage} *__thiscall SmsMessageList::SendMessageByHash({struct SmsMessageList} *this,              ||| func,refto,refto
                                                                            int hash)}
  Combines {501310}, {514CB0} and {5295F0}.                                                             ||| ref,ref,ref

- {5338C0 void __thiscall SmsMessageList::SendMagOrUnlockMessage({struct SmsMessageList} *this, ?)}     ||| func,refto
  Uses {529670}.                                                                                        ||| ref
  TODO

- {83632C int smsOpenType}                                                                              ||| field
  0 = mailbox is not on screen.
  1 = mailbox opened from tab straight into sms (when one sms is unread),
  then esc goes to the category of the msg.
  2 = mailbox opened from tab into inbox, then esc goes to the index again.

- {838450 numSmsDatas}                                                                                  ||| field
  Number of stuffs in {838454}.                                                                         ||| ref
  Loaded in {5012F0}.                                                                                   ||| ref

- {838454 {struct SmsData} *smsDatas}                                                                   ||| field,refto
  Loaded in {5012F0}.                                                                                   ||| ref

- {860A60 {struct SmsMessageList} smsMessages}                                                          ||| func,refto
  This is {{85AD40}.{structCareerData+5D20}}.                                                           ||| code,refplain,refto
.pop symbols

.pop section

Need text here or my parser breaks.

.push pre
{struct CareerMoney} \{                                                                         ||| mkref
	int money;
};

{struct CareerData} \{                                                                          ||| mkref
        /*5D20*/
        {struct SmsMessageList} {smsMessages};                                                  ||| refto,mkref name=structCareerData+5D20
	/*7134*/
	{struct CareerMoney} {money};                                                           ||| refto,mkref name=structCareerData+7134
};
.pop pre

The career money cheat is mildly interesting, as it seems to work in two different
ways. It adds the amount to a variable that is used when a new career is started and
it adds the amount to the current career data if the loaded profile didn't start
career yet.

.controlchars [] .push pre
/*from [5760A0]*/                                                                               ||| ref
/*ordermebaby ($1000 career start bonus)*/
[cheatExtraCareerMoney1000] = 1000;                                                             ||| refplain address=865130
// ^ used when starting a new career from a profile that
// was loaded from the profile menu
if (![isProfileWithStartedCareerLoaded])  {                                                     ||| refplain address=86347C
	if ([CareerGetMoney]() == 0)  {                                                         ||| refplain address=500F90
		[CareerSetMoney](1000);                                                         ||| refplain address=500F80
		// ^ This only has an effect when the profile was
		// loaded from the loading screen
	}
}
.controlchars {} .pop pre

.push symbols
- {495D30 CareerShowSponsorSelectScreen?()}                                                             ||| func

- {500F90 int __thiscall CareerGetMoney({struct CareerMoney} *this)}                                    ||| func,refto

- {500180 char* __thiscall GetCareerLanguageString(short *this)}                                        ||| func
  Uses {838428} along with offset passed in {this} to return a string.                                  ||| ref,code

- {500F80 void __thiscall CareerGiveMoney({struct CareerMoney} *this, int amount)}                      ||| func,refto
  Only used in the career money cheats.

- {5129F0 int __thiscall GetCareerSponsorLanguageKey(short *this)}                                      ||| func
  Uses {838428} along with offset passed in {this} to format a string {SPONSOR_%s} and                  ||| ref,code,code
  return the hash result to use for getting a language string.

- {528980 void __thiscall Career::RemoveAllReceivedTipEngageMarkers({struct CareerData} *this)}         ||| func,refto

- {532830 void MaybeStartCareer?()}                                                                     ||| func
  It's the only func that calls {576090}.                                                               ||| ref

- {532D40 void __thiscall Career::EngageTipMarkerHit({struct CareerData} *this, void *engageMarker)}    ||| func,refto
  {{Imlementation}                                                                                      ||| details,summary
  .controlchars [] .push pre
  [struct SmsData] *smsdata;                                                                            ||| refto

  smsdata = this->[structCareerData+5D20]->[529C40](engageMarker);                                      ||| refto,refplain
  if (smsdata) {
          this->[structCareerData+7134] += smsdata->[structSmsData+C];                                  ||| refto,refto
          this->[528980]();                                                                             ||| refplain
  }
  .controlchars {} .pop pre
  }

- {83648C char autoLoadLastProfileIntoCareer?}                                                          ||| field

- {83840C ptr83840C}                                                                                    ||| field
  Pointer to some struct with DVD/SHOW related stuff.

- {838428 ptr838428}                                                                                    ||| field
  Pointer to career related labels/keys.

- {86347C int isProfileWithStartedCareerLoaded}                                                         ||| field
  Fun fact: when creating a new profile,
  this value is set to 0 when the textbox to enter a name appears.
  When canceling at that point, it's set back to 1
  (if the loaded profile already had career started).

- {85AD40 {struct CareerData} careerData}                                                               ||| field,refto

- {862838 int _currentStage}                                                                            ||| field
  Maybe this is part of {struct CareerData}?                                                            ||| refto
.pop symbols

.pop section
.push section

{LAN/OL}  ||| h id=networkstuff

.push pre
{struct SocketWrapper} \{                                                                                               ||| mkref
        {struct SocketWrapper} *{previousSocketWrapper}                                                                 ||| refto,mkref name=structSocketWrapper+0
        int field_4;
        int socket_af;
        int socket_type;
        int socket_protocol;
        int field_14;
        SOCKET socket;
        int field_1C;
        int field_20;
        int field_24;
        int field_28;
        int field_2C;
        int field_30;
        int field_34;
        int field_38;
        int field_3C;
        int field_40;
        int field_44;
        {struct SocketWrapperWrapper} *socketWrapperWrapper;                                                            ||| refto
        int (*func)(void*,void*,void*); /*actual number of parameters is unknown*/
};

{struct CriticalSectionWrapper_3} \{                                                                                    ||| mkref
        int lastAccessedThreadId;
        int numActiveLocks;
        int isInCriticalSection;
        CRITICAL_SECTION criticalSection
};
EXPECT_SIZE(struct CriticalSectionWrapper_3, 0x24);

{struct SocketWrapperWrapper} \{                                                                                        ||| mkref
        {struct SocketWrapper} *socketWrapper;                                                                          ||| refto
        int field_4;
        int field_8;
        struct CriticalSectionWrapper_3 criticalSectionWrapper;
        int ptrField_30;
        int field_34;
        int field_38;
};
.pop pre

.push symbols
- {74A220 {struct SocketWrapper} *CreateNonBlockingSocket(int af, int type, int protocol)}                              ||| func,refto
  Calls Winsock's {socket}, set it nonblocking (with {ioctlsocket}).                                                    ||| code,code
  In case of {type == SOCK_RAW}, call {setsockopt(s, SOL_SOCKET, SO_BROADCAST, (ptr to 1), 4)}.                         ||| code,code
  Returned value is stored in {8B7C9C} and the previous value is put in its {{structSocketWrapper+0}} (this seems to be ||| ref,code,refto
  an atomic operation).

- {74A2D0 int CloseSocketWrapper({struct SocketWrapper} *socketWrapper)}                                                ||| func,refto
  Calls Winsock's {shutdown} and {closesocket}. Some critical section stuff.                                            ||| code,code

- {74A380 int BindWrapper({struct SocketWrapper} *socketWrapper, int name, int namelen)}                                ||| func,refto
  Calls Winsock's {bind}.                                                                                               ||| code
  0 on success or {WSAEWOULDBLOCK}/{WSAECONNRESET},                                                                     ||| code,code
  -2 on {WSAENOTCONN},                                                                                                  ||| code
  -5 on {WSAENETUNREACH}/{WSAEHOSTDOWN},                                                                                ||| code,code
  -6 on {WSAECONNREFUSED},                                                                                              ||| code
  -7 on other err.

- {8B7C9C {struct SocketWrapper} *socketWrapper}                                                                        ||| field,refto
  Contains latest created socket.

.pop symbols

.pop section
.push section

{D3D9 Stuff}  ||| h id=d3d9stuff

.push symbols
- {86C120 struct D3DADAPTER_IDENTIFIER9 _d3d9AdapterIdentifier}                                 ||| field

- {870970 IDirect3D9 *_IDirect3D9ptr}                                                           ||| field

- {870974 IDirect3DDevice9 *_IDirect3DDevice9Ptr}                                               ||| field

- {8709AC int _displayAdapter}                                                                  ||| field
  {Ordinal number that denotes the display adapter.                                             ||| em
  {D3DADAPTER_DEFAULT(0)} is always the primary display adapter.}                               ||| code
.pop symbols

.pop section
.push section

{Other symbols}  ||| h id=other_symbols

.push ida
{.rdata:0079B9F0} {aDDecodercaptur} db {'d:\decodercapture%04d.fss'},{0}                        ||| comment,ident,str,num

{.rdata:007A1344} {a__IndepSrcOnli} db {'..\indep\src\online/LobbyCore.cpp'},{0}                ||| comment,ident,str,num

{.rdata:007A5BF8} {aHotpositionSHo} db {'//'},{0Ah}                                             ||| comment,ident,str,num
{.rdata:007A5BF8}                 db {'// HotPosition - %s'},{0Ah}                              ||| comment,str,num
{.rdata:007A5BF8}                 db {'//'},{0Ah}                                               ||| comment,str,num
{.rdata:007A5BF8}                 db {'HOTPOSITION: %8.2f,%8.2f,%8.2f  Angle=0x%04x'},{0Ah},{0} ||| comment,str,num,num

{.rdata:00787568} {aSeeulator}      db {'Seeulator'},{0}                                        ||| comment,ident,str,num
{.rdata:00787574} {aJr2server}      db {'JR2Server'},{0}                                        ||| comment,ident,str,num
.pop ida

.push pre
{struct ObjectLink} \{                                                                          ||| mkref
        {struct ObjectLink} *{next};                                                            ||| refto,mkref name=structObjectLink+0
        {struct ObjectLink} *{prev};                                                            ||| refto,mkref name=structObjectLink+4
};

{struct WideCharString} \{                                                                      ||| mkref
        wchar_t *{ptrString};                                                                   ||| mkref name=structWideCharString+0
        int {allocatedWcharLength}; /*amount of wchars that can fit, excluding zero term*/      ||| mkref name=structWideCharString+4
};

{struct WorldAnimStuff} \{                                                                      ||| mkref
        struct Pool *{worldAnimEntityPool};                                                     ||| mkref name=structWorldAnimStuff+0
        struct Pool *{worldAnimEntityTreePool};                                                 ||| mkref name=structWorldAnimStuff+4
        struct Pool *{worldAnimEntityTreeInfoPool};                                             ||| mkref name=structWorldAnimStuff+8
        struct Pool *{worldAnimCtrlPool};                                                       ||| mkref name=structWorldAnimStuff+C
        struct Pool *{worldAnimInstanceEntryPool};                                              ||| mkref name=structWorldAnimStuff+10
        char poolsCreated?;
        char field_15;
        char field_16;
        char field_17;
        int field_18;
        int field_1C;
        int field_20;
        int field_24;
        int field_28;
        int field_2C;
        int field_30;
        int field_34;
        int field_38;
        int field_3C;
        int field_40;
        int field_44;
        int field_48;
};
EXPECT_SIZE(struct WorldAnimStuff, 0x4C);
.pop pre

.push symbols
- {4035D0 void LoadAIStuff()}                                                                   ||| func

- {4385B0 void __thiscall WorldAnimStuff::CreatePools?({struct WorldAnimStuff} *this)}          ||| func,refto

- {439EA0 void __thiscall WorldAnimStuff::ctor({struct WorldAnimStuff} *this)}                  ||| func,refto

- {43DBB0 int strlenWithNullcheck(char *str)}                                                   ||| func

- {43DBD0 int strcpy(char *dest, char *src)}                                                    ||| func

- {43DC00 void strncpy(char *dst, char *src, int maxlen)}                                       ||| func

- {43DC30 int strcmp(char *a, char *b)}                                                         ||| func

- {43DC60 int strncmp(char *a, char *b, int maxlen)}                                            ||| func

- {43DCC0 int stricmp(char *a, char *b)}                                                        ||| func

- {43DDA0 void strcpycat(char *dest, char *src1, char *src2)}                                   ||| func
  Functionally equivalent to {strcpy(dest, src1); strcpy(dest + strlen(src1), src2);}.          ||| code

- {43E000 void *NaiveStrcpyCharToWchar(wchar_t *dest, char *src)}                               ||| func
  Uses sign extension. See also {50D3C0} and {512530}.                                          ||| ref,ref

- {43E950 int FormatWithSinglePlaceholderPtr(char *dst, char *format, void *parameter)}         ||| func
  This does a bunch of things that I don't want to figure out,
  but the the result is that it formats.

- {43FBC0 int FormatWithSinglePlaceholderPtrTimed(char *dst, char *format, void *parameter)}    ||| func
  Calls {43E950} but does some stuff with {QueryPerformanceCounter} before and after,           ||| ref, code
  I'm assuming it times. Seems to add the time spent to {828518}, and increments {82851C}       ||| ref,ref
  every time this func is called.

- {5047C0 sub_5047C0}                                                                           ||| func

- {50D510 void sub_50D510_DebugPrint(?)}                                                        ||| func
  A nop function.
  It seems like many calls to different functions that got nopped all redirect here.
  Some of the calls are used as a debug print, see {debugprint}.                                ||| href

- {50DC70 wchar_t *__thiscall FindNewlineW(void *this, wchar_t *str)}                           ||| func
  Doesn't actually use {this}, so can be treated as a {__stdcall}.                              ||| code,code
  Returns a ptr to the first occurrence of {^} or {\n}, nullptr otherwise.                      ||| code,code

- {50DCB0 wchar_t *__thiscall GetEndOfStringW(void *this, wchar_t *str)}                        ||| func
  Doesn't actually use {this}, so can be treated as a {__stdcall}.                              ||| code,code
  Returns a ptr to the zero terminator.

- {511630 void strcpyW(wchar_t *dest, wchar_t *src)}                                            ||| func
  Checks if {dest} is NULL first.                                                               ||| code

- {51DE90 int __thiscall WideCharString::EnsureAllocatedSize({struct WideCharString} *this, int length)}        ||| func,refto
  If it's already allocated and long enough, NOP.
  Otherwise allocate new memory, copy existing string, free previous memory.
  Does not actually check the {{structWideCharString+4}} field, but does a strlen to check if   ||| code,refto
  the existing string length is less than required.

- {532670 struct WideCharString *__thiscall WideCharString::SetFromCharString({struct WideCharString} *this, char *str)}        ||| func,refto
  Converts language aware, like {512530} does. Calls {51DE90}.                                  ||| ref,ref
  Returns itself.

- {575620 void * j_HeapAllocWrapper75C6C8(int bytes)}                                           ||| func

- {575630 void j_HeapFreeWrapper75C6DA(void *mem)}                                              ||| func

- {577AB0 sub_577AB0}                                                                           ||| func

- {5B7A70 void LoadPaths()}                                                                     ||| func
  TODO

- {5CCD60 LPRESULT MainWndProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)}             ||| func

- {741650 int strncpy_0(char *dest, int maxlen, char *src)}                                     ||| func
  Returns amount of chars written?

- {75BCC7 start}                                                                                ||| func

- {75D45B sub_75D45B()}                                                                         ||| func
  Invoked once at boot, does things (todo) and calls all functions in {7E8000}.                 ||| ref

- {75D65B sub_75D65B}                                                                           ||| func

- {75DD6F sub_75DD6F}                                                                           ||| func

- {77B5E0 void init_function_77B5E0()}                                                          ||| func
  Calls {439EA0}.                                                                               ||| ref

- {77E580 init_function_77E580_MouseData_ctor()}                                                ||| func
  Calls {5C8600} to initialize mouse data.                                                      ||| ref

- {7E8000 void (*someInitFunctions)()[821]}                                                     ||| field
  Array of functions that are called at boot, by {75D45B}.                                      ||| ref
  Some of them are constructors being called.

- {7F91C4 int drawHud}                                                                          ||| field

- {827EF0 {struct WorldAnimStuff} worldAnimStuff}                                               ||| field,refto
  TODO usages and stuff

- {828518 int _TimeSpentInFormatWithSinglePlaceholder}                                          ||| field
  Used in {43FBC0}.                                                                             ||| ref

- {82851C int _FormatWithSinglePlaceholderCallCount}                                            ||| field
  Used in {43FBC0}.                                                                             ||| ref
- {864F4C int _isGameClosing}                                                                   ||| field

- {8709D8 int _isCTRLKeyDown}                                                                   ||| field
  Set in {5CCD60}, but seemingly never read from? REVISIT                                       ||| ref

- {8A1CCC void *ptrCarData}                                                                     ||| field

- {835BB8 wchar_t loadedProfileName[32]}                                                        ||| field

- {83A9E0 char loadedProfileName[32]}                                                           ||| field

- {850078 int someOLState}                                                                      ||| field
  Related to LAN/OL.

- {8654A4 int _??gameStateSomething}                                                            ||| field
  3 in menus, 4 5 loading, 6 in race

- {89E7E6 char isInPerformanceTuning}                                                           ||| field
.pop symbols
.pop section
.push plain
</body>
</html>
.pop plain
